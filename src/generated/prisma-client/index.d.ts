// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  campNavRows: (where?: CampNavRowsWhereInput) => Promise<boolean>;
  campaign: (where?: CampaignWhereInput) => Promise<boolean>;
  defaultParam: (where?: DefaultParamWhereInput) => Promise<boolean>;
  domain: (where?: DomainWhereInput) => Promise<boolean>;
  lander: (where?: LanderWhereInput) => Promise<boolean>;
  mainDomain: (where?: MainDomainWhereInput) => Promise<boolean>;
  navigation: (where?: NavigationWhereInput) => Promise<boolean>;
  offer: (where?: OfferWhereInput) => Promise<boolean>;
  parameter: (where?: ParameterWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  traffic: (where?: TrafficWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  campNavRows: (
    where: CampNavRowsWhereUniqueInput
  ) => CampNavRowsNullablePromise;
  campNavRowses: (args?: {
    where?: CampNavRowsWhereInput;
    orderBy?: CampNavRowsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CampNavRows>;
  campNavRowsesConnection: (args?: {
    where?: CampNavRowsWhereInput;
    orderBy?: CampNavRowsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CampNavRowsConnectionPromise;
  campaign: (where: CampaignWhereUniqueInput) => CampaignNullablePromise;
  campaigns: (args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Campaign>;
  campaignsConnection: (args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CampaignConnectionPromise;
  defaultParam: (
    where: DefaultParamWhereUniqueInput
  ) => DefaultParamNullablePromise;
  defaultParams: (args?: {
    where?: DefaultParamWhereInput;
    orderBy?: DefaultParamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DefaultParam>;
  defaultParamsConnection: (args?: {
    where?: DefaultParamWhereInput;
    orderBy?: DefaultParamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DefaultParamConnectionPromise;
  domain: (where: DomainWhereUniqueInput) => DomainNullablePromise;
  domains: (args?: {
    where?: DomainWhereInput;
    orderBy?: DomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Domain>;
  domainsConnection: (args?: {
    where?: DomainWhereInput;
    orderBy?: DomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DomainConnectionPromise;
  lander: (where: LanderWhereUniqueInput) => LanderNullablePromise;
  landers: (args?: {
    where?: LanderWhereInput;
    orderBy?: LanderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Lander>;
  landersConnection: (args?: {
    where?: LanderWhereInput;
    orderBy?: LanderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LanderConnectionPromise;
  mainDomain: (where: MainDomainWhereUniqueInput) => MainDomainNullablePromise;
  mainDomains: (args?: {
    where?: MainDomainWhereInput;
    orderBy?: MainDomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MainDomain>;
  mainDomainsConnection: (args?: {
    where?: MainDomainWhereInput;
    orderBy?: MainDomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MainDomainConnectionPromise;
  navigation: (where: NavigationWhereUniqueInput) => NavigationNullablePromise;
  navigations: (args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Navigation>;
  navigationsConnection: (args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NavigationConnectionPromise;
  offer: (where: OfferWhereUniqueInput) => OfferNullablePromise;
  offers: (args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Offer>;
  offersConnection: (args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OfferConnectionPromise;
  parameter: (where: ParameterWhereUniqueInput) => ParameterNullablePromise;
  parameters: (args?: {
    where?: ParameterWhereInput;
    orderBy?: ParameterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Parameter>;
  parametersConnection: (args?: {
    where?: ParameterWhereInput;
    orderBy?: ParameterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ParameterConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenNullablePromise;
  tokens: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Token>;
  tokensConnection: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TokenConnectionPromise;
  traffic: (where: TrafficWhereUniqueInput) => TrafficNullablePromise;
  traffics: (args?: {
    where?: TrafficWhereInput;
    orderBy?: TrafficOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Traffic>;
  trafficsConnection: (args?: {
    where?: TrafficWhereInput;
    orderBy?: TrafficOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TrafficConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCampNavRows: (data: CampNavRowsCreateInput) => CampNavRowsPromise;
  updateCampNavRows: (args: {
    data: CampNavRowsUpdateInput;
    where: CampNavRowsWhereUniqueInput;
  }) => CampNavRowsPromise;
  updateManyCampNavRowses: (args: {
    data: CampNavRowsUpdateManyMutationInput;
    where?: CampNavRowsWhereInput;
  }) => BatchPayloadPromise;
  upsertCampNavRows: (args: {
    where: CampNavRowsWhereUniqueInput;
    create: CampNavRowsCreateInput;
    update: CampNavRowsUpdateInput;
  }) => CampNavRowsPromise;
  deleteCampNavRows: (where: CampNavRowsWhereUniqueInput) => CampNavRowsPromise;
  deleteManyCampNavRowses: (
    where?: CampNavRowsWhereInput
  ) => BatchPayloadPromise;
  createCampaign: (data: CampaignCreateInput) => CampaignPromise;
  updateCampaign: (args: {
    data: CampaignUpdateInput;
    where: CampaignWhereUniqueInput;
  }) => CampaignPromise;
  updateManyCampaigns: (args: {
    data: CampaignUpdateManyMutationInput;
    where?: CampaignWhereInput;
  }) => BatchPayloadPromise;
  upsertCampaign: (args: {
    where: CampaignWhereUniqueInput;
    create: CampaignCreateInput;
    update: CampaignUpdateInput;
  }) => CampaignPromise;
  deleteCampaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  deleteManyCampaigns: (where?: CampaignWhereInput) => BatchPayloadPromise;
  createDefaultParam: (data: DefaultParamCreateInput) => DefaultParamPromise;
  updateDefaultParam: (args: {
    data: DefaultParamUpdateInput;
    where: DefaultParamWhereUniqueInput;
  }) => DefaultParamPromise;
  updateManyDefaultParams: (args: {
    data: DefaultParamUpdateManyMutationInput;
    where?: DefaultParamWhereInput;
  }) => BatchPayloadPromise;
  upsertDefaultParam: (args: {
    where: DefaultParamWhereUniqueInput;
    create: DefaultParamCreateInput;
    update: DefaultParamUpdateInput;
  }) => DefaultParamPromise;
  deleteDefaultParam: (
    where: DefaultParamWhereUniqueInput
  ) => DefaultParamPromise;
  deleteManyDefaultParams: (
    where?: DefaultParamWhereInput
  ) => BatchPayloadPromise;
  createDomain: (data: DomainCreateInput) => DomainPromise;
  updateDomain: (args: {
    data: DomainUpdateInput;
    where: DomainWhereUniqueInput;
  }) => DomainPromise;
  updateManyDomains: (args: {
    data: DomainUpdateManyMutationInput;
    where?: DomainWhereInput;
  }) => BatchPayloadPromise;
  upsertDomain: (args: {
    where: DomainWhereUniqueInput;
    create: DomainCreateInput;
    update: DomainUpdateInput;
  }) => DomainPromise;
  deleteDomain: (where: DomainWhereUniqueInput) => DomainPromise;
  deleteManyDomains: (where?: DomainWhereInput) => BatchPayloadPromise;
  createLander: (data: LanderCreateInput) => LanderPromise;
  updateLander: (args: {
    data: LanderUpdateInput;
    where: LanderWhereUniqueInput;
  }) => LanderPromise;
  updateManyLanders: (args: {
    data: LanderUpdateManyMutationInput;
    where?: LanderWhereInput;
  }) => BatchPayloadPromise;
  upsertLander: (args: {
    where: LanderWhereUniqueInput;
    create: LanderCreateInput;
    update: LanderUpdateInput;
  }) => LanderPromise;
  deleteLander: (where: LanderWhereUniqueInput) => LanderPromise;
  deleteManyLanders: (where?: LanderWhereInput) => BatchPayloadPromise;
  createMainDomain: (data: MainDomainCreateInput) => MainDomainPromise;
  updateMainDomain: (args: {
    data: MainDomainUpdateInput;
    where: MainDomainWhereUniqueInput;
  }) => MainDomainPromise;
  updateManyMainDomains: (args: {
    data: MainDomainUpdateManyMutationInput;
    where?: MainDomainWhereInput;
  }) => BatchPayloadPromise;
  upsertMainDomain: (args: {
    where: MainDomainWhereUniqueInput;
    create: MainDomainCreateInput;
    update: MainDomainUpdateInput;
  }) => MainDomainPromise;
  deleteMainDomain: (where: MainDomainWhereUniqueInput) => MainDomainPromise;
  deleteManyMainDomains: (where?: MainDomainWhereInput) => BatchPayloadPromise;
  createNavigation: (data: NavigationCreateInput) => NavigationPromise;
  updateNavigation: (args: {
    data: NavigationUpdateInput;
    where: NavigationWhereUniqueInput;
  }) => NavigationPromise;
  updateManyNavigations: (args: {
    data: NavigationUpdateManyMutationInput;
    where?: NavigationWhereInput;
  }) => BatchPayloadPromise;
  upsertNavigation: (args: {
    where: NavigationWhereUniqueInput;
    create: NavigationCreateInput;
    update: NavigationUpdateInput;
  }) => NavigationPromise;
  deleteNavigation: (where: NavigationWhereUniqueInput) => NavigationPromise;
  deleteManyNavigations: (where?: NavigationWhereInput) => BatchPayloadPromise;
  createOffer: (data: OfferCreateInput) => OfferPromise;
  updateOffer: (args: {
    data: OfferUpdateInput;
    where: OfferWhereUniqueInput;
  }) => OfferPromise;
  updateManyOffers: (args: {
    data: OfferUpdateManyMutationInput;
    where?: OfferWhereInput;
  }) => BatchPayloadPromise;
  upsertOffer: (args: {
    where: OfferWhereUniqueInput;
    create: OfferCreateInput;
    update: OfferUpdateInput;
  }) => OfferPromise;
  deleteOffer: (where: OfferWhereUniqueInput) => OfferPromise;
  deleteManyOffers: (where?: OfferWhereInput) => BatchPayloadPromise;
  createParameter: (data: ParameterCreateInput) => ParameterPromise;
  updateParameter: (args: {
    data: ParameterUpdateInput;
    where: ParameterWhereUniqueInput;
  }) => ParameterPromise;
  updateManyParameters: (args: {
    data: ParameterUpdateManyMutationInput;
    where?: ParameterWhereInput;
  }) => BatchPayloadPromise;
  upsertParameter: (args: {
    where: ParameterWhereUniqueInput;
    create: ParameterCreateInput;
    update: ParameterUpdateInput;
  }) => ParameterPromise;
  deleteParameter: (where: ParameterWhereUniqueInput) => ParameterPromise;
  deleteManyParameters: (where?: ParameterWhereInput) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (args: {
    data: TokenUpdateInput;
    where: TokenWhereUniqueInput;
  }) => TokenPromise;
  updateManyTokens: (args: {
    data: TokenUpdateManyMutationInput;
    where?: TokenWhereInput;
  }) => BatchPayloadPromise;
  upsertToken: (args: {
    where: TokenWhereUniqueInput;
    create: TokenCreateInput;
    update: TokenUpdateInput;
  }) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createTraffic: (data: TrafficCreateInput) => TrafficPromise;
  updateTraffic: (args: {
    data: TrafficUpdateInput;
    where: TrafficWhereUniqueInput;
  }) => TrafficPromise;
  updateManyTraffics: (args: {
    data: TrafficUpdateManyMutationInput;
    where?: TrafficWhereInput;
  }) => BatchPayloadPromise;
  upsertTraffic: (args: {
    where: TrafficWhereUniqueInput;
    create: TrafficCreateInput;
    update: TrafficUpdateInput;
  }) => TrafficPromise;
  deleteTraffic: (where: TrafficWhereUniqueInput) => TrafficPromise;
  deleteManyTraffics: (where?: TrafficWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  campNavRows: (
    where?: CampNavRowsSubscriptionWhereInput
  ) => CampNavRowsSubscriptionPayloadSubscription;
  campaign: (
    where?: CampaignSubscriptionWhereInput
  ) => CampaignSubscriptionPayloadSubscription;
  defaultParam: (
    where?: DefaultParamSubscriptionWhereInput
  ) => DefaultParamSubscriptionPayloadSubscription;
  domain: (
    where?: DomainSubscriptionWhereInput
  ) => DomainSubscriptionPayloadSubscription;
  lander: (
    where?: LanderSubscriptionWhereInput
  ) => LanderSubscriptionPayloadSubscription;
  mainDomain: (
    where?: MainDomainSubscriptionWhereInput
  ) => MainDomainSubscriptionPayloadSubscription;
  navigation: (
    where?: NavigationSubscriptionWhereInput
  ) => NavigationSubscriptionPayloadSubscription;
  offer: (
    where?: OfferSubscriptionWhereInput
  ) => OfferSubscriptionPayloadSubscription;
  parameter: (
    where?: ParameterSubscriptionWhereInput
  ) => ParameterSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  traffic: (
    where?: TrafficSubscriptionWhereInput
  ) => TrafficSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CampaignOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "refresh_ASC"
  | "refresh_DESC"
  | "totalPercent_ASC"
  | "totalPercent_DESC"
  | "url_ASC"
  | "url_DESC"
  | "traffic_ASC"
  | "traffic_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export type TrafficOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export type NavigationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC"
  | "data_ASC"
  | "data_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC";

export type ParameterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "track_ASC"
  | "track_DESC";

export type DefaultParamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "head_ASC"
  | "head_DESC"
  | "default_ASC"
  | "default_DESC"
  | "track_ASC"
  | "track_DESC";

export type LanderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export type OfferOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export type TokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "parameter_ASC"
  | "parameter_DESC"
  | "placeholder_ASC"
  | "placeholder_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DomainOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export type CampNavRowsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "percent_ASC"
  | "percent_DESC"
  | "landerName_ASC"
  | "landerName_DESC";

export type MainDomainOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userUnique_ASC"
  | "userUnique_DESC";

export interface DefaultParamUpdateManyInput {
  create?: Maybe<DefaultParamCreateInput[] | DefaultParamCreateInput>;
  update?: Maybe<
    | DefaultParamUpdateWithWhereUniqueNestedInput[]
    | DefaultParamUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | DefaultParamUpsertWithWhereUniqueNestedInput[]
    | DefaultParamUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<DefaultParamWhereUniqueInput[] | DefaultParamWhereUniqueInput>;
  connect?: Maybe<
    DefaultParamWhereUniqueInput[] | DefaultParamWhereUniqueInput
  >;
  set?: Maybe<DefaultParamWhereUniqueInput[] | DefaultParamWhereUniqueInput>;
  disconnect?: Maybe<
    DefaultParamWhereUniqueInput[] | DefaultParamWhereUniqueInput
  >;
  deleteMany?: Maybe<
    DefaultParamScalarWhereInput[] | DefaultParamScalarWhereInput
  >;
  updateMany?: Maybe<
    | DefaultParamUpdateManyWithWhereNestedInput[]
    | DefaultParamUpdateManyWithWhereNestedInput
  >;
}

export type CampNavRowsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DefaultParamUpdateManyDataInput {
  head?: Maybe<String>;
  default?: Maybe<String>;
  tokens?: Maybe<DefaultParamUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface TrafficWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  data_some?: Maybe<ParameterWhereInput>;
  default_data_some?: Maybe<DefaultParamWhereInput>;
  AND?: Maybe<TrafficWhereInput[] | TrafficWhereInput>;
}

export interface TrafficUpdatelockInput {
  set?: Maybe<String[] | String>;
}

export interface LanderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<LanderWhereInput[] | LanderWhereInput>;
}

export interface TrafficUpsertWithWhereUniqueWithoutUserInput {
  where: TrafficWhereUniqueInput;
  update: TrafficUpdateWithoutUserDataInput;
  create: TrafficCreateWithoutUserInput;
}

export interface NavigationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<NavigationWhereInput[] | NavigationWhereInput>;
}

export interface TrafficScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<TrafficScalarWhereInput[] | TrafficScalarWhereInput>;
  OR?: Maybe<TrafficScalarWhereInput[] | TrafficScalarWhereInput>;
  NOT?: Maybe<TrafficScalarWhereInput[] | TrafficScalarWhereInput>;
}

export interface DomainWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  MainDomain?: Maybe<MainDomainWhereInput>;
  AND?: Maybe<DomainWhereInput[] | DomainWhereInput>;
}

export interface TrafficUpdateManyWithWhereNestedInput {
  where: TrafficScalarWhereInput;
  data: TrafficUpdateManyDataInput;
}

export interface ParameterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  track?: Maybe<Boolean>;
  track_not?: Maybe<Boolean>;
  AND?: Maybe<ParameterWhereInput[] | ParameterWhereInput>;
}

export interface MainDomainCreateOneWithoutUserInput {
  create?: Maybe<MainDomainCreateWithoutUserInput>;
  connect?: Maybe<MainDomainWhereUniqueInput>;
}

export interface LanderCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  userUnique: String;
  user: UserCreateOneWithoutLanderInput;
  lock?: Maybe<LanderCreatelockInput>;
}

export interface MainDomainCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  userUnique: String;
  domain: DomainCreateOneWithoutMainDomainInput;
}

export interface TrafficUpdateManyDataInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<TrafficUpdatelockInput>;
}

export interface DomainCreateOneWithoutMainDomainInput {
  create?: Maybe<DomainCreateWithoutMainDomainInput>;
  connect?: Maybe<DomainWhereUniqueInput>;
}

export interface TrafficSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TrafficWhereInput>;
  AND?: Maybe<TrafficSubscriptionWhereInput[] | TrafficSubscriptionWhereInput>;
}

export interface DomainCreateWithoutMainDomainInput {
  id?: Maybe<ID_Input>;
  url: String;
  userUnique: String;
  user: UserCreateOneWithoutDomainInput;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TokenWhereInput>;
  AND?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
}

export interface UserCreateOneWithoutDomainInput {
  create?: Maybe<UserCreateWithoutDomainInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OfferSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OfferWhereInput>;
  AND?: Maybe<OfferSubscriptionWhereInput[] | OfferSubscriptionWhereInput>;
}

export interface UserCreateWithoutDomainInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface MainDomainSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MainDomainWhereInput>;
  AND?: Maybe<
    MainDomainSubscriptionWhereInput[] | MainDomainSubscriptionWhereInput
  >;
}

export interface CampaignUpdateInput {
  name?: Maybe<String>;
  refresh?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  url?: Maybe<String>;
  traffic?: Maybe<String>;
  landerRow?: Maybe<CampNavRowsUpdateManyInput>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutCampaignInput>;
}

export interface DomainSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DomainWhereInput>;
  AND?: Maybe<DomainSubscriptionWhereInput[] | DomainSubscriptionWhereInput>;
}

export interface CampNavRowsUpdateManyInput {
  create?: Maybe<CampNavRowsCreateInput[] | CampNavRowsCreateInput>;
  update?: Maybe<
    | CampNavRowsUpdateWithWhereUniqueNestedInput[]
    | CampNavRowsUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CampNavRowsUpsertWithWhereUniqueNestedInput[]
    | CampNavRowsUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CampNavRowsWhereUniqueInput[] | CampNavRowsWhereUniqueInput>;
  connect?: Maybe<CampNavRowsWhereUniqueInput[] | CampNavRowsWhereUniqueInput>;
  set?: Maybe<CampNavRowsWhereUniqueInput[] | CampNavRowsWhereUniqueInput>;
  disconnect?: Maybe<
    CampNavRowsWhereUniqueInput[] | CampNavRowsWhereUniqueInput
  >;
  deleteMany?: Maybe<
    CampNavRowsScalarWhereInput[] | CampNavRowsScalarWhereInput
  >;
  updateMany?: Maybe<
    | CampNavRowsUpdateManyWithWhereNestedInput[]
    | CampNavRowsUpdateManyWithWhereNestedInput
  >;
}

export interface CampaignSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CampaignWhereInput>;
  AND?: Maybe<
    CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput
  >;
}

export interface CampNavRowsUpdateWithWhereUniqueNestedInput {
  where: CampNavRowsWhereUniqueInput;
  data: CampNavRowsUpdateDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface CampNavRowsUpdateDataInput {
  percent?: Maybe<Int>;
  landerName?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface CampNavRowsUpsertWithWhereUniqueNestedInput {
  where: CampNavRowsWhereUniqueInput;
  update: CampNavRowsUpdateDataInput;
  create: CampNavRowsCreateInput;
}

export interface UserUpsertWithoutTrafficInput {
  update: UserUpdateWithoutTrafficDataInput;
  create: UserCreateWithoutTrafficInput;
}

export interface CampNavRowsScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  percent_not?: Maybe<Int>;
  percent_in?: Maybe<Int[] | Int>;
  percent_not_in?: Maybe<Int[] | Int>;
  percent_lt?: Maybe<Int>;
  percent_lte?: Maybe<Int>;
  percent_gt?: Maybe<Int>;
  percent_gte?: Maybe<Int>;
  landerName?: Maybe<String>;
  landerName_not?: Maybe<String>;
  landerName_in?: Maybe<String[] | String>;
  landerName_not_in?: Maybe<String[] | String>;
  landerName_lt?: Maybe<String>;
  landerName_lte?: Maybe<String>;
  landerName_gt?: Maybe<String>;
  landerName_gte?: Maybe<String>;
  landerName_contains?: Maybe<String>;
  landerName_not_contains?: Maybe<String>;
  landerName_starts_with?: Maybe<String>;
  landerName_not_starts_with?: Maybe<String>;
  landerName_ends_with?: Maybe<String>;
  landerName_not_ends_with?: Maybe<String>;
  AND?: Maybe<CampNavRowsScalarWhereInput[] | CampNavRowsScalarWhereInput>;
  OR?: Maybe<CampNavRowsScalarWhereInput[] | CampNavRowsScalarWhereInput>;
  NOT?: Maybe<CampNavRowsScalarWhereInput[] | CampNavRowsScalarWhereInput>;
}

export interface UserUpdateWithoutTrafficDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface CampNavRowsUpdateManyWithWhereNestedInput {
  where: CampNavRowsScalarWhereInput;
  data: CampNavRowsUpdateManyDataInput;
}

export interface TrafficUpdateInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutTrafficInput>;
  data?: Maybe<ParameterUpdateManyInput>;
  default_data?: Maybe<DefaultParamUpdateManyInput>;
  lock?: Maybe<TrafficUpdatelockInput>;
}

export interface CampNavRowsUpdateManyDataInput {
  percent?: Maybe<Int>;
  landerName?: Maybe<String>;
}

export interface UserCreateWithoutTrafficInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface UserUpdateOneRequiredWithoutCampaignInput {
  create?: Maybe<UserCreateWithoutCampaignInput>;
  update?: Maybe<UserUpdateWithoutCampaignDataInput>;
  upsert?: Maybe<UserUpsertWithoutCampaignInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TrafficCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  userUnique: String;
  user: UserCreateOneWithoutTrafficInput;
  data?: Maybe<ParameterCreateManyInput>;
  default_data?: Maybe<DefaultParamCreateManyInput>;
  lock?: Maybe<TrafficCreatelockInput>;
}

export interface UserUpdateWithoutCampaignDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface TokenUpdateManyMutationInput {
  name?: Maybe<String>;
  parameter?: Maybe<String>;
  placeholder?: Maybe<String>;
}

export interface TrafficUpdateManyWithoutUserInput {
  create?: Maybe<
    TrafficCreateWithoutUserInput[] | TrafficCreateWithoutUserInput
  >;
  delete?: Maybe<TrafficWhereUniqueInput[] | TrafficWhereUniqueInput>;
  connect?: Maybe<TrafficWhereUniqueInput[] | TrafficWhereUniqueInput>;
  set?: Maybe<TrafficWhereUniqueInput[] | TrafficWhereUniqueInput>;
  disconnect?: Maybe<TrafficWhereUniqueInput[] | TrafficWhereUniqueInput>;
  update?: Maybe<
    | TrafficUpdateWithWhereUniqueWithoutUserInput[]
    | TrafficUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TrafficUpsertWithWhereUniqueWithoutUserInput[]
    | TrafficUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TrafficScalarWhereInput[] | TrafficScalarWhereInput>;
  updateMany?: Maybe<
    | TrafficUpdateManyWithWhereNestedInput[]
    | TrafficUpdateManyWithWhereNestedInput
  >;
}

export interface TokenCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  parameter: String;
  placeholder: String;
}

export interface TrafficUpdateWithWhereUniqueWithoutUserInput {
  where: TrafficWhereUniqueInput;
  data: TrafficUpdateWithoutUserDataInput;
}

export interface CampNavRowsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  percent?: Maybe<Int>;
  percent_not?: Maybe<Int>;
  percent_in?: Maybe<Int[] | Int>;
  percent_not_in?: Maybe<Int[] | Int>;
  percent_lt?: Maybe<Int>;
  percent_lte?: Maybe<Int>;
  percent_gt?: Maybe<Int>;
  percent_gte?: Maybe<Int>;
  landerName?: Maybe<String>;
  landerName_not?: Maybe<String>;
  landerName_in?: Maybe<String[] | String>;
  landerName_not_in?: Maybe<String[] | String>;
  landerName_lt?: Maybe<String>;
  landerName_lte?: Maybe<String>;
  landerName_gt?: Maybe<String>;
  landerName_gte?: Maybe<String>;
  landerName_contains?: Maybe<String>;
  landerName_not_contains?: Maybe<String>;
  landerName_starts_with?: Maybe<String>;
  landerName_not_starts_with?: Maybe<String>;
  landerName_ends_with?: Maybe<String>;
  landerName_not_ends_with?: Maybe<String>;
  AND?: Maybe<CampNavRowsWhereInput[] | CampNavRowsWhereInput>;
}

export interface TrafficUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  data?: Maybe<ParameterUpdateManyInput>;
  default_data?: Maybe<DefaultParamUpdateManyInput>;
  lock?: Maybe<TrafficUpdatelockInput>;
}

export interface ParameterUpdateInput {
  tokens?: Maybe<ParameterUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface ParameterUpdateManyInput {
  create?: Maybe<ParameterCreateInput[] | ParameterCreateInput>;
  update?: Maybe<
    | ParameterUpdateWithWhereUniqueNestedInput[]
    | ParameterUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ParameterUpsertWithWhereUniqueNestedInput[]
    | ParameterUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ParameterWhereUniqueInput[] | ParameterWhereUniqueInput>;
  connect?: Maybe<ParameterWhereUniqueInput[] | ParameterWhereUniqueInput>;
  set?: Maybe<ParameterWhereUniqueInput[] | ParameterWhereUniqueInput>;
  disconnect?: Maybe<ParameterWhereUniqueInput[] | ParameterWhereUniqueInput>;
  deleteMany?: Maybe<ParameterScalarWhereInput[] | ParameterScalarWhereInput>;
  updateMany?: Maybe<
    | ParameterUpdateManyWithWhereNestedInput[]
    | ParameterUpdateManyWithWhereNestedInput
  >;
}

export type NavigationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface ParameterUpdateWithWhereUniqueNestedInput {
  where: ParameterWhereUniqueInput;
  data: ParameterUpdateDataInput;
}

export interface UserUpdateWithoutOfferDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface ParameterUpdateDataInput {
  tokens?: Maybe<ParameterUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export type OfferWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface ParameterUpdatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateWithoutOfferInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface ParameterUpsertWithWhereUniqueNestedInput {
  where: ParameterWhereUniqueInput;
  update: ParameterUpdateDataInput;
  create: ParameterCreateInput;
}

export type ParameterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ParameterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  track?: Maybe<Boolean>;
  track_not?: Maybe<Boolean>;
  AND?: Maybe<ParameterScalarWhereInput[] | ParameterScalarWhereInput>;
  OR?: Maybe<ParameterScalarWhereInput[] | ParameterScalarWhereInput>;
  NOT?: Maybe<ParameterScalarWhereInput[] | ParameterScalarWhereInput>;
}

export interface NavigationUpdateManyMutationInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  data?: Maybe<Json>;
  lock?: Maybe<NavigationUpdatelockInput>;
}

export interface ParameterUpdateManyWithWhereNestedInput {
  where: ParameterScalarWhereInput;
  data: ParameterUpdateManyDataInput;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ParameterUpdateManyDataInput {
  tokens?: Maybe<ParameterUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface TokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parameter?: Maybe<String>;
  parameter_not?: Maybe<String>;
  parameter_in?: Maybe<String[] | String>;
  parameter_not_in?: Maybe<String[] | String>;
  parameter_lt?: Maybe<String>;
  parameter_lte?: Maybe<String>;
  parameter_gt?: Maybe<String>;
  parameter_gte?: Maybe<String>;
  parameter_contains?: Maybe<String>;
  parameter_not_contains?: Maybe<String>;
  parameter_starts_with?: Maybe<String>;
  parameter_not_starts_with?: Maybe<String>;
  parameter_ends_with?: Maybe<String>;
  parameter_not_ends_with?: Maybe<String>;
  placeholder?: Maybe<String>;
  placeholder_not?: Maybe<String>;
  placeholder_in?: Maybe<String[] | String>;
  placeholder_not_in?: Maybe<String[] | String>;
  placeholder_lt?: Maybe<String>;
  placeholder_lte?: Maybe<String>;
  placeholder_gt?: Maybe<String>;
  placeholder_gte?: Maybe<String>;
  placeholder_contains?: Maybe<String>;
  placeholder_not_contains?: Maybe<String>;
  placeholder_starts_with?: Maybe<String>;
  placeholder_not_starts_with?: Maybe<String>;
  placeholder_ends_with?: Maybe<String>;
  placeholder_not_ends_with?: Maybe<String>;
  AND?: Maybe<TokenWhereInput[] | TokenWhereInput>;
}

export interface UserCreateWithoutLanderInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface NavigationUpdateInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutNavigationInput>;
  data?: Maybe<Json>;
  lock?: Maybe<NavigationUpdatelockInput>;
}

export interface DefaultParamUpdateWithWhereUniqueNestedInput {
  where: DefaultParamWhereUniqueInput;
  data: DefaultParamUpdateDataInput;
}

export interface UserCreateOneWithoutNavigationInput {
  create?: Maybe<UserCreateWithoutNavigationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DefaultParamUpdateDataInput {
  head?: Maybe<String>;
  default?: Maybe<String>;
  tokens?: Maybe<DefaultParamUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface NavigationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  userUnique: String;
  user: UserCreateOneWithoutNavigationInput;
  data: Json;
  lock?: Maybe<NavigationCreatelockInput>;
}

export interface DefaultParamUpdatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface MainDomainUpdateInput {
  userUnique?: Maybe<String>;
  domain?: Maybe<DomainUpdateOneRequiredWithoutMainDomainInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutMainDomainInput>;
}

export interface DefaultParamUpsertWithWhereUniqueNestedInput {
  where: DefaultParamWhereUniqueInput;
  update: DefaultParamUpdateDataInput;
  create: DefaultParamCreateInput;
}

export interface MainDomainCreateInput {
  id?: Maybe<ID_Input>;
  userUnique: String;
  domain: DomainCreateOneWithoutMainDomainInput;
  user: UserCreateOneWithoutMainDomainInput;
}

export interface DefaultParamScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  head?: Maybe<String>;
  head_not?: Maybe<String>;
  head_in?: Maybe<String[] | String>;
  head_not_in?: Maybe<String[] | String>;
  head_lt?: Maybe<String>;
  head_lte?: Maybe<String>;
  head_gt?: Maybe<String>;
  head_gte?: Maybe<String>;
  head_contains?: Maybe<String>;
  head_not_contains?: Maybe<String>;
  head_starts_with?: Maybe<String>;
  head_not_starts_with?: Maybe<String>;
  head_ends_with?: Maybe<String>;
  head_not_ends_with?: Maybe<String>;
  default?: Maybe<String>;
  default_not?: Maybe<String>;
  default_in?: Maybe<String[] | String>;
  default_not_in?: Maybe<String[] | String>;
  default_lt?: Maybe<String>;
  default_lte?: Maybe<String>;
  default_gt?: Maybe<String>;
  default_gte?: Maybe<String>;
  default_contains?: Maybe<String>;
  default_not_contains?: Maybe<String>;
  default_starts_with?: Maybe<String>;
  default_not_starts_with?: Maybe<String>;
  default_ends_with?: Maybe<String>;
  default_not_ends_with?: Maybe<String>;
  track?: Maybe<Boolean>;
  track_not?: Maybe<Boolean>;
  AND?: Maybe<DefaultParamScalarWhereInput[] | DefaultParamScalarWhereInput>;
  OR?: Maybe<DefaultParamScalarWhereInput[] | DefaultParamScalarWhereInput>;
  NOT?: Maybe<DefaultParamScalarWhereInput[] | DefaultParamScalarWhereInput>;
}

export interface UserUpsertWithoutLanderInput {
  update: UserUpdateWithoutLanderDataInput;
  create: UserCreateWithoutLanderInput;
}

export interface DefaultParamUpdateManyWithWhereNestedInput {
  where: DefaultParamScalarWhereInput;
  data: DefaultParamUpdateManyDataInput;
}

export interface CampNavRowsUpdateInput {
  percent?: Maybe<Int>;
  landerName?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  traffic_some?: Maybe<TrafficWhereInput>;
  lander_some?: Maybe<LanderWhereInput>;
  offer_some?: Maybe<OfferWhereInput>;
  navigation_some?: Maybe<NavigationWhereInput>;
  campaign_some?: Maybe<CampaignWhereInput>;
  domain_some?: Maybe<DomainWhereInput>;
  mainDomain?: Maybe<MainDomainWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpdateOneRequiredWithoutLanderInput {
  create?: Maybe<UserCreateWithoutLanderInput>;
  update?: Maybe<UserUpdateWithoutLanderDataInput>;
  upsert?: Maybe<UserUpsertWithoutLanderInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OfferWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<OfferWhereInput[] | OfferWhereInput>;
}

export interface CampaignCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  refresh: String;
  totalPercent: Int;
  url?: Maybe<String>;
  traffic: String;
  landerRow?: Maybe<CampNavRowsCreateManyInput>;
  userUnique: String;
  user: UserCreateOneWithoutCampaignInput;
}

export interface CampaignWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  refresh?: Maybe<String>;
  refresh_not?: Maybe<String>;
  refresh_in?: Maybe<String[] | String>;
  refresh_not_in?: Maybe<String[] | String>;
  refresh_lt?: Maybe<String>;
  refresh_lte?: Maybe<String>;
  refresh_gt?: Maybe<String>;
  refresh_gte?: Maybe<String>;
  refresh_contains?: Maybe<String>;
  refresh_not_contains?: Maybe<String>;
  refresh_starts_with?: Maybe<String>;
  refresh_not_starts_with?: Maybe<String>;
  refresh_ends_with?: Maybe<String>;
  refresh_not_ends_with?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  totalPercent_not?: Maybe<Int>;
  totalPercent_in?: Maybe<Int[] | Int>;
  totalPercent_not_in?: Maybe<Int[] | Int>;
  totalPercent_lt?: Maybe<Int>;
  totalPercent_lte?: Maybe<Int>;
  totalPercent_gt?: Maybe<Int>;
  totalPercent_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  traffic?: Maybe<String>;
  traffic_not?: Maybe<String>;
  traffic_in?: Maybe<String[] | String>;
  traffic_not_in?: Maybe<String[] | String>;
  traffic_lt?: Maybe<String>;
  traffic_lte?: Maybe<String>;
  traffic_gt?: Maybe<String>;
  traffic_gte?: Maybe<String>;
  traffic_contains?: Maybe<String>;
  traffic_not_contains?: Maybe<String>;
  traffic_starts_with?: Maybe<String>;
  traffic_not_starts_with?: Maybe<String>;
  traffic_ends_with?: Maybe<String>;
  traffic_not_ends_with?: Maybe<String>;
  landerRow_some?: Maybe<CampNavRowsWhereInput>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CampaignWhereInput[] | CampaignWhereInput>;
}

export interface UserCreateOneWithoutCampaignInput {
  create?: Maybe<UserCreateWithoutCampaignInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface MainDomainWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  domain?: Maybe<DomainWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<MainDomainWhereInput[] | MainDomainWhereInput>;
}

export interface TrafficCreateManyWithoutUserInput {
  create?: Maybe<
    TrafficCreateWithoutUserInput[] | TrafficCreateWithoutUserInput
  >;
  connect?: Maybe<TrafficWhereUniqueInput[] | TrafficWhereUniqueInput>;
}

export interface DefaultParamWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  head?: Maybe<String>;
  head_not?: Maybe<String>;
  head_in?: Maybe<String[] | String>;
  head_not_in?: Maybe<String[] | String>;
  head_lt?: Maybe<String>;
  head_lte?: Maybe<String>;
  head_gt?: Maybe<String>;
  head_gte?: Maybe<String>;
  head_contains?: Maybe<String>;
  head_not_contains?: Maybe<String>;
  head_starts_with?: Maybe<String>;
  head_not_starts_with?: Maybe<String>;
  head_ends_with?: Maybe<String>;
  head_not_ends_with?: Maybe<String>;
  default?: Maybe<String>;
  default_not?: Maybe<String>;
  default_in?: Maybe<String[] | String>;
  default_not_in?: Maybe<String[] | String>;
  default_lt?: Maybe<String>;
  default_lte?: Maybe<String>;
  default_gt?: Maybe<String>;
  default_gte?: Maybe<String>;
  default_contains?: Maybe<String>;
  default_not_contains?: Maybe<String>;
  default_starts_with?: Maybe<String>;
  default_not_starts_with?: Maybe<String>;
  default_ends_with?: Maybe<String>;
  default_not_ends_with?: Maybe<String>;
  track?: Maybe<Boolean>;
  track_not?: Maybe<Boolean>;
  AND?: Maybe<DefaultParamWhereInput[] | DefaultParamWhereInput>;
}

export interface ParameterCreateManyInput {
  create?: Maybe<ParameterCreateInput[] | ParameterCreateInput>;
  connect?: Maybe<ParameterWhereUniqueInput[] | ParameterWhereUniqueInput>;
}

export interface UserCreateOneWithoutLanderInput {
  create?: Maybe<UserCreateWithoutLanderInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ParameterCreatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface LanderUpdateManyWithoutUserInput {
  create?: Maybe<LanderCreateWithoutUserInput[] | LanderCreateWithoutUserInput>;
  delete?: Maybe<LanderWhereUniqueInput[] | LanderWhereUniqueInput>;
  connect?: Maybe<LanderWhereUniqueInput[] | LanderWhereUniqueInput>;
  set?: Maybe<LanderWhereUniqueInput[] | LanderWhereUniqueInput>;
  disconnect?: Maybe<LanderWhereUniqueInput[] | LanderWhereUniqueInput>;
  update?: Maybe<
    | LanderUpdateWithWhereUniqueWithoutUserInput[]
    | LanderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LanderUpsertWithWhereUniqueWithoutUserInput[]
    | LanderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LanderScalarWhereInput[] | LanderScalarWhereInput>;
  updateMany?: Maybe<
    | LanderUpdateManyWithWhereNestedInput[]
    | LanderUpdateManyWithWhereNestedInput
  >;
}

export interface DefaultParamCreateInput {
  id?: Maybe<ID_Input>;
  head?: Maybe<String>;
  default?: Maybe<String>;
  tokens?: Maybe<DefaultParamCreatetokensInput>;
  track: Boolean;
}

export interface LanderUpdateWithWhereUniqueWithoutUserInput {
  where: LanderWhereUniqueInput;
  data: LanderUpdateWithoutUserDataInput;
}

export interface TrafficCreatelockInput {
  set?: Maybe<String[] | String>;
}

export interface LanderUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<LanderUpdatelockInput>;
}

export interface LanderCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  userUnique: String;
  lock?: Maybe<LanderCreatelockInput>;
}

export interface LanderUpdatelockInput {
  set?: Maybe<String[] | String>;
}

export interface OfferCreateManyWithoutUserInput {
  create?: Maybe<OfferCreateWithoutUserInput[] | OfferCreateWithoutUserInput>;
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>;
}

export interface LanderUpsertWithWhereUniqueWithoutUserInput {
  where: LanderWhereUniqueInput;
  update: LanderUpdateWithoutUserDataInput;
  create: LanderCreateWithoutUserInput;
}

export interface OfferCreatelockInput {
  set?: Maybe<String[] | String>;
}

export interface LanderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<LanderScalarWhereInput[] | LanderScalarWhereInput>;
  OR?: Maybe<LanderScalarWhereInput[] | LanderScalarWhereInput>;
  NOT?: Maybe<LanderScalarWhereInput[] | LanderScalarWhereInput>;
}

export interface NavigationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  userUnique: String;
  data: Json;
  lock?: Maybe<NavigationCreatelockInput>;
}

export interface LanderUpdateManyWithWhereNestedInput {
  where: LanderScalarWhereInput;
  data: LanderUpdateManyDataInput;
}

export interface DomainCreateManyWithoutUserInput {
  create?: Maybe<DomainCreateWithoutUserInput[] | DomainCreateWithoutUserInput>;
  connect?: Maybe<DomainWhereUniqueInput[] | DomainWhereUniqueInput>;
}

export interface LanderUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<LanderUpdatelockInput>;
}

export interface MainDomainCreateOneWithoutDomainInput {
  create?: Maybe<MainDomainCreateWithoutDomainInput>;
  connect?: Maybe<MainDomainWhereUniqueInput>;
}

export interface OfferUpdateManyWithoutUserInput {
  create?: Maybe<OfferCreateWithoutUserInput[] | OfferCreateWithoutUserInput>;
  delete?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>;
  connect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>;
  set?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>;
  disconnect?: Maybe<OfferWhereUniqueInput[] | OfferWhereUniqueInput>;
  update?: Maybe<
    | OfferUpdateWithWhereUniqueWithoutUserInput[]
    | OfferUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OfferUpsertWithWhereUniqueWithoutUserInput[]
    | OfferUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>;
  updateMany?: Maybe<
    OfferUpdateManyWithWhereNestedInput[] | OfferUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutMainDomainInput {
  create?: Maybe<UserCreateWithoutMainDomainInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface OfferUpdateWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput;
  data: OfferUpdateWithoutUserDataInput;
}

export interface CampaignCreateManyWithoutUserInput {
  create?: Maybe<
    CampaignCreateWithoutUserInput[] | CampaignCreateWithoutUserInput
  >;
  connect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
}

export interface OfferUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<OfferUpdatelockInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface OfferUpdatelockInput {
  set?: Maybe<String[] | String>;
}

export interface ParameterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ParameterWhereInput>;
  AND?: Maybe<
    ParameterSubscriptionWhereInput[] | ParameterSubscriptionWhereInput
  >;
}

export interface OfferUpsertWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput;
  update: OfferUpdateWithoutUserDataInput;
  create: OfferCreateWithoutUserInput;
}

export interface LanderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LanderWhereInput>;
  AND?: Maybe<LanderSubscriptionWhereInput[] | LanderSubscriptionWhereInput>;
}

export interface OfferScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>;
  OR?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>;
  NOT?: Maybe<OfferScalarWhereInput[] | OfferScalarWhereInput>;
}

export interface CampNavRowsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CampNavRowsWhereInput>;
  AND?: Maybe<
    CampNavRowsSubscriptionWhereInput[] | CampNavRowsSubscriptionWhereInput
  >;
}

export interface OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput;
  data: OfferUpdateManyDataInput;
}

export interface TrafficUpdateManyMutationInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<TrafficUpdatelockInput>;
}

export interface OfferUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<OfferUpdatelockInput>;
}

export interface UserUpdateOneRequiredWithoutTrafficInput {
  create?: Maybe<UserCreateWithoutTrafficInput>;
  update?: Maybe<UserUpdateWithoutTrafficDataInput>;
  upsert?: Maybe<UserUpsertWithoutTrafficInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NavigationUpdateManyWithoutUserInput {
  create?: Maybe<
    NavigationCreateWithoutUserInput[] | NavigationCreateWithoutUserInput
  >;
  delete?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  connect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  set?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  disconnect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
  update?: Maybe<
    | NavigationUpdateWithWhereUniqueWithoutUserInput[]
    | NavigationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NavigationUpsertWithWhereUniqueWithoutUserInput[]
    | NavigationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  updateMany?: Maybe<
    | NavigationUpdateManyWithWhereNestedInput[]
    | NavigationUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateOneWithoutTrafficInput {
  create?: Maybe<UserCreateWithoutTrafficInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NavigationUpdateWithWhereUniqueWithoutUserInput {
  where: NavigationWhereUniqueInput;
  data: NavigationUpdateWithoutUserDataInput;
}

export interface TokenUpdateInput {
  name?: Maybe<String>;
  parameter?: Maybe<String>;
  placeholder?: Maybe<String>;
}

export interface NavigationUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  data?: Maybe<Json>;
  lock?: Maybe<NavigationUpdatelockInput>;
}

export interface ParameterUpdateManyMutationInput {
  tokens?: Maybe<ParameterUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface NavigationUpdatelockInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpsertWithoutOfferInput {
  update: UserUpdateWithoutOfferDataInput;
  create: UserCreateWithoutOfferInput;
}

export interface NavigationUpsertWithWhereUniqueWithoutUserInput {
  where: NavigationWhereUniqueInput;
  update: NavigationUpdateWithoutUserDataInput;
  create: NavigationCreateWithoutUserInput;
}

export interface OfferUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutOfferInput>;
  lock?: Maybe<OfferUpdatelockInput>;
}

export interface NavigationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  OR?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
  NOT?: Maybe<NavigationScalarWhereInput[] | NavigationScalarWhereInput>;
}

export interface OfferCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  userUnique: String;
  user: UserCreateOneWithoutOfferInput;
  lock?: Maybe<OfferCreatelockInput>;
}

export interface NavigationUpdateManyWithWhereNestedInput {
  where: NavigationScalarWhereInput;
  data: NavigationUpdateManyDataInput;
}

export interface UserUpdateWithoutNavigationDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface NavigationUpdateManyDataInput {
  name?: Maybe<String>;
  userUnique?: Maybe<String>;
  data?: Maybe<Json>;
  lock?: Maybe<NavigationUpdatelockInput>;
}

export interface UserCreateWithoutNavigationInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface DomainUpdateManyWithoutUserInput {
  create?: Maybe<DomainCreateWithoutUserInput[] | DomainCreateWithoutUserInput>;
  delete?: Maybe<DomainWhereUniqueInput[] | DomainWhereUniqueInput>;
  connect?: Maybe<DomainWhereUniqueInput[] | DomainWhereUniqueInput>;
  set?: Maybe<DomainWhereUniqueInput[] | DomainWhereUniqueInput>;
  disconnect?: Maybe<DomainWhereUniqueInput[] | DomainWhereUniqueInput>;
  update?: Maybe<
    | DomainUpdateWithWhereUniqueWithoutUserInput[]
    | DomainUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | DomainUpsertWithWhereUniqueWithoutUserInput[]
    | DomainUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<DomainScalarWhereInput[] | DomainScalarWhereInput>;
  updateMany?: Maybe<
    | DomainUpdateManyWithWhereNestedInput[]
    | DomainUpdateManyWithWhereNestedInput
  >;
}

export interface MainDomainUpdateManyMutationInput {
  userUnique?: Maybe<String>;
}

export interface DomainUpdateWithWhereUniqueWithoutUserInput {
  where: DomainWhereUniqueInput;
  data: DomainUpdateWithoutUserDataInput;
}

export interface LanderUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<LanderUpdatelockInput>;
}

export interface DomainUpdateWithoutUserDataInput {
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  MainDomain?: Maybe<MainDomainUpdateOneWithoutDomainInput>;
}

export interface CampNavRowsCreateInput {
  id?: Maybe<ID_Input>;
  percent: Int;
  landerName: String;
}

export interface MainDomainUpdateOneWithoutDomainInput {
  create?: Maybe<MainDomainCreateWithoutDomainInput>;
  update?: Maybe<MainDomainUpdateWithoutDomainDataInput>;
  upsert?: Maybe<MainDomainUpsertWithoutDomainInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MainDomainWhereUniqueInput>;
}

export interface LanderUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutLanderInput>;
  lock?: Maybe<LanderUpdatelockInput>;
}

export interface MainDomainUpdateWithoutDomainDataInput {
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutMainDomainInput>;
}

export interface UserCreateWithoutCampaignInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainCreateOneWithoutUserInput>;
}

export interface UserUpdateOneRequiredWithoutMainDomainInput {
  create?: Maybe<UserCreateWithoutMainDomainInput>;
  update?: Maybe<UserUpdateWithoutMainDomainDataInput>;
  upsert?: Maybe<UserUpsertWithoutMainDomainInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ParameterCreateInput {
  id?: Maybe<ID_Input>;
  tokens?: Maybe<ParameterCreatetokensInput>;
  track: Boolean;
}

export interface UserUpdateWithoutMainDomainDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
}

export interface DefaultParamCreatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface CampaignUpdateManyWithoutUserInput {
  create?: Maybe<
    CampaignCreateWithoutUserInput[] | CampaignCreateWithoutUserInput
  >;
  delete?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  connect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  set?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  disconnect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  update?: Maybe<
    | CampaignUpdateWithWhereUniqueWithoutUserInput[]
    | CampaignUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CampaignUpsertWithWhereUniqueWithoutUserInput[]
    | CampaignUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  updateMany?: Maybe<
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput
  >;
}

export interface LanderCreatelockInput {
  set?: Maybe<String[] | String>;
}

export interface CampaignUpdateWithWhereUniqueWithoutUserInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutUserDataInput;
}

export interface NavigationCreateManyWithoutUserInput {
  create?: Maybe<
    NavigationCreateWithoutUserInput[] | NavigationCreateWithoutUserInput
  >;
  connect?: Maybe<NavigationWhereUniqueInput[] | NavigationWhereUniqueInput>;
}

export interface CampaignUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  refresh?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  url?: Maybe<String>;
  traffic?: Maybe<String>;
  landerRow?: Maybe<CampNavRowsUpdateManyInput>;
  userUnique?: Maybe<String>;
}

export interface DomainCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  url: String;
  userUnique: String;
  MainDomain?: Maybe<MainDomainCreateOneWithoutDomainInput>;
}

export interface CampaignUpsertWithWhereUniqueWithoutUserInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutUserDataInput;
  create: CampaignCreateWithoutUserInput;
}

export interface UserCreateWithoutMainDomainInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  traffic?: Maybe<TrafficCreateManyWithoutUserInput>;
  lander?: Maybe<LanderCreateManyWithoutUserInput>;
  offer?: Maybe<OfferCreateManyWithoutUserInput>;
  navigation?: Maybe<NavigationCreateManyWithoutUserInput>;
  campaign?: Maybe<CampaignCreateManyWithoutUserInput>;
  domain?: Maybe<DomainCreateManyWithoutUserInput>;
}

export interface CampaignScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  refresh?: Maybe<String>;
  refresh_not?: Maybe<String>;
  refresh_in?: Maybe<String[] | String>;
  refresh_not_in?: Maybe<String[] | String>;
  refresh_lt?: Maybe<String>;
  refresh_lte?: Maybe<String>;
  refresh_gt?: Maybe<String>;
  refresh_gte?: Maybe<String>;
  refresh_contains?: Maybe<String>;
  refresh_not_contains?: Maybe<String>;
  refresh_starts_with?: Maybe<String>;
  refresh_not_starts_with?: Maybe<String>;
  refresh_ends_with?: Maybe<String>;
  refresh_not_ends_with?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  totalPercent_not?: Maybe<Int>;
  totalPercent_in?: Maybe<Int[] | Int>;
  totalPercent_not_in?: Maybe<Int[] | Int>;
  totalPercent_lt?: Maybe<Int>;
  totalPercent_lte?: Maybe<Int>;
  totalPercent_gt?: Maybe<Int>;
  totalPercent_gte?: Maybe<Int>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  traffic?: Maybe<String>;
  traffic_not?: Maybe<String>;
  traffic_in?: Maybe<String[] | String>;
  traffic_not_in?: Maybe<String[] | String>;
  traffic_lt?: Maybe<String>;
  traffic_lte?: Maybe<String>;
  traffic_gt?: Maybe<String>;
  traffic_gte?: Maybe<String>;
  traffic_contains?: Maybe<String>;
  traffic_not_contains?: Maybe<String>;
  traffic_starts_with?: Maybe<String>;
  traffic_not_starts_with?: Maybe<String>;
  traffic_ends_with?: Maybe<String>;
  traffic_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  OR?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  NOT?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
}

export type CampaignWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput;
  data: CampaignUpdateManyDataInput;
}

export interface DefaultParamSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DefaultParamWhereInput>;
  AND?: Maybe<
    DefaultParamSubscriptionWhereInput[] | DefaultParamSubscriptionWhereInput
  >;
}

export interface CampaignUpdateManyDataInput {
  name?: Maybe<String>;
  refresh?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  url?: Maybe<String>;
  traffic?: Maybe<String>;
  userUnique?: Maybe<String>;
}

export type DefaultParamWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutMainDomainInput {
  update: UserUpdateWithoutMainDomainDataInput;
  create: UserCreateWithoutMainDomainInput;
}

export type LanderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface MainDomainUpsertWithoutDomainInput {
  update: MainDomainUpdateWithoutDomainDataInput;
  create: MainDomainCreateWithoutDomainInput;
}

export interface OfferUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  lock?: Maybe<OfferUpdatelockInput>;
}

export interface DomainUpsertWithWhereUniqueWithoutUserInput {
  where: DomainWhereUniqueInput;
  update: DomainUpdateWithoutUserDataInput;
  create: DomainCreateWithoutUserInput;
}

export interface UserCreateOneWithoutOfferInput {
  create?: Maybe<UserCreateWithoutOfferInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DomainScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  userUnique?: Maybe<String>;
  userUnique_not?: Maybe<String>;
  userUnique_in?: Maybe<String[] | String>;
  userUnique_not_in?: Maybe<String[] | String>;
  userUnique_lt?: Maybe<String>;
  userUnique_lte?: Maybe<String>;
  userUnique_gt?: Maybe<String>;
  userUnique_gte?: Maybe<String>;
  userUnique_contains?: Maybe<String>;
  userUnique_not_contains?: Maybe<String>;
  userUnique_starts_with?: Maybe<String>;
  userUnique_not_starts_with?: Maybe<String>;
  userUnique_ends_with?: Maybe<String>;
  userUnique_not_ends_with?: Maybe<String>;
  AND?: Maybe<DomainScalarWhereInput[] | DomainScalarWhereInput>;
  OR?: Maybe<DomainScalarWhereInput[] | DomainScalarWhereInput>;
  NOT?: Maybe<DomainScalarWhereInput[] | DomainScalarWhereInput>;
}

export interface UserUpdateOneRequiredWithoutNavigationInput {
  create?: Maybe<UserCreateWithoutNavigationInput>;
  update?: Maybe<UserUpdateWithoutNavigationDataInput>;
  upsert?: Maybe<UserUpsertWithoutNavigationInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface DomainUpdateManyWithWhereNestedInput {
  where: DomainScalarWhereInput;
  data: DomainUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface DomainUpdateManyDataInput {
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
}

export interface CampNavRowsUpdateManyMutationInput {
  percent?: Maybe<Int>;
  landerName?: Maybe<String>;
}

export interface MainDomainUpdateOneWithoutUserInput {
  create?: Maybe<MainDomainCreateWithoutUserInput>;
  update?: Maybe<MainDomainUpdateWithoutUserDataInput>;
  upsert?: Maybe<MainDomainUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MainDomainWhereUniqueInput>;
}

export interface TrafficCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  userUnique: String;
  data?: Maybe<ParameterCreateManyInput>;
  default_data?: Maybe<DefaultParamCreateManyInput>;
  lock?: Maybe<TrafficCreatelockInput>;
}

export interface MainDomainUpdateWithoutUserDataInput {
  userUnique?: Maybe<String>;
  domain?: Maybe<DomainUpdateOneRequiredWithoutMainDomainInput>;
}

export interface LanderCreateManyWithoutUserInput {
  create?: Maybe<LanderCreateWithoutUserInput[] | LanderCreateWithoutUserInput>;
  connect?: Maybe<LanderWhereUniqueInput[] | LanderWhereUniqueInput>;
}

export interface DomainUpdateOneRequiredWithoutMainDomainInput {
  create?: Maybe<DomainCreateWithoutMainDomainInput>;
  update?: Maybe<DomainUpdateWithoutMainDomainDataInput>;
  upsert?: Maybe<DomainUpsertWithoutMainDomainInput>;
  connect?: Maybe<DomainWhereUniqueInput>;
}

export interface NavigationCreatelockInput {
  set?: Maybe<String[] | String>;
}

export interface DomainUpdateWithoutMainDomainDataInput {
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDomainInput>;
}

export interface CampaignCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  refresh: String;
  totalPercent: Int;
  url?: Maybe<String>;
  traffic: String;
  landerRow?: Maybe<CampNavRowsCreateManyInput>;
  userUnique: String;
}

export interface UserUpdateOneRequiredWithoutDomainInput {
  create?: Maybe<UserCreateWithoutDomainInput>;
  update?: Maybe<UserUpdateWithoutDomainDataInput>;
  upsert?: Maybe<UserUpsertWithoutDomainInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface UserUpdateWithoutDomainDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  lander?: Maybe<LanderUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export type MainDomainWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface UserUpsertWithoutDomainInput {
  update: UserUpdateWithoutDomainDataInput;
  create: UserCreateWithoutDomainInput;
}

export interface UserUpsertWithoutNavigationInput {
  update: UserUpdateWithoutNavigationDataInput;
  create: UserCreateWithoutNavigationInput;
}

export interface DomainUpsertWithoutMainDomainInput {
  update: DomainUpdateWithoutMainDomainDataInput;
  create: DomainCreateWithoutMainDomainInput;
}

export interface UserUpdateWithoutLanderDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  traffic?: Maybe<TrafficUpdateManyWithoutUserInput>;
  offer?: Maybe<OfferUpdateManyWithoutUserInput>;
  navigation?: Maybe<NavigationUpdateManyWithoutUserInput>;
  campaign?: Maybe<CampaignUpdateManyWithoutUserInput>;
  domain?: Maybe<DomainUpdateManyWithoutUserInput>;
  mainDomain?: Maybe<MainDomainUpdateOneWithoutUserInput>;
}

export interface MainDomainUpsertWithoutUserInput {
  update: MainDomainUpdateWithoutUserDataInput;
  create: MainDomainCreateWithoutUserInput;
}

export interface DefaultParamCreateManyInput {
  create?: Maybe<DefaultParamCreateInput[] | DefaultParamCreateInput>;
  connect?: Maybe<
    DefaultParamWhereUniqueInput[] | DefaultParamWhereUniqueInput
  >;
}

export interface UserUpsertWithoutCampaignInput {
  update: UserUpdateWithoutCampaignDataInput;
  create: UserCreateWithoutCampaignInput;
}

export interface MainDomainCreateWithoutDomainInput {
  id?: Maybe<ID_Input>;
  userUnique: String;
  user: UserCreateOneWithoutMainDomainInput;
}

export interface CampaignUpdateManyMutationInput {
  name?: Maybe<String>;
  refresh?: Maybe<String>;
  totalPercent?: Maybe<Int>;
  url?: Maybe<String>;
  traffic?: Maybe<String>;
  userUnique?: Maybe<String>;
}

export type DomainWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
}>;

export interface DefaultParamUpdateInput {
  head?: Maybe<String>;
  default?: Maybe<String>;
  tokens?: Maybe<DefaultParamUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export type TrafficWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userUnique?: Maybe<String>;
}>;

export interface DomainUpdateManyMutationInput {
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
}

export interface DomainUpdateInput {
  url?: Maybe<String>;
  userUnique?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutDomainInput>;
  MainDomain?: Maybe<MainDomainUpdateOneWithoutDomainInput>;
}

export interface DomainCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  userUnique: String;
  user: UserCreateOneWithoutDomainInput;
  MainDomain?: Maybe<MainDomainCreateOneWithoutDomainInput>;
}

export interface DefaultParamUpdateManyMutationInput {
  head?: Maybe<String>;
  default?: Maybe<String>;
  tokens?: Maybe<DefaultParamUpdatetokensInput>;
  track?: Maybe<Boolean>;
}

export interface CampNavRowsCreateManyInput {
  create?: Maybe<CampNavRowsCreateInput[] | CampNavRowsCreateInput>;
  connect?: Maybe<CampNavRowsWhereUniqueInput[] | CampNavRowsWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutOfferInput {
  create?: Maybe<UserCreateWithoutOfferInput>;
  update?: Maybe<UserUpdateWithoutOfferDataInput>;
  upsert?: Maybe<UserUpsertWithoutOfferInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NavigationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NavigationWhereInput>;
  AND?: Maybe<
    NavigationSubscriptionWhereInput[] | NavigationSubscriptionWhereInput
  >;
}

export interface OfferCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  url: String;
  userUnique: String;
  lock?: Maybe<OfferCreatelockInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface CampaignConnection {
  pageInfo: PageInfo;
  edges: CampaignEdge[];
}

export interface CampaignConnectionPromise
  extends Promise<CampaignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampaignEdge>>() => T;
  aggregate: <T = AggregateCampaignPromise>() => T;
}

export interface CampaignConnectionSubscription
  extends Promise<AsyncIterator<CampaignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampaignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampaignSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  traffic: <T = FragmentableArray<Traffic>>(args?: {
    where?: TrafficWhereInput;
    orderBy?: TrafficOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lander: <T = FragmentableArray<Lander>>(args?: {
    where?: LanderWhereInput;
    orderBy?: LanderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  offer: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigation: <T = FragmentableArray<Navigation>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  campaign: <T = FragmentableArray<Campaign>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  domain: <T = FragmentableArray<Domain>>(args?: {
    where?: DomainWhereInput;
    orderBy?: DomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainDomain: <T = MainDomainPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  traffic: <T = Promise<AsyncIterator<TrafficSubscription>>>(args?: {
    where?: TrafficWhereInput;
    orderBy?: TrafficOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lander: <T = Promise<AsyncIterator<LanderSubscription>>>(args?: {
    where?: LanderWhereInput;
    orderBy?: LanderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  offer: <T = Promise<AsyncIterator<OfferSubscription>>>(args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigation: <T = Promise<AsyncIterator<NavigationSubscription>>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  campaign: <T = Promise<AsyncIterator<CampaignSubscription>>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  domain: <T = Promise<AsyncIterator<DomainSubscription>>>(args?: {
    where?: DomainWhereInput;
    orderBy?: DomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainDomain: <T = MainDomainSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  traffic: <T = FragmentableArray<Traffic>>(args?: {
    where?: TrafficWhereInput;
    orderBy?: TrafficOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lander: <T = FragmentableArray<Lander>>(args?: {
    where?: LanderWhereInput;
    orderBy?: LanderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  offer: <T = FragmentableArray<Offer>>(args?: {
    where?: OfferWhereInput;
    orderBy?: OfferOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  navigation: <T = FragmentableArray<Navigation>>(args?: {
    where?: NavigationWhereInput;
    orderBy?: NavigationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  campaign: <T = FragmentableArray<Campaign>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  domain: <T = FragmentableArray<Domain>>(args?: {
    where?: DomainWhereInput;
    orderBy?: DomainOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  mainDomain: <T = MainDomainPromise>() => T;
}

export interface MainDomain {
  id: ID_Output;
  userUnique: String;
}

export interface MainDomainPromise extends Promise<MainDomain>, Fragmentable {
  id: () => Promise<ID_Output>;
  userUnique: () => Promise<String>;
  domain: <T = DomainPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface MainDomainSubscription
  extends Promise<AsyncIterator<MainDomain>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  domain: <T = DomainSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface MainDomainNullablePromise
  extends Promise<MainDomain | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userUnique: () => Promise<String>;
  domain: <T = DomainPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface Traffic {
  id: ID_Output;
  name: String;
  userUnique: String;
  lock: String[];
}

export interface TrafficPromise extends Promise<Traffic>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  data: <T = FragmentableArray<Parameter>>(args?: {
    where?: ParameterWhereInput;
    orderBy?: ParameterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  default_data: <T = FragmentableArray<DefaultParam>>(args?: {
    where?: DefaultParamWhereInput;
    orderBy?: DefaultParamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lock: () => Promise<String[]>;
}

export interface TrafficSubscription
  extends Promise<AsyncIterator<Traffic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  data: <T = Promise<AsyncIterator<ParameterSubscription>>>(args?: {
    where?: ParameterWhereInput;
    orderBy?: ParameterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  default_data: <T = Promise<AsyncIterator<DefaultParamSubscription>>>(args?: {
    where?: DefaultParamWhereInput;
    orderBy?: DefaultParamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface TrafficNullablePromise
  extends Promise<Traffic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  data: <T = FragmentableArray<Parameter>>(args?: {
    where?: ParameterWhereInput;
    orderBy?: ParameterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  default_data: <T = FragmentableArray<DefaultParam>>(args?: {
    where?: DefaultParamWhereInput;
    orderBy?: DefaultParamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lock: () => Promise<String[]>;
}

export interface Domain {
  id: ID_Output;
  url: String;
  userUnique: String;
}

export interface DomainPromise extends Promise<Domain>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  MainDomain: <T = MainDomainPromise>() => T;
}

export interface DomainSubscription
  extends Promise<AsyncIterator<Domain>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  MainDomain: <T = MainDomainSubscription>() => T;
}

export interface DomainNullablePromise
  extends Promise<Domain | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  MainDomain: <T = MainDomainPromise>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampNavRowsConnection {
  pageInfo: PageInfo;
  edges: CampNavRowsEdge[];
}

export interface CampNavRowsConnectionPromise
  extends Promise<CampNavRowsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampNavRowsEdge>>() => T;
  aggregate: <T = AggregateCampNavRowsPromise>() => T;
}

export interface CampNavRowsConnectionSubscription
  extends Promise<AsyncIterator<CampNavRowsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampNavRowsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampNavRowsSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CampNavRows {
  id: ID_Output;
  percent: Int;
  landerName: String;
}

export interface CampNavRowsPromise extends Promise<CampNavRows>, Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  landerName: () => Promise<String>;
}

export interface CampNavRowsSubscription
  extends Promise<AsyncIterator<CampNavRows>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  percent: () => Promise<AsyncIterator<Int>>;
  landerName: () => Promise<AsyncIterator<String>>;
}

export interface CampNavRowsNullablePromise
  extends Promise<CampNavRows | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  landerName: () => Promise<String>;
}

export interface AggregateTraffic {
  count: Int;
}

export interface AggregateTrafficPromise
  extends Promise<AggregateTraffic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrafficSubscription
  extends Promise<AsyncIterator<AggregateTraffic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampNavRowsSubscriptionPayload {
  mutation: MutationType;
  node: CampNavRows;
  updatedFields: String[];
  previousValues: CampNavRowsPreviousValues;
}

export interface CampNavRowsSubscriptionPayloadPromise
  extends Promise<CampNavRowsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampNavRowsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampNavRowsPreviousValuesPromise>() => T;
}

export interface CampNavRowsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampNavRowsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampNavRowsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampNavRowsPreviousValuesSubscription>() => T;
}

export interface TrafficConnection {
  pageInfo: PageInfo;
  edges: TrafficEdge[];
}

export interface TrafficConnectionPromise
  extends Promise<TrafficConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrafficEdge>>() => T;
  aggregate: <T = AggregateTrafficPromise>() => T;
}

export interface TrafficConnectionSubscription
  extends Promise<AsyncIterator<TrafficConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrafficEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrafficSubscription>() => T;
}

export interface CampNavRowsPreviousValues {
  id: ID_Output;
  percent: Int;
  landerName: String;
}

export interface CampNavRowsPreviousValuesPromise
  extends Promise<CampNavRowsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  percent: () => Promise<Int>;
  landerName: () => Promise<String>;
}

export interface CampNavRowsPreviousValuesSubscription
  extends Promise<AsyncIterator<CampNavRowsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  percent: () => Promise<AsyncIterator<Int>>;
  landerName: () => Promise<AsyncIterator<String>>;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Parameter {
  id: ID_Output;
  tokens: String[];
  track: Boolean;
}

export interface ParameterPromise extends Promise<Parameter>, Fragmentable {
  id: () => Promise<ID_Output>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface ParameterSubscription
  extends Promise<AsyncIterator<Parameter>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
  track: () => Promise<AsyncIterator<Boolean>>;
}

export interface ParameterNullablePromise
  extends Promise<Parameter | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Token {
  id: ID_Output;
  name: String;
  parameter: String;
  placeholder: String;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parameter: () => Promise<String>;
  placeholder: () => Promise<String>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  parameter: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
}

export interface TokenNullablePromise
  extends Promise<Token | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parameter: () => Promise<String>;
  placeholder: () => Promise<String>;
}

export interface ParameterEdge {
  node: Parameter;
  cursor: String;
}

export interface ParameterEdgePromise
  extends Promise<ParameterEdge>,
    Fragmentable {
  node: <T = ParameterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ParameterEdgeSubscription
  extends Promise<AsyncIterator<ParameterEdge>>,
    Fragmentable {
  node: <T = ParameterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CampaignSubscriptionPayload {
  mutation: MutationType;
  node: Campaign;
  updatedFields: String[];
  previousValues: CampaignPreviousValues;
}

export interface CampaignSubscriptionPayloadPromise
  extends Promise<CampaignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampaignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampaignPreviousValuesPromise>() => T;
}

export interface CampaignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampaignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampaignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampaignPreviousValuesSubscription>() => T;
}

export interface AggregateOffer {
  count: Int;
}

export interface AggregateOfferPromise
  extends Promise<AggregateOffer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOfferSubscription
  extends Promise<AsyncIterator<AggregateOffer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampaignPreviousValues {
  id: ID_Output;
  name: String;
  refresh: String;
  totalPercent: Int;
  url?: String;
  traffic: String;
  userUnique: String;
}

export interface CampaignPreviousValuesPromise
  extends Promise<CampaignPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  refresh: () => Promise<String>;
  totalPercent: () => Promise<Int>;
  url: () => Promise<String>;
  traffic: () => Promise<String>;
  userUnique: () => Promise<String>;
}

export interface CampaignPreviousValuesSubscription
  extends Promise<AsyncIterator<CampaignPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  refresh: () => Promise<AsyncIterator<String>>;
  totalPercent: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
  traffic: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
}

export interface OfferConnection {
  pageInfo: PageInfo;
  edges: OfferEdge[];
}

export interface OfferConnectionPromise
  extends Promise<OfferConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OfferEdge>>() => T;
  aggregate: <T = AggregateOfferPromise>() => T;
}

export interface OfferConnectionSubscription
  extends Promise<AsyncIterator<OfferConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OfferEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOfferSubscription>() => T;
}

export interface TrafficPreviousValues {
  id: ID_Output;
  name: String;
  userUnique: String;
  lock: String[];
}

export interface TrafficPreviousValuesPromise
  extends Promise<TrafficPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  lock: () => Promise<String[]>;
}

export interface TrafficPreviousValuesSubscription
  extends Promise<AsyncIterator<TrafficPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface NavigationEdge {
  node: Navigation;
  cursor: String;
}

export interface NavigationEdgePromise
  extends Promise<NavigationEdge>,
    Fragmentable {
  node: <T = NavigationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NavigationEdgeSubscription
  extends Promise<AsyncIterator<NavigationEdge>>,
    Fragmentable {
  node: <T = NavigationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DefaultParamSubscriptionPayload {
  mutation: MutationType;
  node: DefaultParam;
  updatedFields: String[];
  previousValues: DefaultParamPreviousValues;
}

export interface DefaultParamSubscriptionPayloadPromise
  extends Promise<DefaultParamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DefaultParamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DefaultParamPreviousValuesPromise>() => T;
}

export interface DefaultParamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DefaultParamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DefaultParamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DefaultParamPreviousValuesSubscription>() => T;
}

export interface AggregateMainDomain {
  count: Int;
}

export interface AggregateMainDomainPromise
  extends Promise<AggregateMainDomain>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMainDomainSubscription
  extends Promise<AsyncIterator<AggregateMainDomain>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DefaultParamPreviousValues {
  id: ID_Output;
  head?: String;
  default?: String;
  tokens: String[];
  track: Boolean;
}

export interface DefaultParamPreviousValuesPromise
  extends Promise<DefaultParamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  head: () => Promise<String>;
  default: () => Promise<String>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface DefaultParamPreviousValuesSubscription
  extends Promise<AsyncIterator<DefaultParamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  head: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
  track: () => Promise<AsyncIterator<Boolean>>;
}

export interface MainDomainConnection {
  pageInfo: PageInfo;
  edges: MainDomainEdge[];
}

export interface MainDomainConnectionPromise
  extends Promise<MainDomainConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MainDomainEdge>>() => T;
  aggregate: <T = AggregateMainDomainPromise>() => T;
}

export interface MainDomainConnectionSubscription
  extends Promise<AsyncIterator<MainDomainConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MainDomainEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMainDomainSubscription>() => T;
}

export interface Navigation {
  id: ID_Output;
  name: String;
  userUnique: String;
  data: Json;
  lock: String[];
}

export interface NavigationPromise extends Promise<Navigation>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  data: () => Promise<Json>;
  lock: () => Promise<String[]>;
}

export interface NavigationSubscription
  extends Promise<AsyncIterator<Navigation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  data: () => Promise<AsyncIterator<Json>>;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface NavigationNullablePromise
  extends Promise<Navigation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  data: () => Promise<Json>;
  lock: () => Promise<String[]>;
}

export interface LanderEdge {
  node: Lander;
  cursor: String;
}

export interface LanderEdgePromise extends Promise<LanderEdge>, Fragmentable {
  node: <T = LanderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LanderEdgeSubscription
  extends Promise<AsyncIterator<LanderEdge>>,
    Fragmentable {
  node: <T = LanderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DomainSubscriptionPayload {
  mutation: MutationType;
  node: Domain;
  updatedFields: String[];
  previousValues: DomainPreviousValues;
}

export interface DomainSubscriptionPayloadPromise
  extends Promise<DomainSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DomainPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DomainPreviousValuesPromise>() => T;
}

export interface DomainSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DomainSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DomainSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DomainPreviousValuesSubscription>() => T;
}

export interface AggregateDomain {
  count: Int;
}

export interface AggregateDomainPromise
  extends Promise<AggregateDomain>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDomainSubscription
  extends Promise<AsyncIterator<AggregateDomain>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DomainPreviousValues {
  id: ID_Output;
  url: String;
  userUnique: String;
}

export interface DomainPreviousValuesPromise
  extends Promise<DomainPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
}

export interface DomainPreviousValuesSubscription
  extends Promise<AsyncIterator<DomainPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
}

export interface DomainConnection {
  pageInfo: PageInfo;
  edges: DomainEdge[];
}

export interface DomainConnectionPromise
  extends Promise<DomainConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DomainEdge>>() => T;
  aggregate: <T = AggregateDomainPromise>() => T;
}

export interface DomainConnectionSubscription
  extends Promise<AsyncIterator<DomainConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DomainEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDomainSubscription>() => T;
}

export interface TrafficSubscriptionPayload {
  mutation: MutationType;
  node: Traffic;
  updatedFields: String[];
  previousValues: TrafficPreviousValues;
}

export interface TrafficSubscriptionPayloadPromise
  extends Promise<TrafficSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrafficPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrafficPreviousValuesPromise>() => T;
}

export interface TrafficSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrafficSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrafficSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrafficPreviousValuesSubscription>() => T;
}

export interface DefaultParamEdge {
  node: DefaultParam;
  cursor: String;
}

export interface DefaultParamEdgePromise
  extends Promise<DefaultParamEdge>,
    Fragmentable {
  node: <T = DefaultParamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DefaultParamEdgeSubscription
  extends Promise<AsyncIterator<DefaultParamEdge>>,
    Fragmentable {
  node: <T = DefaultParamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LanderSubscriptionPayload {
  mutation: MutationType;
  node: Lander;
  updatedFields: String[];
  previousValues: LanderPreviousValues;
}

export interface LanderSubscriptionPayloadPromise
  extends Promise<LanderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LanderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LanderPreviousValuesPromise>() => T;
}

export interface LanderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LanderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LanderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LanderPreviousValuesSubscription>() => T;
}

export interface AggregateCampaign {
  count: Int;
}

export interface AggregateCampaignPromise
  extends Promise<AggregateCampaign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampaignSubscription
  extends Promise<AsyncIterator<AggregateCampaign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LanderPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  userUnique: String;
  lock: String[];
}

export interface LanderPreviousValuesPromise
  extends Promise<LanderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  lock: () => Promise<String[]>;
}

export interface LanderPreviousValuesSubscription
  extends Promise<AsyncIterator<LanderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Offer {
  id: ID_Output;
  name: String;
  url: String;
  userUnique: String;
  lock: String[];
}

export interface OfferPromise extends Promise<Offer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  lock: () => Promise<String[]>;
}

export interface OfferSubscription
  extends Promise<AsyncIterator<Offer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface OfferNullablePromise
  extends Promise<Offer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  lock: () => Promise<String[]>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MainDomainSubscriptionPayload {
  mutation: MutationType;
  node: MainDomain;
  updatedFields: String[];
  previousValues: MainDomainPreviousValues;
}

export interface MainDomainSubscriptionPayloadPromise
  extends Promise<MainDomainSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MainDomainPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MainDomainPreviousValuesPromise>() => T;
}

export interface MainDomainSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MainDomainSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MainDomainSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MainDomainPreviousValuesSubscription>() => T;
}

export interface TrafficEdge {
  node: Traffic;
  cursor: String;
}

export interface TrafficEdgePromise extends Promise<TrafficEdge>, Fragmentable {
  node: <T = TrafficPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrafficEdgeSubscription
  extends Promise<AsyncIterator<TrafficEdge>>,
    Fragmentable {
  node: <T = TrafficSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MainDomainPreviousValues {
  id: ID_Output;
  userUnique: String;
}

export interface MainDomainPreviousValuesPromise
  extends Promise<MainDomainPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userUnique: () => Promise<String>;
}

export interface MainDomainPreviousValuesSubscription
  extends Promise<AsyncIterator<MainDomainPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userUnique: () => Promise<AsyncIterator<String>>;
}

export interface ParameterConnection {
  pageInfo: PageInfo;
  edges: ParameterEdge[];
}

export interface ParameterConnectionPromise
  extends Promise<ParameterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ParameterEdge>>() => T;
  aggregate: <T = AggregateParameterPromise>() => T;
}

export interface ParameterConnectionSubscription
  extends Promise<AsyncIterator<ParameterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParameterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParameterSubscription>() => T;
}

export interface CampNavRowsEdge {
  node: CampNavRows;
  cursor: String;
}

export interface CampNavRowsEdgePromise
  extends Promise<CampNavRowsEdge>,
    Fragmentable {
  node: <T = CampNavRowsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampNavRowsEdgeSubscription
  extends Promise<AsyncIterator<CampNavRowsEdge>>,
    Fragmentable {
  node: <T = CampNavRowsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNavigation {
  count: Int;
}

export interface AggregateNavigationPromise
  extends Promise<AggregateNavigation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNavigationSubscription
  extends Promise<AsyncIterator<AggregateNavigation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NavigationSubscriptionPayload {
  mutation: MutationType;
  node: Navigation;
  updatedFields: String[];
  previousValues: NavigationPreviousValues;
}

export interface NavigationSubscriptionPayloadPromise
  extends Promise<NavigationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NavigationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NavigationPreviousValuesPromise>() => T;
}

export interface NavigationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NavigationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NavigationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NavigationPreviousValuesSubscription>() => T;
}

export interface MainDomainEdge {
  node: MainDomain;
  cursor: String;
}

export interface MainDomainEdgePromise
  extends Promise<MainDomainEdge>,
    Fragmentable {
  node: <T = MainDomainPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MainDomainEdgeSubscription
  extends Promise<AsyncIterator<MainDomainEdge>>,
    Fragmentable {
  node: <T = MainDomainSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NavigationPreviousValues {
  id: ID_Output;
  name: String;
  userUnique: String;
  data: Json;
  lock: String[];
}

export interface NavigationPreviousValuesPromise
  extends Promise<NavigationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  userUnique: () => Promise<String>;
  data: () => Promise<Json>;
  lock: () => Promise<String[]>;
}

export interface NavigationPreviousValuesSubscription
  extends Promise<AsyncIterator<NavigationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  data: () => Promise<AsyncIterator<Json>>;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface LanderConnection {
  pageInfo: PageInfo;
  edges: LanderEdge[];
}

export interface LanderConnectionPromise
  extends Promise<LanderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LanderEdge>>() => T;
  aggregate: <T = AggregateLanderPromise>() => T;
}

export interface LanderConnectionSubscription
  extends Promise<AsyncIterator<LanderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LanderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLanderSubscription>() => T;
}

export interface Lander {
  id: ID_Output;
  name: String;
  url: String;
  userUnique: String;
  lock: String[];
}

export interface LanderPromise extends Promise<Lander>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  lock: () => Promise<String[]>;
}

export interface LanderSubscription
  extends Promise<AsyncIterator<Lander>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface LanderNullablePromise
  extends Promise<Lander | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
  lock: () => Promise<String[]>;
}

export interface AggregateDefaultParam {
  count: Int;
}

export interface AggregateDefaultParamPromise
  extends Promise<AggregateDefaultParam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDefaultParamSubscription
  extends Promise<AsyncIterator<AggregateDefaultParam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OfferSubscriptionPayload {
  mutation: MutationType;
  node: Offer;
  updatedFields: String[];
  previousValues: OfferPreviousValues;
}

export interface OfferSubscriptionPayloadPromise
  extends Promise<OfferSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OfferPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OfferPreviousValuesPromise>() => T;
}

export interface OfferSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OfferSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OfferSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OfferPreviousValuesSubscription>() => T;
}

export interface CampaignEdge {
  node: Campaign;
  cursor: String;
}

export interface CampaignEdgePromise
  extends Promise<CampaignEdge>,
    Fragmentable {
  node: <T = CampaignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampaignEdgeSubscription
  extends Promise<AsyncIterator<CampaignEdge>>,
    Fragmentable {
  node: <T = CampaignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OfferPreviousValues {
  id: ID_Output;
  name: String;
  url: String;
  userUnique: String;
  lock: String[];
}

export interface OfferPreviousValuesPromise
  extends Promise<OfferPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  userUnique: () => Promise<String>;
  lock: () => Promise<String[]>;
}

export interface OfferPreviousValuesSubscription
  extends Promise<AsyncIterator<OfferPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  userUnique: () => Promise<AsyncIterator<String>>;
  lock: () => Promise<AsyncIterator<String[]>>;
}

export interface Campaign {
  id: ID_Output;
  name: String;
  refresh: String;
  totalPercent: Int;
  url?: String;
  traffic: String;
  userUnique: String;
}

export interface CampaignPromise extends Promise<Campaign>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  refresh: () => Promise<String>;
  totalPercent: () => Promise<Int>;
  url: () => Promise<String>;
  traffic: () => Promise<String>;
  landerRow: <T = FragmentableArray<CampNavRows>>(args?: {
    where?: CampNavRowsWhereInput;
    orderBy?: CampNavRowsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface CampaignSubscription
  extends Promise<AsyncIterator<Campaign>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  refresh: () => Promise<AsyncIterator<String>>;
  totalPercent: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
  traffic: () => Promise<AsyncIterator<String>>;
  landerRow: <T = Promise<AsyncIterator<CampNavRowsSubscription>>>(args?: {
    where?: CampNavRowsWhereInput;
    orderBy?: CampNavRowsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userUnique: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface CampaignNullablePromise
  extends Promise<Campaign | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  refresh: () => Promise<String>;
  totalPercent: () => Promise<Int>;
  url: () => Promise<String>;
  traffic: () => Promise<String>;
  landerRow: <T = FragmentableArray<CampNavRows>>(args?: {
    where?: CampNavRowsWhereInput;
    orderBy?: CampNavRowsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  userUnique: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface AggregateCampNavRows {
  count: Int;
}

export interface AggregateCampNavRowsPromise
  extends Promise<AggregateCampNavRows>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampNavRowsSubscription
  extends Promise<AsyncIterator<AggregateCampNavRows>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OfferEdge {
  node: Offer;
  cursor: String;
}

export interface OfferEdgePromise extends Promise<OfferEdge>, Fragmentable {
  node: <T = OfferPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OfferEdgeSubscription
  extends Promise<AsyncIterator<OfferEdge>>,
    Fragmentable {
  node: <T = OfferSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ParameterSubscriptionPayload {
  mutation: MutationType;
  node: Parameter;
  updatedFields: String[];
  previousValues: ParameterPreviousValues;
}

export interface ParameterSubscriptionPayloadPromise
  extends Promise<ParameterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ParameterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParameterPreviousValuesPromise>() => T;
}

export interface ParameterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParameterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParameterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParameterPreviousValuesSubscription>() => T;
}

export interface AggregateLander {
  count: Int;
}

export interface AggregateLanderPromise
  extends Promise<AggregateLander>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLanderSubscription
  extends Promise<AsyncIterator<AggregateLander>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DefaultParamConnection {
  pageInfo: PageInfo;
  edges: DefaultParamEdge[];
}

export interface DefaultParamConnectionPromise
  extends Promise<DefaultParamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DefaultParamEdge>>() => T;
  aggregate: <T = AggregateDefaultParamPromise>() => T;
}

export interface DefaultParamConnectionSubscription
  extends Promise<AsyncIterator<DefaultParamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DefaultParamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDefaultParamSubscription>() => T;
}

export interface TokenPreviousValues {
  id: ID_Output;
  name: String;
  parameter: String;
  placeholder: String;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parameter: () => Promise<String>;
  placeholder: () => Promise<String>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  parameter: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface DefaultParam {
  id: ID_Output;
  head?: String;
  default?: String;
  tokens: String[];
  track: Boolean;
}

export interface DefaultParamPromise
  extends Promise<DefaultParam>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  head: () => Promise<String>;
  default: () => Promise<String>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface DefaultParamSubscription
  extends Promise<AsyncIterator<DefaultParam>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  head: () => Promise<AsyncIterator<String>>;
  default: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
  track: () => Promise<AsyncIterator<Boolean>>;
}

export interface DefaultParamNullablePromise
  extends Promise<DefaultParam | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  head: () => Promise<String>;
  default: () => Promise<String>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface ParameterPreviousValues {
  id: ID_Output;
  tokens: String[];
  track: Boolean;
}

export interface ParameterPreviousValuesPromise
  extends Promise<ParameterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tokens: () => Promise<String[]>;
  track: () => Promise<Boolean>;
}

export interface ParameterPreviousValuesSubscription
  extends Promise<AsyncIterator<ParameterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
  track: () => Promise<AsyncIterator<Boolean>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DomainEdge {
  node: Domain;
  cursor: String;
}

export interface DomainEdgePromise extends Promise<DomainEdge>, Fragmentable {
  node: <T = DomainPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DomainEdgeSubscription
  extends Promise<AsyncIterator<DomainEdge>>,
    Fragmentable {
  node: <T = DomainSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface NavigationConnection {
  pageInfo: PageInfo;
  edges: NavigationEdge[];
}

export interface NavigationConnectionPromise
  extends Promise<NavigationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NavigationEdge>>() => T;
  aggregate: <T = AggregateNavigationPromise>() => T;
}

export interface NavigationConnectionSubscription
  extends Promise<AsyncIterator<NavigationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NavigationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNavigationSubscription>() => T;
}

export interface AggregateParameter {
  count: Int;
}

export interface AggregateParameterPromise
  extends Promise<AggregateParameter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParameterSubscription
  extends Promise<AsyncIterator<AggregateParameter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Parameter",
    embedded: false
  },
  {
    name: "DefaultParam",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "Traffic",
    embedded: false
  },
  {
    name: "Lander",
    embedded: false
  },
  {
    name: "Offer",
    embedded: false
  },
  {
    name: "Navigation",
    embedded: false
  },
  {
    name: "Campaign",
    embedded: false
  },
  {
    name: "CampNavRows",
    embedded: false
  },
  {
    name: "Domain",
    embedded: false
  },
  {
    name: "MainDomain",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
