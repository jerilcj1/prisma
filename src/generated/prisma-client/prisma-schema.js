module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCampaign {
  count: Int!
}

type AggregateCampNavRows {
  count: Int!
}

type AggregateDefaultParam {
  count: Int!
}

type AggregateDomain {
  count: Int!
}

type AggregateLander {
  count: Int!
}

type AggregateMainDomain {
  count: Int!
}

type AggregateNavigation {
  count: Int!
}

type AggregateOffer {
  count: Int!
}

type AggregateParameter {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateTraffic {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Campaign {
  id: ID!
  name: String!
  refresh: String!
  totalPercent: Int!
  url: String
  traffic: String!
  landerRow(where: CampNavRowsWhereInput, orderBy: CampNavRowsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CampNavRows!]
  userUnique: String!
  user: User!
}

type CampaignConnection {
  pageInfo: PageInfo!
  edges: [CampaignEdge]!
  aggregate: AggregateCampaign!
}

input CampaignCreateInput {
  id: ID
  name: String!
  refresh: String!
  totalPercent: Int!
  url: String
  traffic: String!
  landerRow: CampNavRowsCreateManyInput
  userUnique: String!
  user: UserCreateOneWithoutCampaignInput!
}

input CampaignCreateManyWithoutUserInput {
  create: [CampaignCreateWithoutUserInput!]
  connect: [CampaignWhereUniqueInput!]
}

input CampaignCreateWithoutUserInput {
  id: ID
  name: String!
  refresh: String!
  totalPercent: Int!
  url: String
  traffic: String!
  landerRow: CampNavRowsCreateManyInput
  userUnique: String!
}

type CampaignEdge {
  node: Campaign!
  cursor: String!
}

enum CampaignOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  refresh_ASC
  refresh_DESC
  totalPercent_ASC
  totalPercent_DESC
  url_ASC
  url_DESC
  traffic_ASC
  traffic_DESC
  userUnique_ASC
  userUnique_DESC
}

type CampaignPreviousValues {
  id: ID!
  name: String!
  refresh: String!
  totalPercent: Int!
  url: String
  traffic: String!
  userUnique: String!
}

input CampaignScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  refresh: String
  refresh_not: String
  refresh_in: [String!]
  refresh_not_in: [String!]
  refresh_lt: String
  refresh_lte: String
  refresh_gt: String
  refresh_gte: String
  refresh_contains: String
  refresh_not_contains: String
  refresh_starts_with: String
  refresh_not_starts_with: String
  refresh_ends_with: String
  refresh_not_ends_with: String
  totalPercent: Int
  totalPercent_not: Int
  totalPercent_in: [Int!]
  totalPercent_not_in: [Int!]
  totalPercent_lt: Int
  totalPercent_lte: Int
  totalPercent_gt: Int
  totalPercent_gte: Int
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  traffic: String
  traffic_not: String
  traffic_in: [String!]
  traffic_not_in: [String!]
  traffic_lt: String
  traffic_lte: String
  traffic_gt: String
  traffic_gte: String
  traffic_contains: String
  traffic_not_contains: String
  traffic_starts_with: String
  traffic_not_starts_with: String
  traffic_ends_with: String
  traffic_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [CampaignScalarWhereInput!]
  OR: [CampaignScalarWhereInput!]
  NOT: [CampaignScalarWhereInput!]
}

type CampaignSubscriptionPayload {
  mutation: MutationType!
  node: Campaign
  updatedFields: [String!]
  previousValues: CampaignPreviousValues
}

input CampaignSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampaignWhereInput
  AND: [CampaignSubscriptionWhereInput!]
}

input CampaignUpdateInput {
  name: String
  refresh: String
  totalPercent: Int
  url: String
  traffic: String
  landerRow: CampNavRowsUpdateManyInput
  userUnique: String
  user: UserUpdateOneRequiredWithoutCampaignInput
}

input CampaignUpdateManyDataInput {
  name: String
  refresh: String
  totalPercent: Int
  url: String
  traffic: String
  userUnique: String
}

input CampaignUpdateManyMutationInput {
  name: String
  refresh: String
  totalPercent: Int
  url: String
  traffic: String
  userUnique: String
}

input CampaignUpdateManyWithoutUserInput {
  create: [CampaignCreateWithoutUserInput!]
  delete: [CampaignWhereUniqueInput!]
  connect: [CampaignWhereUniqueInput!]
  set: [CampaignWhereUniqueInput!]
  disconnect: [CampaignWhereUniqueInput!]
  update: [CampaignUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CampaignUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CampaignScalarWhereInput!]
  updateMany: [CampaignUpdateManyWithWhereNestedInput!]
}

input CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput!
  data: CampaignUpdateManyDataInput!
}

input CampaignUpdateWithoutUserDataInput {
  name: String
  refresh: String
  totalPercent: Int
  url: String
  traffic: String
  landerRow: CampNavRowsUpdateManyInput
  userUnique: String
}

input CampaignUpdateWithWhereUniqueWithoutUserInput {
  where: CampaignWhereUniqueInput!
  data: CampaignUpdateWithoutUserDataInput!
}

input CampaignUpsertWithWhereUniqueWithoutUserInput {
  where: CampaignWhereUniqueInput!
  update: CampaignUpdateWithoutUserDataInput!
  create: CampaignCreateWithoutUserInput!
}

input CampaignWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  refresh: String
  refresh_not: String
  refresh_in: [String!]
  refresh_not_in: [String!]
  refresh_lt: String
  refresh_lte: String
  refresh_gt: String
  refresh_gte: String
  refresh_contains: String
  refresh_not_contains: String
  refresh_starts_with: String
  refresh_not_starts_with: String
  refresh_ends_with: String
  refresh_not_ends_with: String
  totalPercent: Int
  totalPercent_not: Int
  totalPercent_in: [Int!]
  totalPercent_not_in: [Int!]
  totalPercent_lt: Int
  totalPercent_lte: Int
  totalPercent_gt: Int
  totalPercent_gte: Int
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  traffic: String
  traffic_not: String
  traffic_in: [String!]
  traffic_not_in: [String!]
  traffic_lt: String
  traffic_lte: String
  traffic_gt: String
  traffic_gte: String
  traffic_contains: String
  traffic_not_contains: String
  traffic_starts_with: String
  traffic_not_starts_with: String
  traffic_ends_with: String
  traffic_not_ends_with: String
  landerRow_some: CampNavRowsWhereInput
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  AND: [CampaignWhereInput!]
}

input CampaignWhereUniqueInput {
  id: ID
  userUnique: String
}

type CampNavRows {
  id: ID!
  percent: Int!
  landerName: String!
}

type CampNavRowsConnection {
  pageInfo: PageInfo!
  edges: [CampNavRowsEdge]!
  aggregate: AggregateCampNavRows!
}

input CampNavRowsCreateInput {
  id: ID
  percent: Int!
  landerName: String!
}

input CampNavRowsCreateManyInput {
  create: [CampNavRowsCreateInput!]
  connect: [CampNavRowsWhereUniqueInput!]
}

type CampNavRowsEdge {
  node: CampNavRows!
  cursor: String!
}

enum CampNavRowsOrderByInput {
  id_ASC
  id_DESC
  percent_ASC
  percent_DESC
  landerName_ASC
  landerName_DESC
}

type CampNavRowsPreviousValues {
  id: ID!
  percent: Int!
  landerName: String!
}

input CampNavRowsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  percent: Int
  percent_not: Int
  percent_in: [Int!]
  percent_not_in: [Int!]
  percent_lt: Int
  percent_lte: Int
  percent_gt: Int
  percent_gte: Int
  landerName: String
  landerName_not: String
  landerName_in: [String!]
  landerName_not_in: [String!]
  landerName_lt: String
  landerName_lte: String
  landerName_gt: String
  landerName_gte: String
  landerName_contains: String
  landerName_not_contains: String
  landerName_starts_with: String
  landerName_not_starts_with: String
  landerName_ends_with: String
  landerName_not_ends_with: String
  AND: [CampNavRowsScalarWhereInput!]
  OR: [CampNavRowsScalarWhereInput!]
  NOT: [CampNavRowsScalarWhereInput!]
}

type CampNavRowsSubscriptionPayload {
  mutation: MutationType!
  node: CampNavRows
  updatedFields: [String!]
  previousValues: CampNavRowsPreviousValues
}

input CampNavRowsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampNavRowsWhereInput
  AND: [CampNavRowsSubscriptionWhereInput!]
}

input CampNavRowsUpdateDataInput {
  percent: Int
  landerName: String
}

input CampNavRowsUpdateInput {
  percent: Int
  landerName: String
}

input CampNavRowsUpdateManyDataInput {
  percent: Int
  landerName: String
}

input CampNavRowsUpdateManyInput {
  create: [CampNavRowsCreateInput!]
  update: [CampNavRowsUpdateWithWhereUniqueNestedInput!]
  upsert: [CampNavRowsUpsertWithWhereUniqueNestedInput!]
  delete: [CampNavRowsWhereUniqueInput!]
  connect: [CampNavRowsWhereUniqueInput!]
  set: [CampNavRowsWhereUniqueInput!]
  disconnect: [CampNavRowsWhereUniqueInput!]
  deleteMany: [CampNavRowsScalarWhereInput!]
  updateMany: [CampNavRowsUpdateManyWithWhereNestedInput!]
}

input CampNavRowsUpdateManyMutationInput {
  percent: Int
  landerName: String
}

input CampNavRowsUpdateManyWithWhereNestedInput {
  where: CampNavRowsScalarWhereInput!
  data: CampNavRowsUpdateManyDataInput!
}

input CampNavRowsUpdateWithWhereUniqueNestedInput {
  where: CampNavRowsWhereUniqueInput!
  data: CampNavRowsUpdateDataInput!
}

input CampNavRowsUpsertWithWhereUniqueNestedInput {
  where: CampNavRowsWhereUniqueInput!
  update: CampNavRowsUpdateDataInput!
  create: CampNavRowsCreateInput!
}

input CampNavRowsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  percent: Int
  percent_not: Int
  percent_in: [Int!]
  percent_not_in: [Int!]
  percent_lt: Int
  percent_lte: Int
  percent_gt: Int
  percent_gte: Int
  landerName: String
  landerName_not: String
  landerName_in: [String!]
  landerName_not_in: [String!]
  landerName_lt: String
  landerName_lte: String
  landerName_gt: String
  landerName_gte: String
  landerName_contains: String
  landerName_not_contains: String
  landerName_starts_with: String
  landerName_not_starts_with: String
  landerName_ends_with: String
  landerName_not_ends_with: String
  AND: [CampNavRowsWhereInput!]
}

input CampNavRowsWhereUniqueInput {
  id: ID
}

type DefaultParam {
  id: ID!
  head: String
  default: String
  tokens: [String!]!
  track: Boolean!
}

type DefaultParamConnection {
  pageInfo: PageInfo!
  edges: [DefaultParamEdge]!
  aggregate: AggregateDefaultParam!
}

input DefaultParamCreateInput {
  id: ID
  head: String
  default: String
  tokens: DefaultParamCreatetokensInput
  track: Boolean!
}

input DefaultParamCreateManyInput {
  create: [DefaultParamCreateInput!]
  connect: [DefaultParamWhereUniqueInput!]
}

input DefaultParamCreatetokensInput {
  set: [String!]
}

type DefaultParamEdge {
  node: DefaultParam!
  cursor: String!
}

enum DefaultParamOrderByInput {
  id_ASC
  id_DESC
  head_ASC
  head_DESC
  default_ASC
  default_DESC
  track_ASC
  track_DESC
}

type DefaultParamPreviousValues {
  id: ID!
  head: String
  default: String
  tokens: [String!]!
  track: Boolean!
}

input DefaultParamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  head: String
  head_not: String
  head_in: [String!]
  head_not_in: [String!]
  head_lt: String
  head_lte: String
  head_gt: String
  head_gte: String
  head_contains: String
  head_not_contains: String
  head_starts_with: String
  head_not_starts_with: String
  head_ends_with: String
  head_not_ends_with: String
  default: String
  default_not: String
  default_in: [String!]
  default_not_in: [String!]
  default_lt: String
  default_lte: String
  default_gt: String
  default_gte: String
  default_contains: String
  default_not_contains: String
  default_starts_with: String
  default_not_starts_with: String
  default_ends_with: String
  default_not_ends_with: String
  track: Boolean
  track_not: Boolean
  AND: [DefaultParamScalarWhereInput!]
  OR: [DefaultParamScalarWhereInput!]
  NOT: [DefaultParamScalarWhereInput!]
}

type DefaultParamSubscriptionPayload {
  mutation: MutationType!
  node: DefaultParam
  updatedFields: [String!]
  previousValues: DefaultParamPreviousValues
}

input DefaultParamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DefaultParamWhereInput
  AND: [DefaultParamSubscriptionWhereInput!]
}

input DefaultParamUpdateDataInput {
  head: String
  default: String
  tokens: DefaultParamUpdatetokensInput
  track: Boolean
}

input DefaultParamUpdateInput {
  head: String
  default: String
  tokens: DefaultParamUpdatetokensInput
  track: Boolean
}

input DefaultParamUpdateManyDataInput {
  head: String
  default: String
  tokens: DefaultParamUpdatetokensInput
  track: Boolean
}

input DefaultParamUpdateManyInput {
  create: [DefaultParamCreateInput!]
  update: [DefaultParamUpdateWithWhereUniqueNestedInput!]
  upsert: [DefaultParamUpsertWithWhereUniqueNestedInput!]
  delete: [DefaultParamWhereUniqueInput!]
  connect: [DefaultParamWhereUniqueInput!]
  set: [DefaultParamWhereUniqueInput!]
  disconnect: [DefaultParamWhereUniqueInput!]
  deleteMany: [DefaultParamScalarWhereInput!]
  updateMany: [DefaultParamUpdateManyWithWhereNestedInput!]
}

input DefaultParamUpdateManyMutationInput {
  head: String
  default: String
  tokens: DefaultParamUpdatetokensInput
  track: Boolean
}

input DefaultParamUpdateManyWithWhereNestedInput {
  where: DefaultParamScalarWhereInput!
  data: DefaultParamUpdateManyDataInput!
}

input DefaultParamUpdatetokensInput {
  set: [String!]
}

input DefaultParamUpdateWithWhereUniqueNestedInput {
  where: DefaultParamWhereUniqueInput!
  data: DefaultParamUpdateDataInput!
}

input DefaultParamUpsertWithWhereUniqueNestedInput {
  where: DefaultParamWhereUniqueInput!
  update: DefaultParamUpdateDataInput!
  create: DefaultParamCreateInput!
}

input DefaultParamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  head: String
  head_not: String
  head_in: [String!]
  head_not_in: [String!]
  head_lt: String
  head_lte: String
  head_gt: String
  head_gte: String
  head_contains: String
  head_not_contains: String
  head_starts_with: String
  head_not_starts_with: String
  head_ends_with: String
  head_not_ends_with: String
  default: String
  default_not: String
  default_in: [String!]
  default_not_in: [String!]
  default_lt: String
  default_lte: String
  default_gt: String
  default_gte: String
  default_contains: String
  default_not_contains: String
  default_starts_with: String
  default_not_starts_with: String
  default_ends_with: String
  default_not_ends_with: String
  track: Boolean
  track_not: Boolean
  AND: [DefaultParamWhereInput!]
}

input DefaultParamWhereUniqueInput {
  id: ID
}

type Domain {
  id: ID!
  url: String!
  userUnique: String!
  user: User!
  MainDomain: MainDomain
}

type DomainConnection {
  pageInfo: PageInfo!
  edges: [DomainEdge]!
  aggregate: AggregateDomain!
}

input DomainCreateInput {
  id: ID
  url: String!
  userUnique: String!
  user: UserCreateOneWithoutDomainInput!
  MainDomain: MainDomainCreateOneWithoutDomainInput
}

input DomainCreateManyWithoutUserInput {
  create: [DomainCreateWithoutUserInput!]
  connect: [DomainWhereUniqueInput!]
}

input DomainCreateOneWithoutMainDomainInput {
  create: DomainCreateWithoutMainDomainInput
  connect: DomainWhereUniqueInput
}

input DomainCreateWithoutMainDomainInput {
  id: ID
  url: String!
  userUnique: String!
  user: UserCreateOneWithoutDomainInput!
}

input DomainCreateWithoutUserInput {
  id: ID
  url: String!
  userUnique: String!
  MainDomain: MainDomainCreateOneWithoutDomainInput
}

type DomainEdge {
  node: Domain!
  cursor: String!
}

enum DomainOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  userUnique_ASC
  userUnique_DESC
}

type DomainPreviousValues {
  id: ID!
  url: String!
  userUnique: String!
}

input DomainScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [DomainScalarWhereInput!]
  OR: [DomainScalarWhereInput!]
  NOT: [DomainScalarWhereInput!]
}

type DomainSubscriptionPayload {
  mutation: MutationType!
  node: Domain
  updatedFields: [String!]
  previousValues: DomainPreviousValues
}

input DomainSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DomainWhereInput
  AND: [DomainSubscriptionWhereInput!]
}

input DomainUpdateInput {
  url: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutDomainInput
  MainDomain: MainDomainUpdateOneWithoutDomainInput
}

input DomainUpdateManyDataInput {
  url: String
  userUnique: String
}

input DomainUpdateManyMutationInput {
  url: String
  userUnique: String
}

input DomainUpdateManyWithoutUserInput {
  create: [DomainCreateWithoutUserInput!]
  delete: [DomainWhereUniqueInput!]
  connect: [DomainWhereUniqueInput!]
  set: [DomainWhereUniqueInput!]
  disconnect: [DomainWhereUniqueInput!]
  update: [DomainUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DomainUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DomainScalarWhereInput!]
  updateMany: [DomainUpdateManyWithWhereNestedInput!]
}

input DomainUpdateManyWithWhereNestedInput {
  where: DomainScalarWhereInput!
  data: DomainUpdateManyDataInput!
}

input DomainUpdateOneRequiredWithoutMainDomainInput {
  create: DomainCreateWithoutMainDomainInput
  update: DomainUpdateWithoutMainDomainDataInput
  upsert: DomainUpsertWithoutMainDomainInput
  connect: DomainWhereUniqueInput
}

input DomainUpdateWithoutMainDomainDataInput {
  url: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutDomainInput
}

input DomainUpdateWithoutUserDataInput {
  url: String
  userUnique: String
  MainDomain: MainDomainUpdateOneWithoutDomainInput
}

input DomainUpdateWithWhereUniqueWithoutUserInput {
  where: DomainWhereUniqueInput!
  data: DomainUpdateWithoutUserDataInput!
}

input DomainUpsertWithoutMainDomainInput {
  update: DomainUpdateWithoutMainDomainDataInput!
  create: DomainCreateWithoutMainDomainInput!
}

input DomainUpsertWithWhereUniqueWithoutUserInput {
  where: DomainWhereUniqueInput!
  update: DomainUpdateWithoutUserDataInput!
  create: DomainCreateWithoutUserInput!
}

input DomainWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  MainDomain: MainDomainWhereInput
  AND: [DomainWhereInput!]
}

input DomainWhereUniqueInput {
  id: ID
  url: String
  userUnique: String
}

scalar Json

type Lander {
  id: ID!
  name: String!
  url: String!
  userUnique: String!
  user: User!
  lock: [String!]!
}

type LanderConnection {
  pageInfo: PageInfo!
  edges: [LanderEdge]!
  aggregate: AggregateLander!
}

input LanderCreateInput {
  id: ID
  name: String!
  url: String!
  userUnique: String!
  user: UserCreateOneWithoutLanderInput!
  lock: LanderCreatelockInput
}

input LanderCreatelockInput {
  set: [String!]
}

input LanderCreateManyWithoutUserInput {
  create: [LanderCreateWithoutUserInput!]
  connect: [LanderWhereUniqueInput!]
}

input LanderCreateWithoutUserInput {
  id: ID
  name: String!
  url: String!
  userUnique: String!
  lock: LanderCreatelockInput
}

type LanderEdge {
  node: Lander!
  cursor: String!
}

enum LanderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  userUnique_ASC
  userUnique_DESC
}

type LanderPreviousValues {
  id: ID!
  name: String!
  url: String!
  userUnique: String!
  lock: [String!]!
}

input LanderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [LanderScalarWhereInput!]
  OR: [LanderScalarWhereInput!]
  NOT: [LanderScalarWhereInput!]
}

type LanderSubscriptionPayload {
  mutation: MutationType!
  node: Lander
  updatedFields: [String!]
  previousValues: LanderPreviousValues
}

input LanderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanderWhereInput
  AND: [LanderSubscriptionWhereInput!]
}

input LanderUpdateInput {
  name: String
  url: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutLanderInput
  lock: LanderUpdatelockInput
}

input LanderUpdatelockInput {
  set: [String!]
}

input LanderUpdateManyDataInput {
  name: String
  url: String
  userUnique: String
  lock: LanderUpdatelockInput
}

input LanderUpdateManyMutationInput {
  name: String
  url: String
  userUnique: String
  lock: LanderUpdatelockInput
}

input LanderUpdateManyWithoutUserInput {
  create: [LanderCreateWithoutUserInput!]
  delete: [LanderWhereUniqueInput!]
  connect: [LanderWhereUniqueInput!]
  set: [LanderWhereUniqueInput!]
  disconnect: [LanderWhereUniqueInput!]
  update: [LanderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LanderUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LanderScalarWhereInput!]
  updateMany: [LanderUpdateManyWithWhereNestedInput!]
}

input LanderUpdateManyWithWhereNestedInput {
  where: LanderScalarWhereInput!
  data: LanderUpdateManyDataInput!
}

input LanderUpdateWithoutUserDataInput {
  name: String
  url: String
  userUnique: String
  lock: LanderUpdatelockInput
}

input LanderUpdateWithWhereUniqueWithoutUserInput {
  where: LanderWhereUniqueInput!
  data: LanderUpdateWithoutUserDataInput!
}

input LanderUpsertWithWhereUniqueWithoutUserInput {
  where: LanderWhereUniqueInput!
  update: LanderUpdateWithoutUserDataInput!
  create: LanderCreateWithoutUserInput!
}

input LanderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  AND: [LanderWhereInput!]
}

input LanderWhereUniqueInput {
  id: ID
  userUnique: String
}

scalar Long

type MainDomain {
  id: ID!
  userUnique: String!
  domain: Domain!
  user: User!
}

type MainDomainConnection {
  pageInfo: PageInfo!
  edges: [MainDomainEdge]!
  aggregate: AggregateMainDomain!
}

input MainDomainCreateInput {
  id: ID
  userUnique: String!
  domain: DomainCreateOneWithoutMainDomainInput!
  user: UserCreateOneWithoutMainDomainInput!
}

input MainDomainCreateOneWithoutDomainInput {
  create: MainDomainCreateWithoutDomainInput
  connect: MainDomainWhereUniqueInput
}

input MainDomainCreateOneWithoutUserInput {
  create: MainDomainCreateWithoutUserInput
  connect: MainDomainWhereUniqueInput
}

input MainDomainCreateWithoutDomainInput {
  id: ID
  userUnique: String!
  user: UserCreateOneWithoutMainDomainInput!
}

input MainDomainCreateWithoutUserInput {
  id: ID
  userUnique: String!
  domain: DomainCreateOneWithoutMainDomainInput!
}

type MainDomainEdge {
  node: MainDomain!
  cursor: String!
}

enum MainDomainOrderByInput {
  id_ASC
  id_DESC
  userUnique_ASC
  userUnique_DESC
}

type MainDomainPreviousValues {
  id: ID!
  userUnique: String!
}

type MainDomainSubscriptionPayload {
  mutation: MutationType!
  node: MainDomain
  updatedFields: [String!]
  previousValues: MainDomainPreviousValues
}

input MainDomainSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MainDomainWhereInput
  AND: [MainDomainSubscriptionWhereInput!]
}

input MainDomainUpdateInput {
  userUnique: String
  domain: DomainUpdateOneRequiredWithoutMainDomainInput
  user: UserUpdateOneRequiredWithoutMainDomainInput
}

input MainDomainUpdateManyMutationInput {
  userUnique: String
}

input MainDomainUpdateOneWithoutDomainInput {
  create: MainDomainCreateWithoutDomainInput
  update: MainDomainUpdateWithoutDomainDataInput
  upsert: MainDomainUpsertWithoutDomainInput
  delete: Boolean
  disconnect: Boolean
  connect: MainDomainWhereUniqueInput
}

input MainDomainUpdateOneWithoutUserInput {
  create: MainDomainCreateWithoutUserInput
  update: MainDomainUpdateWithoutUserDataInput
  upsert: MainDomainUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: MainDomainWhereUniqueInput
}

input MainDomainUpdateWithoutDomainDataInput {
  userUnique: String
  user: UserUpdateOneRequiredWithoutMainDomainInput
}

input MainDomainUpdateWithoutUserDataInput {
  userUnique: String
  domain: DomainUpdateOneRequiredWithoutMainDomainInput
}

input MainDomainUpsertWithoutDomainInput {
  update: MainDomainUpdateWithoutDomainDataInput!
  create: MainDomainCreateWithoutDomainInput!
}

input MainDomainUpsertWithoutUserInput {
  update: MainDomainUpdateWithoutUserDataInput!
  create: MainDomainCreateWithoutUserInput!
}

input MainDomainWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  domain: DomainWhereInput
  user: UserWhereInput
  AND: [MainDomainWhereInput!]
}

input MainDomainWhereUniqueInput {
  id: ID
  userUnique: String
}

type Mutation {
  createCampNavRows(data: CampNavRowsCreateInput!): CampNavRows!
  updateCampNavRows(data: CampNavRowsUpdateInput!, where: CampNavRowsWhereUniqueInput!): CampNavRows
  updateManyCampNavRowses(data: CampNavRowsUpdateManyMutationInput!, where: CampNavRowsWhereInput): BatchPayload!
  upsertCampNavRows(where: CampNavRowsWhereUniqueInput!, create: CampNavRowsCreateInput!, update: CampNavRowsUpdateInput!): CampNavRows!
  deleteCampNavRows(where: CampNavRowsWhereUniqueInput!): CampNavRows
  deleteManyCampNavRowses(where: CampNavRowsWhereInput): BatchPayload!
  createCampaign(data: CampaignCreateInput!): Campaign!
  updateCampaign(data: CampaignUpdateInput!, where: CampaignWhereUniqueInput!): Campaign
  updateManyCampaigns(data: CampaignUpdateManyMutationInput!, where: CampaignWhereInput): BatchPayload!
  upsertCampaign(where: CampaignWhereUniqueInput!, create: CampaignCreateInput!, update: CampaignUpdateInput!): Campaign!
  deleteCampaign(where: CampaignWhereUniqueInput!): Campaign
  deleteManyCampaigns(where: CampaignWhereInput): BatchPayload!
  createDefaultParam(data: DefaultParamCreateInput!): DefaultParam!
  updateDefaultParam(data: DefaultParamUpdateInput!, where: DefaultParamWhereUniqueInput!): DefaultParam
  updateManyDefaultParams(data: DefaultParamUpdateManyMutationInput!, where: DefaultParamWhereInput): BatchPayload!
  upsertDefaultParam(where: DefaultParamWhereUniqueInput!, create: DefaultParamCreateInput!, update: DefaultParamUpdateInput!): DefaultParam!
  deleteDefaultParam(where: DefaultParamWhereUniqueInput!): DefaultParam
  deleteManyDefaultParams(where: DefaultParamWhereInput): BatchPayload!
  createDomain(data: DomainCreateInput!): Domain!
  updateDomain(data: DomainUpdateInput!, where: DomainWhereUniqueInput!): Domain
  updateManyDomains(data: DomainUpdateManyMutationInput!, where: DomainWhereInput): BatchPayload!
  upsertDomain(where: DomainWhereUniqueInput!, create: DomainCreateInput!, update: DomainUpdateInput!): Domain!
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteManyDomains(where: DomainWhereInput): BatchPayload!
  createLander(data: LanderCreateInput!): Lander!
  updateLander(data: LanderUpdateInput!, where: LanderWhereUniqueInput!): Lander
  updateManyLanders(data: LanderUpdateManyMutationInput!, where: LanderWhereInput): BatchPayload!
  upsertLander(where: LanderWhereUniqueInput!, create: LanderCreateInput!, update: LanderUpdateInput!): Lander!
  deleteLander(where: LanderWhereUniqueInput!): Lander
  deleteManyLanders(where: LanderWhereInput): BatchPayload!
  createMainDomain(data: MainDomainCreateInput!): MainDomain!
  updateMainDomain(data: MainDomainUpdateInput!, where: MainDomainWhereUniqueInput!): MainDomain
  updateManyMainDomains(data: MainDomainUpdateManyMutationInput!, where: MainDomainWhereInput): BatchPayload!
  upsertMainDomain(where: MainDomainWhereUniqueInput!, create: MainDomainCreateInput!, update: MainDomainUpdateInput!): MainDomain!
  deleteMainDomain(where: MainDomainWhereUniqueInput!): MainDomain
  deleteManyMainDomains(where: MainDomainWhereInput): BatchPayload!
  createNavigation(data: NavigationCreateInput!): Navigation!
  updateNavigation(data: NavigationUpdateInput!, where: NavigationWhereUniqueInput!): Navigation
  updateManyNavigations(data: NavigationUpdateManyMutationInput!, where: NavigationWhereInput): BatchPayload!
  upsertNavigation(where: NavigationWhereUniqueInput!, create: NavigationCreateInput!, update: NavigationUpdateInput!): Navigation!
  deleteNavigation(where: NavigationWhereUniqueInput!): Navigation
  deleteManyNavigations(where: NavigationWhereInput): BatchPayload!
  createOffer(data: OfferCreateInput!): Offer!
  updateOffer(data: OfferUpdateInput!, where: OfferWhereUniqueInput!): Offer
  updateManyOffers(data: OfferUpdateManyMutationInput!, where: OfferWhereInput): BatchPayload!
  upsertOffer(where: OfferWhereUniqueInput!, create: OfferCreateInput!, update: OfferUpdateInput!): Offer!
  deleteOffer(where: OfferWhereUniqueInput!): Offer
  deleteManyOffers(where: OfferWhereInput): BatchPayload!
  createParameter(data: ParameterCreateInput!): Parameter!
  updateParameter(data: ParameterUpdateInput!, where: ParameterWhereUniqueInput!): Parameter
  updateManyParameters(data: ParameterUpdateManyMutationInput!, where: ParameterWhereInput): BatchPayload!
  upsertParameter(where: ParameterWhereUniqueInput!, create: ParameterCreateInput!, update: ParameterUpdateInput!): Parameter!
  deleteParameter(where: ParameterWhereUniqueInput!): Parameter
  deleteManyParameters(where: ParameterWhereInput): BatchPayload!
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createTraffic(data: TrafficCreateInput!): Traffic!
  updateTraffic(data: TrafficUpdateInput!, where: TrafficWhereUniqueInput!): Traffic
  updateManyTraffics(data: TrafficUpdateManyMutationInput!, where: TrafficWhereInput): BatchPayload!
  upsertTraffic(where: TrafficWhereUniqueInput!, create: TrafficCreateInput!, update: TrafficUpdateInput!): Traffic!
  deleteTraffic(where: TrafficWhereUniqueInput!): Traffic
  deleteManyTraffics(where: TrafficWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Navigation {
  id: ID!
  name: String!
  userUnique: String!
  user: User!
  data: Json!
  lock: [String!]!
}

type NavigationConnection {
  pageInfo: PageInfo!
  edges: [NavigationEdge]!
  aggregate: AggregateNavigation!
}

input NavigationCreateInput {
  id: ID
  name: String!
  userUnique: String!
  user: UserCreateOneWithoutNavigationInput!
  data: Json!
  lock: NavigationCreatelockInput
}

input NavigationCreatelockInput {
  set: [String!]
}

input NavigationCreateManyWithoutUserInput {
  create: [NavigationCreateWithoutUserInput!]
  connect: [NavigationWhereUniqueInput!]
}

input NavigationCreateWithoutUserInput {
  id: ID
  name: String!
  userUnique: String!
  data: Json!
  lock: NavigationCreatelockInput
}

type NavigationEdge {
  node: Navigation!
  cursor: String!
}

enum NavigationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  userUnique_ASC
  userUnique_DESC
  data_ASC
  data_DESC
}

type NavigationPreviousValues {
  id: ID!
  name: String!
  userUnique: String!
  data: Json!
  lock: [String!]!
}

input NavigationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [NavigationScalarWhereInput!]
  OR: [NavigationScalarWhereInput!]
  NOT: [NavigationScalarWhereInput!]
}

type NavigationSubscriptionPayload {
  mutation: MutationType!
  node: Navigation
  updatedFields: [String!]
  previousValues: NavigationPreviousValues
}

input NavigationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NavigationWhereInput
  AND: [NavigationSubscriptionWhereInput!]
}

input NavigationUpdateInput {
  name: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutNavigationInput
  data: Json
  lock: NavigationUpdatelockInput
}

input NavigationUpdatelockInput {
  set: [String!]
}

input NavigationUpdateManyDataInput {
  name: String
  userUnique: String
  data: Json
  lock: NavigationUpdatelockInput
}

input NavigationUpdateManyMutationInput {
  name: String
  userUnique: String
  data: Json
  lock: NavigationUpdatelockInput
}

input NavigationUpdateManyWithoutUserInput {
  create: [NavigationCreateWithoutUserInput!]
  delete: [NavigationWhereUniqueInput!]
  connect: [NavigationWhereUniqueInput!]
  set: [NavigationWhereUniqueInput!]
  disconnect: [NavigationWhereUniqueInput!]
  update: [NavigationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NavigationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NavigationScalarWhereInput!]
  updateMany: [NavigationUpdateManyWithWhereNestedInput!]
}

input NavigationUpdateManyWithWhereNestedInput {
  where: NavigationScalarWhereInput!
  data: NavigationUpdateManyDataInput!
}

input NavigationUpdateWithoutUserDataInput {
  name: String
  userUnique: String
  data: Json
  lock: NavigationUpdatelockInput
}

input NavigationUpdateWithWhereUniqueWithoutUserInput {
  where: NavigationWhereUniqueInput!
  data: NavigationUpdateWithoutUserDataInput!
}

input NavigationUpsertWithWhereUniqueWithoutUserInput {
  where: NavigationWhereUniqueInput!
  update: NavigationUpdateWithoutUserDataInput!
  create: NavigationCreateWithoutUserInput!
}

input NavigationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  AND: [NavigationWhereInput!]
}

input NavigationWhereUniqueInput {
  id: ID
  userUnique: String
}

interface Node {
  id: ID!
}

type Offer {
  id: ID!
  name: String!
  url: String!
  userUnique: String!
  user: User!
  lock: [String!]!
}

type OfferConnection {
  pageInfo: PageInfo!
  edges: [OfferEdge]!
  aggregate: AggregateOffer!
}

input OfferCreateInput {
  id: ID
  name: String!
  url: String!
  userUnique: String!
  user: UserCreateOneWithoutOfferInput!
  lock: OfferCreatelockInput
}

input OfferCreatelockInput {
  set: [String!]
}

input OfferCreateManyWithoutUserInput {
  create: [OfferCreateWithoutUserInput!]
  connect: [OfferWhereUniqueInput!]
}

input OfferCreateWithoutUserInput {
  id: ID
  name: String!
  url: String!
  userUnique: String!
  lock: OfferCreatelockInput
}

type OfferEdge {
  node: Offer!
  cursor: String!
}

enum OfferOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  userUnique_ASC
  userUnique_DESC
}

type OfferPreviousValues {
  id: ID!
  name: String!
  url: String!
  userUnique: String!
  lock: [String!]!
}

input OfferScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [OfferScalarWhereInput!]
  OR: [OfferScalarWhereInput!]
  NOT: [OfferScalarWhereInput!]
}

type OfferSubscriptionPayload {
  mutation: MutationType!
  node: Offer
  updatedFields: [String!]
  previousValues: OfferPreviousValues
}

input OfferSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OfferWhereInput
  AND: [OfferSubscriptionWhereInput!]
}

input OfferUpdateInput {
  name: String
  url: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutOfferInput
  lock: OfferUpdatelockInput
}

input OfferUpdatelockInput {
  set: [String!]
}

input OfferUpdateManyDataInput {
  name: String
  url: String
  userUnique: String
  lock: OfferUpdatelockInput
}

input OfferUpdateManyMutationInput {
  name: String
  url: String
  userUnique: String
  lock: OfferUpdatelockInput
}

input OfferUpdateManyWithoutUserInput {
  create: [OfferCreateWithoutUserInput!]
  delete: [OfferWhereUniqueInput!]
  connect: [OfferWhereUniqueInput!]
  set: [OfferWhereUniqueInput!]
  disconnect: [OfferWhereUniqueInput!]
  update: [OfferUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [OfferUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [OfferScalarWhereInput!]
  updateMany: [OfferUpdateManyWithWhereNestedInput!]
}

input OfferUpdateManyWithWhereNestedInput {
  where: OfferScalarWhereInput!
  data: OfferUpdateManyDataInput!
}

input OfferUpdateWithoutUserDataInput {
  name: String
  url: String
  userUnique: String
  lock: OfferUpdatelockInput
}

input OfferUpdateWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput!
  data: OfferUpdateWithoutUserDataInput!
}

input OfferUpsertWithWhereUniqueWithoutUserInput {
  where: OfferWhereUniqueInput!
  update: OfferUpdateWithoutUserDataInput!
  create: OfferCreateWithoutUserInput!
}

input OfferWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  AND: [OfferWhereInput!]
}

input OfferWhereUniqueInput {
  id: ID
  userUnique: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Parameter {
  id: ID!
  tokens: [String!]!
  track: Boolean!
}

type ParameterConnection {
  pageInfo: PageInfo!
  edges: [ParameterEdge]!
  aggregate: AggregateParameter!
}

input ParameterCreateInput {
  id: ID
  tokens: ParameterCreatetokensInput
  track: Boolean!
}

input ParameterCreateManyInput {
  create: [ParameterCreateInput!]
  connect: [ParameterWhereUniqueInput!]
}

input ParameterCreatetokensInput {
  set: [String!]
}

type ParameterEdge {
  node: Parameter!
  cursor: String!
}

enum ParameterOrderByInput {
  id_ASC
  id_DESC
  track_ASC
  track_DESC
}

type ParameterPreviousValues {
  id: ID!
  tokens: [String!]!
  track: Boolean!
}

input ParameterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  track: Boolean
  track_not: Boolean
  AND: [ParameterScalarWhereInput!]
  OR: [ParameterScalarWhereInput!]
  NOT: [ParameterScalarWhereInput!]
}

type ParameterSubscriptionPayload {
  mutation: MutationType!
  node: Parameter
  updatedFields: [String!]
  previousValues: ParameterPreviousValues
}

input ParameterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ParameterWhereInput
  AND: [ParameterSubscriptionWhereInput!]
}

input ParameterUpdateDataInput {
  tokens: ParameterUpdatetokensInput
  track: Boolean
}

input ParameterUpdateInput {
  tokens: ParameterUpdatetokensInput
  track: Boolean
}

input ParameterUpdateManyDataInput {
  tokens: ParameterUpdatetokensInput
  track: Boolean
}

input ParameterUpdateManyInput {
  create: [ParameterCreateInput!]
  update: [ParameterUpdateWithWhereUniqueNestedInput!]
  upsert: [ParameterUpsertWithWhereUniqueNestedInput!]
  delete: [ParameterWhereUniqueInput!]
  connect: [ParameterWhereUniqueInput!]
  set: [ParameterWhereUniqueInput!]
  disconnect: [ParameterWhereUniqueInput!]
  deleteMany: [ParameterScalarWhereInput!]
  updateMany: [ParameterUpdateManyWithWhereNestedInput!]
}

input ParameterUpdateManyMutationInput {
  tokens: ParameterUpdatetokensInput
  track: Boolean
}

input ParameterUpdateManyWithWhereNestedInput {
  where: ParameterScalarWhereInput!
  data: ParameterUpdateManyDataInput!
}

input ParameterUpdatetokensInput {
  set: [String!]
}

input ParameterUpdateWithWhereUniqueNestedInput {
  where: ParameterWhereUniqueInput!
  data: ParameterUpdateDataInput!
}

input ParameterUpsertWithWhereUniqueNestedInput {
  where: ParameterWhereUniqueInput!
  update: ParameterUpdateDataInput!
  create: ParameterCreateInput!
}

input ParameterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  track: Boolean
  track_not: Boolean
  AND: [ParameterWhereInput!]
}

input ParameterWhereUniqueInput {
  id: ID
}

type Query {
  campNavRows(where: CampNavRowsWhereUniqueInput!): CampNavRows
  campNavRowses(where: CampNavRowsWhereInput, orderBy: CampNavRowsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CampNavRows]!
  campNavRowsesConnection(where: CampNavRowsWhereInput, orderBy: CampNavRowsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampNavRowsConnection!
  campaign(where: CampaignWhereUniqueInput!): Campaign
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign]!
  campaignsConnection(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampaignConnection!
  defaultParam(where: DefaultParamWhereUniqueInput!): DefaultParam
  defaultParams(where: DefaultParamWhereInput, orderBy: DefaultParamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultParam]!
  defaultParamsConnection(where: DefaultParamWhereInput, orderBy: DefaultParamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DefaultParamConnection!
  domain(where: DomainWhereUniqueInput!): Domain
  domains(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Domain]!
  domainsConnection(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DomainConnection!
  lander(where: LanderWhereUniqueInput!): Lander
  landers(where: LanderWhereInput, orderBy: LanderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lander]!
  landersConnection(where: LanderWhereInput, orderBy: LanderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanderConnection!
  mainDomain(where: MainDomainWhereUniqueInput!): MainDomain
  mainDomains(where: MainDomainWhereInput, orderBy: MainDomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MainDomain]!
  mainDomainsConnection(where: MainDomainWhereInput, orderBy: MainDomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MainDomainConnection!
  navigation(where: NavigationWhereUniqueInput!): Navigation
  navigations(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Navigation]!
  navigationsConnection(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NavigationConnection!
  offer(where: OfferWhereUniqueInput!): Offer
  offers(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer]!
  offersConnection(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OfferConnection!
  parameter(where: ParameterWhereUniqueInput!): Parameter
  parameters(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter]!
  parametersConnection(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ParameterConnection!
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  traffic(where: TrafficWhereUniqueInput!): Traffic
  traffics(where: TrafficWhereInput, orderBy: TrafficOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Traffic]!
  trafficsConnection(where: TrafficWhereInput, orderBy: TrafficOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrafficConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  campNavRows(where: CampNavRowsSubscriptionWhereInput): CampNavRowsSubscriptionPayload
  campaign(where: CampaignSubscriptionWhereInput): CampaignSubscriptionPayload
  defaultParam(where: DefaultParamSubscriptionWhereInput): DefaultParamSubscriptionPayload
  domain(where: DomainSubscriptionWhereInput): DomainSubscriptionPayload
  lander(where: LanderSubscriptionWhereInput): LanderSubscriptionPayload
  mainDomain(where: MainDomainSubscriptionWhereInput): MainDomainSubscriptionPayload
  navigation(where: NavigationSubscriptionWhereInput): NavigationSubscriptionPayload
  offer(where: OfferSubscriptionWhereInput): OfferSubscriptionPayload
  parameter(where: ParameterSubscriptionWhereInput): ParameterSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  traffic(where: TrafficSubscriptionWhereInput): TrafficSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Token {
  id: ID!
  name: String!
  parameter: String!
  placeholder: String!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  id: ID
  name: String!
  parameter: String!
  placeholder: String!
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parameter_ASC
  parameter_DESC
  placeholder_ASC
  placeholder_DESC
}

type TokenPreviousValues {
  id: ID!
  name: String!
  parameter: String!
  placeholder: String!
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  name: String
  parameter: String
  placeholder: String
}

input TokenUpdateManyMutationInput {
  name: String
  parameter: String
  placeholder: String
}

input TokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  parameter: String
  parameter_not: String
  parameter_in: [String!]
  parameter_not_in: [String!]
  parameter_lt: String
  parameter_lte: String
  parameter_gt: String
  parameter_gte: String
  parameter_contains: String
  parameter_not_contains: String
  parameter_starts_with: String
  parameter_not_starts_with: String
  parameter_ends_with: String
  parameter_not_ends_with: String
  placeholder: String
  placeholder_not: String
  placeholder_in: [String!]
  placeholder_not_in: [String!]
  placeholder_lt: String
  placeholder_lte: String
  placeholder_gt: String
  placeholder_gte: String
  placeholder_contains: String
  placeholder_not_contains: String
  placeholder_starts_with: String
  placeholder_not_starts_with: String
  placeholder_ends_with: String
  placeholder_not_ends_with: String
  AND: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  id: ID
}

type Traffic {
  id: ID!
  name: String!
  userUnique: String!
  user: User!
  data(where: ParameterWhereInput, orderBy: ParameterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Parameter!]
  default_data(where: DefaultParamWhereInput, orderBy: DefaultParamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultParam!]
  lock: [String!]!
}

type TrafficConnection {
  pageInfo: PageInfo!
  edges: [TrafficEdge]!
  aggregate: AggregateTraffic!
}

input TrafficCreateInput {
  id: ID
  name: String!
  userUnique: String!
  user: UserCreateOneWithoutTrafficInput!
  data: ParameterCreateManyInput
  default_data: DefaultParamCreateManyInput
  lock: TrafficCreatelockInput
}

input TrafficCreatelockInput {
  set: [String!]
}

input TrafficCreateManyWithoutUserInput {
  create: [TrafficCreateWithoutUserInput!]
  connect: [TrafficWhereUniqueInput!]
}

input TrafficCreateWithoutUserInput {
  id: ID
  name: String!
  userUnique: String!
  data: ParameterCreateManyInput
  default_data: DefaultParamCreateManyInput
  lock: TrafficCreatelockInput
}

type TrafficEdge {
  node: Traffic!
  cursor: String!
}

enum TrafficOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  userUnique_ASC
  userUnique_DESC
}

type TrafficPreviousValues {
  id: ID!
  name: String!
  userUnique: String!
  lock: [String!]!
}

input TrafficScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  AND: [TrafficScalarWhereInput!]
  OR: [TrafficScalarWhereInput!]
  NOT: [TrafficScalarWhereInput!]
}

type TrafficSubscriptionPayload {
  mutation: MutationType!
  node: Traffic
  updatedFields: [String!]
  previousValues: TrafficPreviousValues
}

input TrafficSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TrafficWhereInput
  AND: [TrafficSubscriptionWhereInput!]
}

input TrafficUpdateInput {
  name: String
  userUnique: String
  user: UserUpdateOneRequiredWithoutTrafficInput
  data: ParameterUpdateManyInput
  default_data: DefaultParamUpdateManyInput
  lock: TrafficUpdatelockInput
}

input TrafficUpdatelockInput {
  set: [String!]
}

input TrafficUpdateManyDataInput {
  name: String
  userUnique: String
  lock: TrafficUpdatelockInput
}

input TrafficUpdateManyMutationInput {
  name: String
  userUnique: String
  lock: TrafficUpdatelockInput
}

input TrafficUpdateManyWithoutUserInput {
  create: [TrafficCreateWithoutUserInput!]
  delete: [TrafficWhereUniqueInput!]
  connect: [TrafficWhereUniqueInput!]
  set: [TrafficWhereUniqueInput!]
  disconnect: [TrafficWhereUniqueInput!]
  update: [TrafficUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TrafficUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TrafficScalarWhereInput!]
  updateMany: [TrafficUpdateManyWithWhereNestedInput!]
}

input TrafficUpdateManyWithWhereNestedInput {
  where: TrafficScalarWhereInput!
  data: TrafficUpdateManyDataInput!
}

input TrafficUpdateWithoutUserDataInput {
  name: String
  userUnique: String
  data: ParameterUpdateManyInput
  default_data: DefaultParamUpdateManyInput
  lock: TrafficUpdatelockInput
}

input TrafficUpdateWithWhereUniqueWithoutUserInput {
  where: TrafficWhereUniqueInput!
  data: TrafficUpdateWithoutUserDataInput!
}

input TrafficUpsertWithWhereUniqueWithoutUserInput {
  where: TrafficWhereUniqueInput!
  update: TrafficUpdateWithoutUserDataInput!
  create: TrafficCreateWithoutUserInput!
}

input TrafficWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  userUnique: String
  userUnique_not: String
  userUnique_in: [String!]
  userUnique_not_in: [String!]
  userUnique_lt: String
  userUnique_lte: String
  userUnique_gt: String
  userUnique_gte: String
  userUnique_contains: String
  userUnique_not_contains: String
  userUnique_starts_with: String
  userUnique_not_starts_with: String
  userUnique_ends_with: String
  userUnique_not_ends_with: String
  user: UserWhereInput
  data_some: ParameterWhereInput
  default_data_some: DefaultParamWhereInput
  AND: [TrafficWhereInput!]
}

input TrafficWhereUniqueInput {
  id: ID
  userUnique: String
}

type User {
  id: ID!
  name: String!
  email: String!
  traffic(where: TrafficWhereInput, orderBy: TrafficOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Traffic!]
  lander(where: LanderWhereInput, orderBy: LanderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lander!]
  offer(where: OfferWhereInput, orderBy: OfferOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Offer!]
  navigation(where: NavigationWhereInput, orderBy: NavigationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Navigation!]
  campaign(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign!]
  domain(where: DomainWhereInput, orderBy: DomainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Domain!]
  mainDomain: MainDomain
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateOneWithoutCampaignInput {
  create: UserCreateWithoutCampaignInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDomainInput {
  create: UserCreateWithoutDomainInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLanderInput {
  create: UserCreateWithoutLanderInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMainDomainInput {
  create: UserCreateWithoutMainDomainInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNavigationInput {
  create: UserCreateWithoutNavigationInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOfferInput {
  create: UserCreateWithoutOfferInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTrafficInput {
  create: UserCreateWithoutTrafficInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCampaignInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateWithoutDomainInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateWithoutLanderInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateWithoutMainDomainInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
}

input UserCreateWithoutNavigationInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateWithoutOfferInput {
  id: ID
  name: String!
  email: String!
  traffic: TrafficCreateManyWithoutUserInput
  lander: LanderCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

input UserCreateWithoutTrafficInput {
  id: ID
  name: String!
  email: String!
  lander: LanderCreateManyWithoutUserInput
  offer: OfferCreateManyWithoutUserInput
  navigation: NavigationCreateManyWithoutUserInput
  campaign: CampaignCreateManyWithoutUserInput
  domain: DomainCreateManyWithoutUserInput
  mainDomain: MainDomainCreateOneWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredWithoutCampaignInput {
  create: UserCreateWithoutCampaignInput
  update: UserUpdateWithoutCampaignDataInput
  upsert: UserUpsertWithoutCampaignInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutDomainInput {
  create: UserCreateWithoutDomainInput
  update: UserUpdateWithoutDomainDataInput
  upsert: UserUpsertWithoutDomainInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLanderInput {
  create: UserCreateWithoutLanderInput
  update: UserUpdateWithoutLanderDataInput
  upsert: UserUpsertWithoutLanderInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMainDomainInput {
  create: UserCreateWithoutMainDomainInput
  update: UserUpdateWithoutMainDomainDataInput
  upsert: UserUpsertWithoutMainDomainInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNavigationInput {
  create: UserCreateWithoutNavigationInput
  update: UserUpdateWithoutNavigationDataInput
  upsert: UserUpsertWithoutNavigationInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutOfferInput {
  create: UserCreateWithoutOfferInput
  update: UserUpdateWithoutOfferDataInput
  upsert: UserUpsertWithoutOfferInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTrafficInput {
  create: UserCreateWithoutTrafficInput
  update: UserUpdateWithoutTrafficDataInput
  upsert: UserUpsertWithoutTrafficInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCampaignDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateWithoutDomainDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateWithoutLanderDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateWithoutMainDomainDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
}

input UserUpdateWithoutNavigationDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateWithoutOfferDataInput {
  name: String
  email: String
  traffic: TrafficUpdateManyWithoutUserInput
  lander: LanderUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpdateWithoutTrafficDataInput {
  name: String
  email: String
  lander: LanderUpdateManyWithoutUserInput
  offer: OfferUpdateManyWithoutUserInput
  navigation: NavigationUpdateManyWithoutUserInput
  campaign: CampaignUpdateManyWithoutUserInput
  domain: DomainUpdateManyWithoutUserInput
  mainDomain: MainDomainUpdateOneWithoutUserInput
}

input UserUpsertWithoutCampaignInput {
  update: UserUpdateWithoutCampaignDataInput!
  create: UserCreateWithoutCampaignInput!
}

input UserUpsertWithoutDomainInput {
  update: UserUpdateWithoutDomainDataInput!
  create: UserCreateWithoutDomainInput!
}

input UserUpsertWithoutLanderInput {
  update: UserUpdateWithoutLanderDataInput!
  create: UserCreateWithoutLanderInput!
}

input UserUpsertWithoutMainDomainInput {
  update: UserUpdateWithoutMainDomainDataInput!
  create: UserCreateWithoutMainDomainInput!
}

input UserUpsertWithoutNavigationInput {
  update: UserUpdateWithoutNavigationDataInput!
  create: UserCreateWithoutNavigationInput!
}

input UserUpsertWithoutOfferInput {
  update: UserUpdateWithoutOfferDataInput!
  create: UserCreateWithoutOfferInput!
}

input UserUpsertWithoutTrafficInput {
  update: UserUpdateWithoutTrafficDataInput!
  create: UserCreateWithoutTrafficInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  traffic_some: TrafficWhereInput
  lander_some: LanderWhereInput
  offer_some: OfferWhereInput
  navigation_some: NavigationWhereInput
  campaign_some: CampaignWhereInput
  domain_some: DomainWhereInput
  mainDomain: MainDomainWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    