/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Traffic: TrafficObject
      Parameter: ParameterObject
      DefaultParam: DefaultParamObject
      Lander: LanderObject
      Offer: OfferObject
      Navigation: NavigationObject
      Campaign: CampaignObject
      CampNavRows: CampNavRowsObject
      Domain: DomainObject
      MainDomain: MainDomainObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ParameterConnection: ParameterConnectionObject
      ParameterEdge: ParameterEdgeObject
      AggregateParameter: AggregateParameterObject
      DefaultParamConnection: DefaultParamConnectionObject
      DefaultParamEdge: DefaultParamEdgeObject
      AggregateDefaultParam: AggregateDefaultParamObject
      Token: TokenObject
      TokenConnection: TokenConnectionObject
      TokenEdge: TokenEdgeObject
      AggregateToken: AggregateTokenObject
      TrafficConnection: TrafficConnectionObject
      TrafficEdge: TrafficEdgeObject
      AggregateTraffic: AggregateTrafficObject
      LanderConnection: LanderConnectionObject
      LanderEdge: LanderEdgeObject
      AggregateLander: AggregateLanderObject
      OfferConnection: OfferConnectionObject
      OfferEdge: OfferEdgeObject
      AggregateOffer: AggregateOfferObject
      NavigationConnection: NavigationConnectionObject
      NavigationEdge: NavigationEdgeObject
      AggregateNavigation: AggregateNavigationObject
      CampaignConnection: CampaignConnectionObject
      CampaignEdge: CampaignEdgeObject
      AggregateCampaign: AggregateCampaignObject
      CampNavRowsConnection: CampNavRowsConnectionObject
      CampNavRowsEdge: CampNavRowsEdgeObject
      AggregateCampNavRows: AggregateCampNavRowsObject
      DomainConnection: DomainConnectionObject
      DomainEdge: DomainEdgeObject
      AggregateDomain: AggregateDomainObject
      MainDomainConnection: MainDomainConnectionObject
      MainDomainEdge: MainDomainEdgeObject
      AggregateMainDomain: AggregateMainDomainObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ParameterSubscriptionPayload: ParameterSubscriptionPayloadObject
      ParameterPreviousValues: ParameterPreviousValuesObject
      DefaultParamSubscriptionPayload: DefaultParamSubscriptionPayloadObject
      DefaultParamPreviousValues: DefaultParamPreviousValuesObject
      TokenSubscriptionPayload: TokenSubscriptionPayloadObject
      TokenPreviousValues: TokenPreviousValuesObject
      TrafficSubscriptionPayload: TrafficSubscriptionPayloadObject
      TrafficPreviousValues: TrafficPreviousValuesObject
      LanderSubscriptionPayload: LanderSubscriptionPayloadObject
      LanderPreviousValues: LanderPreviousValuesObject
      OfferSubscriptionPayload: OfferSubscriptionPayloadObject
      OfferPreviousValues: OfferPreviousValuesObject
      NavigationSubscriptionPayload: NavigationSubscriptionPayloadObject
      NavigationPreviousValues: NavigationPreviousValuesObject
      CampaignSubscriptionPayload: CampaignSubscriptionPayloadObject
      CampaignPreviousValues: CampaignPreviousValuesObject
      CampNavRowsSubscriptionPayload: CampNavRowsSubscriptionPayloadObject
      CampNavRowsPreviousValues: CampNavRowsPreviousValuesObject
      DomainSubscriptionPayload: DomainSubscriptionPayloadObject
      DomainPreviousValues: DomainPreviousValuesObject
      MainDomainSubscriptionPayload: MainDomainSubscriptionPayloadObject
      MainDomainPreviousValues: MainDomainPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Traffic: TrafficFieldDetails
      Parameter: ParameterFieldDetails
      DefaultParam: DefaultParamFieldDetails
      Lander: LanderFieldDetails
      Offer: OfferFieldDetails
      Navigation: NavigationFieldDetails
      Campaign: CampaignFieldDetails
      CampNavRows: CampNavRowsFieldDetails
      Domain: DomainFieldDetails
      MainDomain: MainDomainFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ParameterConnection: ParameterConnectionFieldDetails
      ParameterEdge: ParameterEdgeFieldDetails
      AggregateParameter: AggregateParameterFieldDetails
      DefaultParamConnection: DefaultParamConnectionFieldDetails
      DefaultParamEdge: DefaultParamEdgeFieldDetails
      AggregateDefaultParam: AggregateDefaultParamFieldDetails
      Token: TokenFieldDetails
      TokenConnection: TokenConnectionFieldDetails
      TokenEdge: TokenEdgeFieldDetails
      AggregateToken: AggregateTokenFieldDetails
      TrafficConnection: TrafficConnectionFieldDetails
      TrafficEdge: TrafficEdgeFieldDetails
      AggregateTraffic: AggregateTrafficFieldDetails
      LanderConnection: LanderConnectionFieldDetails
      LanderEdge: LanderEdgeFieldDetails
      AggregateLander: AggregateLanderFieldDetails
      OfferConnection: OfferConnectionFieldDetails
      OfferEdge: OfferEdgeFieldDetails
      AggregateOffer: AggregateOfferFieldDetails
      NavigationConnection: NavigationConnectionFieldDetails
      NavigationEdge: NavigationEdgeFieldDetails
      AggregateNavigation: AggregateNavigationFieldDetails
      CampaignConnection: CampaignConnectionFieldDetails
      CampaignEdge: CampaignEdgeFieldDetails
      AggregateCampaign: AggregateCampaignFieldDetails
      CampNavRowsConnection: CampNavRowsConnectionFieldDetails
      CampNavRowsEdge: CampNavRowsEdgeFieldDetails
      AggregateCampNavRows: AggregateCampNavRowsFieldDetails
      DomainConnection: DomainConnectionFieldDetails
      DomainEdge: DomainEdgeFieldDetails
      AggregateDomain: AggregateDomainFieldDetails
      MainDomainConnection: MainDomainConnectionFieldDetails
      MainDomainEdge: MainDomainEdgeFieldDetails
      AggregateMainDomain: AggregateMainDomainFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ParameterSubscriptionPayload: ParameterSubscriptionPayloadFieldDetails
      ParameterPreviousValues: ParameterPreviousValuesFieldDetails
      DefaultParamSubscriptionPayload: DefaultParamSubscriptionPayloadFieldDetails
      DefaultParamPreviousValues: DefaultParamPreviousValuesFieldDetails
      TokenSubscriptionPayload: TokenSubscriptionPayloadFieldDetails
      TokenPreviousValues: TokenPreviousValuesFieldDetails
      TrafficSubscriptionPayload: TrafficSubscriptionPayloadFieldDetails
      TrafficPreviousValues: TrafficPreviousValuesFieldDetails
      LanderSubscriptionPayload: LanderSubscriptionPayloadFieldDetails
      LanderPreviousValues: LanderPreviousValuesFieldDetails
      OfferSubscriptionPayload: OfferSubscriptionPayloadFieldDetails
      OfferPreviousValues: OfferPreviousValuesFieldDetails
      NavigationSubscriptionPayload: NavigationSubscriptionPayloadFieldDetails
      NavigationPreviousValues: NavigationPreviousValuesFieldDetails
      CampaignSubscriptionPayload: CampaignSubscriptionPayloadFieldDetails
      CampaignPreviousValues: CampaignPreviousValuesFieldDetails
      CampNavRowsSubscriptionPayload: CampNavRowsSubscriptionPayloadFieldDetails
      CampNavRowsPreviousValues: CampNavRowsPreviousValuesFieldDetails
      DomainSubscriptionPayload: DomainSubscriptionPayloadFieldDetails
      DomainPreviousValues: DomainPreviousValuesFieldDetails
      MainDomainSubscriptionPayload: MainDomainSubscriptionPayloadFieldDetails
      MainDomainPreviousValues: MainDomainPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      TrafficWhereInput: TrafficWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      LanderWhereInput: LanderWhereInputInputObject
      OfferWhereInput: OfferWhereInputInputObject
      NavigationWhereInput: NavigationWhereInputInputObject
      CampaignWhereInput: CampaignWhereInputInputObject
      CampNavRowsWhereInput: CampNavRowsWhereInputInputObject
      DomainWhereInput: DomainWhereInputInputObject
      MainDomainWhereInput: MainDomainWhereInputInputObject
      ParameterWhereInput: ParameterWhereInputInputObject
      DefaultParamWhereInput: DefaultParamWhereInputInputObject
      ParameterWhereUniqueInput: ParameterWhereUniqueInputInputObject
      DefaultParamWhereUniqueInput: DefaultParamWhereUniqueInputInputObject
      TokenWhereUniqueInput: TokenWhereUniqueInputInputObject
      TokenWhereInput: TokenWhereInputInputObject
      TrafficWhereUniqueInput: TrafficWhereUniqueInputInputObject
      LanderWhereUniqueInput: LanderWhereUniqueInputInputObject
      OfferWhereUniqueInput: OfferWhereUniqueInputInputObject
      NavigationWhereUniqueInput: NavigationWhereUniqueInputInputObject
      CampaignWhereUniqueInput: CampaignWhereUniqueInputInputObject
      CampNavRowsWhereUniqueInput: CampNavRowsWhereUniqueInputInputObject
      DomainWhereUniqueInput: DomainWhereUniqueInputInputObject
      MainDomainWhereUniqueInput: MainDomainWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      TrafficCreateManyWithoutUserInput: TrafficCreateManyWithoutUserInputInputObject
      TrafficCreateWithoutUserInput: TrafficCreateWithoutUserInputInputObject
      ParameterCreateManyInput: ParameterCreateManyInputInputObject
      ParameterCreateInput: ParameterCreateInputInputObject
      ParameterCreatetokensInput: ParameterCreatetokensInputInputObject
      DefaultParamCreateManyInput: DefaultParamCreateManyInputInputObject
      DefaultParamCreateInput: DefaultParamCreateInputInputObject
      DefaultParamCreatetokensInput: DefaultParamCreatetokensInputInputObject
      TrafficCreatelockInput: TrafficCreatelockInputInputObject
      LanderCreateManyWithoutUserInput: LanderCreateManyWithoutUserInputInputObject
      LanderCreateWithoutUserInput: LanderCreateWithoutUserInputInputObject
      LanderCreatelockInput: LanderCreatelockInputInputObject
      OfferCreateManyWithoutUserInput: OfferCreateManyWithoutUserInputInputObject
      OfferCreateWithoutUserInput: OfferCreateWithoutUserInputInputObject
      OfferCreatelockInput: OfferCreatelockInputInputObject
      NavigationCreateManyWithoutUserInput: NavigationCreateManyWithoutUserInputInputObject
      NavigationCreateWithoutUserInput: NavigationCreateWithoutUserInputInputObject
      NavigationCreatelockInput: NavigationCreatelockInputInputObject
      CampaignCreateManyWithoutUserInput: CampaignCreateManyWithoutUserInputInputObject
      CampaignCreateWithoutUserInput: CampaignCreateWithoutUserInputInputObject
      CampNavRowsCreateManyInput: CampNavRowsCreateManyInputInputObject
      CampNavRowsCreateInput: CampNavRowsCreateInputInputObject
      DomainCreateManyWithoutUserInput: DomainCreateManyWithoutUserInputInputObject
      DomainCreateWithoutUserInput: DomainCreateWithoutUserInputInputObject
      MainDomainCreateOneWithoutDomainInput: MainDomainCreateOneWithoutDomainInputInputObject
      MainDomainCreateWithoutDomainInput: MainDomainCreateWithoutDomainInputInputObject
      UserCreateOneWithoutMainDomainInput: UserCreateOneWithoutMainDomainInputInputObject
      UserCreateWithoutMainDomainInput: UserCreateWithoutMainDomainInputInputObject
      MainDomainCreateOneWithoutUserInput: MainDomainCreateOneWithoutUserInputInputObject
      MainDomainCreateWithoutUserInput: MainDomainCreateWithoutUserInputInputObject
      DomainCreateOneWithoutMainDomainInput: DomainCreateOneWithoutMainDomainInputInputObject
      DomainCreateWithoutMainDomainInput: DomainCreateWithoutMainDomainInputInputObject
      UserCreateOneWithoutDomainInput: UserCreateOneWithoutDomainInputInputObject
      UserCreateWithoutDomainInput: UserCreateWithoutDomainInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      TrafficUpdateManyWithoutUserInput: TrafficUpdateManyWithoutUserInputInputObject
      TrafficUpdateWithWhereUniqueWithoutUserInput: TrafficUpdateWithWhereUniqueWithoutUserInputInputObject
      TrafficUpdateWithoutUserDataInput: TrafficUpdateWithoutUserDataInputInputObject
      ParameterUpdateManyInput: ParameterUpdateManyInputInputObject
      ParameterUpdateWithWhereUniqueNestedInput: ParameterUpdateWithWhereUniqueNestedInputInputObject
      ParameterUpdateDataInput: ParameterUpdateDataInputInputObject
      ParameterUpdatetokensInput: ParameterUpdatetokensInputInputObject
      ParameterUpsertWithWhereUniqueNestedInput: ParameterUpsertWithWhereUniqueNestedInputInputObject
      ParameterScalarWhereInput: ParameterScalarWhereInputInputObject
      ParameterUpdateManyWithWhereNestedInput: ParameterUpdateManyWithWhereNestedInputInputObject
      ParameterUpdateManyDataInput: ParameterUpdateManyDataInputInputObject
      DefaultParamUpdateManyInput: DefaultParamUpdateManyInputInputObject
      DefaultParamUpdateWithWhereUniqueNestedInput: DefaultParamUpdateWithWhereUniqueNestedInputInputObject
      DefaultParamUpdateDataInput: DefaultParamUpdateDataInputInputObject
      DefaultParamUpdatetokensInput: DefaultParamUpdatetokensInputInputObject
      DefaultParamUpsertWithWhereUniqueNestedInput: DefaultParamUpsertWithWhereUniqueNestedInputInputObject
      DefaultParamScalarWhereInput: DefaultParamScalarWhereInputInputObject
      DefaultParamUpdateManyWithWhereNestedInput: DefaultParamUpdateManyWithWhereNestedInputInputObject
      DefaultParamUpdateManyDataInput: DefaultParamUpdateManyDataInputInputObject
      TrafficUpdatelockInput: TrafficUpdatelockInputInputObject
      TrafficUpsertWithWhereUniqueWithoutUserInput: TrafficUpsertWithWhereUniqueWithoutUserInputInputObject
      TrafficScalarWhereInput: TrafficScalarWhereInputInputObject
      TrafficUpdateManyWithWhereNestedInput: TrafficUpdateManyWithWhereNestedInputInputObject
      TrafficUpdateManyDataInput: TrafficUpdateManyDataInputInputObject
      LanderUpdateManyWithoutUserInput: LanderUpdateManyWithoutUserInputInputObject
      LanderUpdateWithWhereUniqueWithoutUserInput: LanderUpdateWithWhereUniqueWithoutUserInputInputObject
      LanderUpdateWithoutUserDataInput: LanderUpdateWithoutUserDataInputInputObject
      LanderUpdatelockInput: LanderUpdatelockInputInputObject
      LanderUpsertWithWhereUniqueWithoutUserInput: LanderUpsertWithWhereUniqueWithoutUserInputInputObject
      LanderScalarWhereInput: LanderScalarWhereInputInputObject
      LanderUpdateManyWithWhereNestedInput: LanderUpdateManyWithWhereNestedInputInputObject
      LanderUpdateManyDataInput: LanderUpdateManyDataInputInputObject
      OfferUpdateManyWithoutUserInput: OfferUpdateManyWithoutUserInputInputObject
      OfferUpdateWithWhereUniqueWithoutUserInput: OfferUpdateWithWhereUniqueWithoutUserInputInputObject
      OfferUpdateWithoutUserDataInput: OfferUpdateWithoutUserDataInputInputObject
      OfferUpdatelockInput: OfferUpdatelockInputInputObject
      OfferUpsertWithWhereUniqueWithoutUserInput: OfferUpsertWithWhereUniqueWithoutUserInputInputObject
      OfferScalarWhereInput: OfferScalarWhereInputInputObject
      OfferUpdateManyWithWhereNestedInput: OfferUpdateManyWithWhereNestedInputInputObject
      OfferUpdateManyDataInput: OfferUpdateManyDataInputInputObject
      NavigationUpdateManyWithoutUserInput: NavigationUpdateManyWithoutUserInputInputObject
      NavigationUpdateWithWhereUniqueWithoutUserInput: NavigationUpdateWithWhereUniqueWithoutUserInputInputObject
      NavigationUpdateWithoutUserDataInput: NavigationUpdateWithoutUserDataInputInputObject
      NavigationUpdatelockInput: NavigationUpdatelockInputInputObject
      NavigationUpsertWithWhereUniqueWithoutUserInput: NavigationUpsertWithWhereUniqueWithoutUserInputInputObject
      NavigationScalarWhereInput: NavigationScalarWhereInputInputObject
      NavigationUpdateManyWithWhereNestedInput: NavigationUpdateManyWithWhereNestedInputInputObject
      NavigationUpdateManyDataInput: NavigationUpdateManyDataInputInputObject
      CampaignUpdateManyWithoutUserInput: CampaignUpdateManyWithoutUserInputInputObject
      CampaignUpdateWithWhereUniqueWithoutUserInput: CampaignUpdateWithWhereUniqueWithoutUserInputInputObject
      CampaignUpdateWithoutUserDataInput: CampaignUpdateWithoutUserDataInputInputObject
      CampNavRowsUpdateManyInput: CampNavRowsUpdateManyInputInputObject
      CampNavRowsUpdateWithWhereUniqueNestedInput: CampNavRowsUpdateWithWhereUniqueNestedInputInputObject
      CampNavRowsUpdateDataInput: CampNavRowsUpdateDataInputInputObject
      CampNavRowsUpsertWithWhereUniqueNestedInput: CampNavRowsUpsertWithWhereUniqueNestedInputInputObject
      CampNavRowsScalarWhereInput: CampNavRowsScalarWhereInputInputObject
      CampNavRowsUpdateManyWithWhereNestedInput: CampNavRowsUpdateManyWithWhereNestedInputInputObject
      CampNavRowsUpdateManyDataInput: CampNavRowsUpdateManyDataInputInputObject
      CampaignUpsertWithWhereUniqueWithoutUserInput: CampaignUpsertWithWhereUniqueWithoutUserInputInputObject
      CampaignScalarWhereInput: CampaignScalarWhereInputInputObject
      CampaignUpdateManyWithWhereNestedInput: CampaignUpdateManyWithWhereNestedInputInputObject
      CampaignUpdateManyDataInput: CampaignUpdateManyDataInputInputObject
      DomainUpdateManyWithoutUserInput: DomainUpdateManyWithoutUserInputInputObject
      DomainUpdateWithWhereUniqueWithoutUserInput: DomainUpdateWithWhereUniqueWithoutUserInputInputObject
      DomainUpdateWithoutUserDataInput: DomainUpdateWithoutUserDataInputInputObject
      MainDomainUpdateOneWithoutDomainInput: MainDomainUpdateOneWithoutDomainInputInputObject
      MainDomainUpdateWithoutDomainDataInput: MainDomainUpdateWithoutDomainDataInputInputObject
      UserUpdateOneRequiredWithoutMainDomainInput: UserUpdateOneRequiredWithoutMainDomainInputInputObject
      UserUpdateWithoutMainDomainDataInput: UserUpdateWithoutMainDomainDataInputInputObject
      UserUpsertWithoutMainDomainInput: UserUpsertWithoutMainDomainInputInputObject
      MainDomainUpsertWithoutDomainInput: MainDomainUpsertWithoutDomainInputInputObject
      DomainUpsertWithWhereUniqueWithoutUserInput: DomainUpsertWithWhereUniqueWithoutUserInputInputObject
      DomainScalarWhereInput: DomainScalarWhereInputInputObject
      DomainUpdateManyWithWhereNestedInput: DomainUpdateManyWithWhereNestedInputInputObject
      DomainUpdateManyDataInput: DomainUpdateManyDataInputInputObject
      MainDomainUpdateOneWithoutUserInput: MainDomainUpdateOneWithoutUserInputInputObject
      MainDomainUpdateWithoutUserDataInput: MainDomainUpdateWithoutUserDataInputInputObject
      DomainUpdateOneRequiredWithoutMainDomainInput: DomainUpdateOneRequiredWithoutMainDomainInputInputObject
      DomainUpdateWithoutMainDomainDataInput: DomainUpdateWithoutMainDomainDataInputInputObject
      UserUpdateOneRequiredWithoutDomainInput: UserUpdateOneRequiredWithoutDomainInputInputObject
      UserUpdateWithoutDomainDataInput: UserUpdateWithoutDomainDataInputInputObject
      UserUpsertWithoutDomainInput: UserUpsertWithoutDomainInputInputObject
      DomainUpsertWithoutMainDomainInput: DomainUpsertWithoutMainDomainInputInputObject
      MainDomainUpsertWithoutUserInput: MainDomainUpsertWithoutUserInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ParameterUpdateInput: ParameterUpdateInputInputObject
      ParameterUpdateManyMutationInput: ParameterUpdateManyMutationInputInputObject
      DefaultParamUpdateInput: DefaultParamUpdateInputInputObject
      DefaultParamUpdateManyMutationInput: DefaultParamUpdateManyMutationInputInputObject
      TokenCreateInput: TokenCreateInputInputObject
      TokenUpdateInput: TokenUpdateInputInputObject
      TokenUpdateManyMutationInput: TokenUpdateManyMutationInputInputObject
      TrafficCreateInput: TrafficCreateInputInputObject
      UserCreateOneWithoutTrafficInput: UserCreateOneWithoutTrafficInputInputObject
      UserCreateWithoutTrafficInput: UserCreateWithoutTrafficInputInputObject
      TrafficUpdateInput: TrafficUpdateInputInputObject
      UserUpdateOneRequiredWithoutTrafficInput: UserUpdateOneRequiredWithoutTrafficInputInputObject
      UserUpdateWithoutTrafficDataInput: UserUpdateWithoutTrafficDataInputInputObject
      UserUpsertWithoutTrafficInput: UserUpsertWithoutTrafficInputInputObject
      TrafficUpdateManyMutationInput: TrafficUpdateManyMutationInputInputObject
      LanderCreateInput: LanderCreateInputInputObject
      UserCreateOneWithoutLanderInput: UserCreateOneWithoutLanderInputInputObject
      UserCreateWithoutLanderInput: UserCreateWithoutLanderInputInputObject
      LanderUpdateInput: LanderUpdateInputInputObject
      UserUpdateOneRequiredWithoutLanderInput: UserUpdateOneRequiredWithoutLanderInputInputObject
      UserUpdateWithoutLanderDataInput: UserUpdateWithoutLanderDataInputInputObject
      UserUpsertWithoutLanderInput: UserUpsertWithoutLanderInputInputObject
      LanderUpdateManyMutationInput: LanderUpdateManyMutationInputInputObject
      OfferCreateInput: OfferCreateInputInputObject
      UserCreateOneWithoutOfferInput: UserCreateOneWithoutOfferInputInputObject
      UserCreateWithoutOfferInput: UserCreateWithoutOfferInputInputObject
      OfferUpdateInput: OfferUpdateInputInputObject
      UserUpdateOneRequiredWithoutOfferInput: UserUpdateOneRequiredWithoutOfferInputInputObject
      UserUpdateWithoutOfferDataInput: UserUpdateWithoutOfferDataInputInputObject
      UserUpsertWithoutOfferInput: UserUpsertWithoutOfferInputInputObject
      OfferUpdateManyMutationInput: OfferUpdateManyMutationInputInputObject
      NavigationCreateInput: NavigationCreateInputInputObject
      UserCreateOneWithoutNavigationInput: UserCreateOneWithoutNavigationInputInputObject
      UserCreateWithoutNavigationInput: UserCreateWithoutNavigationInputInputObject
      NavigationUpdateInput: NavigationUpdateInputInputObject
      UserUpdateOneRequiredWithoutNavigationInput: UserUpdateOneRequiredWithoutNavigationInputInputObject
      UserUpdateWithoutNavigationDataInput: UserUpdateWithoutNavigationDataInputInputObject
      UserUpsertWithoutNavigationInput: UserUpsertWithoutNavigationInputInputObject
      NavigationUpdateManyMutationInput: NavigationUpdateManyMutationInputInputObject
      CampaignCreateInput: CampaignCreateInputInputObject
      UserCreateOneWithoutCampaignInput: UserCreateOneWithoutCampaignInputInputObject
      UserCreateWithoutCampaignInput: UserCreateWithoutCampaignInputInputObject
      CampaignUpdateInput: CampaignUpdateInputInputObject
      UserUpdateOneRequiredWithoutCampaignInput: UserUpdateOneRequiredWithoutCampaignInputInputObject
      UserUpdateWithoutCampaignDataInput: UserUpdateWithoutCampaignDataInputInputObject
      UserUpsertWithoutCampaignInput: UserUpsertWithoutCampaignInputInputObject
      CampaignUpdateManyMutationInput: CampaignUpdateManyMutationInputInputObject
      CampNavRowsUpdateInput: CampNavRowsUpdateInputInputObject
      CampNavRowsUpdateManyMutationInput: CampNavRowsUpdateManyMutationInputInputObject
      DomainCreateInput: DomainCreateInputInputObject
      DomainUpdateInput: DomainUpdateInputInputObject
      DomainUpdateManyMutationInput: DomainUpdateManyMutationInputInputObject
      MainDomainCreateInput: MainDomainCreateInputInputObject
      MainDomainUpdateInput: MainDomainUpdateInputInputObject
      MainDomainUpdateManyMutationInput: MainDomainUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ParameterSubscriptionWhereInput: ParameterSubscriptionWhereInputInputObject
      DefaultParamSubscriptionWhereInput: DefaultParamSubscriptionWhereInputInputObject
      TokenSubscriptionWhereInput: TokenSubscriptionWhereInputInputObject
      TrafficSubscriptionWhereInput: TrafficSubscriptionWhereInputInputObject
      LanderSubscriptionWhereInput: LanderSubscriptionWhereInputInputObject
      OfferSubscriptionWhereInput: OfferSubscriptionWhereInputInputObject
      NavigationSubscriptionWhereInput: NavigationSubscriptionWhereInputInputObject
      CampaignSubscriptionWhereInput: CampaignSubscriptionWhereInputInputObject
      CampNavRowsSubscriptionWhereInput: CampNavRowsSubscriptionWhereInputInputObject
      DomainSubscriptionWhereInput: DomainSubscriptionWhereInputInputObject
      MainDomainSubscriptionWhereInput: MainDomainSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TrafficOrderByInput: TrafficOrderByInputValues,
    ParameterOrderByInput: ParameterOrderByInputValues,
    DefaultParamOrderByInput: DefaultParamOrderByInputValues,
    LanderOrderByInput: LanderOrderByInputValues,
    OfferOrderByInput: OfferOrderByInputValues,
    NavigationOrderByInput: NavigationOrderByInputValues,
    CampaignOrderByInput: CampaignOrderByInputValues,
    CampNavRowsOrderByInput: CampNavRowsOrderByInputValues,
    DomainOrderByInput: DomainOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    TokenOrderByInput: TokenOrderByInputValues,
    MainDomainOrderByInput: MainDomainOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'parameter', args?: QueryParameterArgs[] | false, alias?: string  } 
  | { name: 'parameters', args?: QueryParametersArgs[] | false, alias?: string  } 
  | { name: 'parametersConnection', args?: QueryParametersConnectionArgs[] | false, alias?: string  } 
  | { name: 'defaultParam', args?: QueryDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'defaultParams', args?: QueryDefaultParamsArgs[] | false, alias?: string  } 
  | { name: 'defaultParamsConnection', args?: QueryDefaultParamsConnectionArgs[] | false, alias?: string  } 
  | { name: 'token', args?: QueryTokenArgs[] | false, alias?: string  } 
  | { name: 'tokens', args?: QueryTokensArgs[] | false, alias?: string  } 
  | { name: 'tokensConnection', args?: QueryTokensConnectionArgs[] | false, alias?: string  } 
  | { name: 'traffic', args?: QueryTrafficArgs[] | false, alias?: string  } 
  | { name: 'traffics', args?: QueryTrafficsArgs[] | false, alias?: string  } 
  | { name: 'trafficsConnection', args?: QueryTrafficsConnectionArgs[] | false, alias?: string  } 
  | { name: 'lander', args?: QueryLanderArgs[] | false, alias?: string  } 
  | { name: 'landers', args?: QueryLandersArgs[] | false, alias?: string  } 
  | { name: 'landersConnection', args?: QueryLandersConnectionArgs[] | false, alias?: string  } 
  | { name: 'offer', args?: QueryOfferArgs[] | false, alias?: string  } 
  | { name: 'offers', args?: QueryOffersArgs[] | false, alias?: string  } 
  | { name: 'offersConnection', args?: QueryOffersConnectionArgs[] | false, alias?: string  } 
  | { name: 'navigation', args?: QueryNavigationArgs[] | false, alias?: string  } 
  | { name: 'navigations', args?: QueryNavigationsArgs[] | false, alias?: string  } 
  | { name: 'navigationsConnection', args?: QueryNavigationsConnectionArgs[] | false, alias?: string  } 
  | { name: 'campaign', args?: QueryCampaignArgs[] | false, alias?: string  } 
  | { name: 'campaigns', args?: QueryCampaignsArgs[] | false, alias?: string  } 
  | { name: 'campaignsConnection', args?: QueryCampaignsConnectionArgs[] | false, alias?: string  } 
  | { name: 'campNavRows', args?: QueryCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'campNavRowses', args?: QueryCampNavRowsesArgs[] | false, alias?: string  } 
  | { name: 'campNavRowsesConnection', args?: QueryCampNavRowsesConnectionArgs[] | false, alias?: string  } 
  | { name: 'domain', args?: QueryDomainArgs[] | false, alias?: string  } 
  | { name: 'domains', args?: QueryDomainsArgs[] | false, alias?: string  } 
  | { name: 'domainsConnection', args?: QueryDomainsConnectionArgs[] | false, alias?: string  } 
  | { name: 'mainDomain', args?: QueryMainDomainArgs[] | false, alias?: string  } 
  | { name: 'mainDomains', args?: QueryMainDomainsArgs[] | false, alias?: string  } 
  | { name: 'mainDomainsConnection', args?: QueryMainDomainsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'parameter'
  | 'parameters'
  | 'parametersConnection'
  | 'defaultParam'
  | 'defaultParams'
  | 'defaultParamsConnection'
  | 'token'
  | 'tokens'
  | 'tokensConnection'
  | 'traffic'
  | 'traffics'
  | 'trafficsConnection'
  | 'lander'
  | 'landers'
  | 'landersConnection'
  | 'offer'
  | 'offers'
  | 'offersConnection'
  | 'navigation'
  | 'navigations'
  | 'navigationsConnection'
  | 'campaign'
  | 'campaigns'
  | 'campaignsConnection'
  | 'campNavRows'
  | 'campNavRowses'
  | 'campNavRowsesConnection'
  | 'domain'
  | 'domains'
  | 'domainsConnection'
  | 'mainDomain'
  | 'mainDomains'
  | 'mainDomainsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryParameterArgs =
  | 'where'
type QueryParametersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryParametersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDefaultParamArgs =
  | 'where'
type QueryDefaultParamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDefaultParamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTokenArgs =
  | 'where'
type QueryTokensArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTokensConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTrafficArgs =
  | 'where'
type QueryTrafficsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTrafficsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLanderArgs =
  | 'where'
type QueryLandersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLandersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOfferArgs =
  | 'where'
type QueryOffersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOffersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNavigationArgs =
  | 'where'
type QueryNavigationsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNavigationsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCampaignArgs =
  | 'where'
type QueryCampaignsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCampaignsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCampNavRowsArgs =
  | 'where'
type QueryCampNavRowsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCampNavRowsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDomainArgs =
  | 'where'
type QueryDomainsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDomainsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMainDomainArgs =
  | 'where'
type QueryMainDomainsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMainDomainsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  parameter: {
    type: 'Parameter'
    args: Record<QueryParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ParameterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter | null> | prisma.Parameter | null
  }
  parameters: {
    type: 'Parameter'
    args: Record<QueryParametersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ParameterWhereInput | null, orderBy?: prisma.ParameterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter[]> | prisma.Parameter[]
  }
  parametersConnection: {
    type: 'ParameterConnection'
    args: Record<QueryParametersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ParameterWhereInput | null, orderBy?: prisma.ParameterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ParameterConnection> | prisma.ParameterConnection
  }
  defaultParam: {
    type: 'DefaultParam'
    args: Record<QueryDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DefaultParamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam | null> | prisma.DefaultParam | null
  }
  defaultParams: {
    type: 'DefaultParam'
    args: Record<QueryDefaultParamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DefaultParamWhereInput | null, orderBy?: prisma.DefaultParamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam[]> | prisma.DefaultParam[]
  }
  defaultParamsConnection: {
    type: 'DefaultParamConnection'
    args: Record<QueryDefaultParamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DefaultParamWhereInput | null, orderBy?: prisma.DefaultParamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParamConnection> | prisma.DefaultParamConnection
  }
  token: {
    type: 'Token'
    args: Record<QueryTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token | null> | prisma.Token | null
  }
  tokens: {
    type: 'Token'
    args: Record<QueryTokensArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TokenWhereInput | null, orderBy?: prisma.TokenOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token[]> | prisma.Token[]
  }
  tokensConnection: {
    type: 'TokenConnection'
    args: Record<QueryTokensConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TokenWhereInput | null, orderBy?: prisma.TokenOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TokenConnection> | prisma.TokenConnection
  }
  traffic: {
    type: 'Traffic'
    args: Record<QueryTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TrafficWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic | null> | prisma.Traffic | null
  }
  traffics: {
    type: 'Traffic'
    args: Record<QueryTrafficsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrafficWhereInput | null, orderBy?: prisma.TrafficOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic[]> | prisma.Traffic[]
  }
  trafficsConnection: {
    type: 'TrafficConnection'
    args: Record<QueryTrafficsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrafficWhereInput | null, orderBy?: prisma.TrafficOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrafficConnection> | prisma.TrafficConnection
  }
  lander: {
    type: 'Lander'
    args: Record<QueryLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LanderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander | null> | prisma.Lander | null
  }
  landers: {
    type: 'Lander'
    args: Record<QueryLandersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LanderWhereInput | null, orderBy?: prisma.LanderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander[]> | prisma.Lander[]
  }
  landersConnection: {
    type: 'LanderConnection'
    args: Record<QueryLandersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LanderWhereInput | null, orderBy?: prisma.LanderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LanderConnection> | prisma.LanderConnection
  }
  offer: {
    type: 'Offer'
    args: Record<QueryOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OfferWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer | null> | prisma.Offer | null
  }
  offers: {
    type: 'Offer'
    args: Record<QueryOffersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OfferWhereInput | null, orderBy?: prisma.OfferOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer[]> | prisma.Offer[]
  }
  offersConnection: {
    type: 'OfferConnection'
    args: Record<QueryOffersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OfferWhereInput | null, orderBy?: prisma.OfferOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OfferConnection> | prisma.OfferConnection
  }
  navigation: {
    type: 'Navigation'
    args: Record<QueryNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NavigationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation | null> | prisma.Navigation | null
  }
  navigations: {
    type: 'Navigation'
    args: Record<QueryNavigationsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NavigationWhereInput | null, orderBy?: prisma.NavigationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation[]> | prisma.Navigation[]
  }
  navigationsConnection: {
    type: 'NavigationConnection'
    args: Record<QueryNavigationsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NavigationWhereInput | null, orderBy?: prisma.NavigationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NavigationConnection> | prisma.NavigationConnection
  }
  campaign: {
    type: 'Campaign'
    args: Record<QueryCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CampaignWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign | null> | prisma.Campaign | null
  }
  campaigns: {
    type: 'Campaign'
    args: Record<QueryCampaignsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CampaignWhereInput | null, orderBy?: prisma.CampaignOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign[]> | prisma.Campaign[]
  }
  campaignsConnection: {
    type: 'CampaignConnection'
    args: Record<QueryCampaignsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CampaignWhereInput | null, orderBy?: prisma.CampaignOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampaignConnection> | prisma.CampaignConnection
  }
  campNavRows: {
    type: 'CampNavRows'
    args: Record<QueryCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CampNavRowsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows | null> | prisma.CampNavRows | null
  }
  campNavRowses: {
    type: 'CampNavRows'
    args: Record<QueryCampNavRowsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CampNavRowsWhereInput | null, orderBy?: prisma.CampNavRowsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows[]> | prisma.CampNavRows[]
  }
  campNavRowsesConnection: {
    type: 'CampNavRowsConnection'
    args: Record<QueryCampNavRowsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CampNavRowsWhereInput | null, orderBy?: prisma.CampNavRowsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRowsConnection> | prisma.CampNavRowsConnection
  }
  domain: {
    type: 'Domain'
    args: Record<QueryDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain | null> | prisma.Domain | null
  }
  domains: {
    type: 'Domain'
    args: Record<QueryDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DomainWhereInput | null, orderBy?: prisma.DomainOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain[]> | prisma.Domain[]
  }
  domainsConnection: {
    type: 'DomainConnection'
    args: Record<QueryDomainsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DomainWhereInput | null, orderBy?: prisma.DomainOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DomainConnection> | prisma.DomainConnection
  }
  mainDomain: {
    type: 'MainDomain'
    args: Record<QueryMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MainDomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
  mainDomains: {
    type: 'MainDomain'
    args: Record<QueryMainDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MainDomainWhereInput | null, orderBy?: prisma.MainDomainOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain[]> | prisma.MainDomain[]
  }
  mainDomainsConnection: {
    type: 'MainDomainConnection'
    args: Record<QueryMainDomainsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MainDomainWhereInput | null, orderBy?: prisma.MainDomainOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomainConnection> | prisma.MainDomainConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'traffic', args?: UserTrafficArgs[] | false, alias?: string  } 
  | { name: 'lander', args?: UserLanderArgs[] | false, alias?: string  } 
  | { name: 'offer', args?: UserOfferArgs[] | false, alias?: string  } 
  | { name: 'navigation', args?: UserNavigationArgs[] | false, alias?: string  } 
  | { name: 'campaign', args?: UserCampaignArgs[] | false, alias?: string  } 
  | { name: 'domain', args?: UserDomainArgs[] | false, alias?: string  } 
  | { name: 'mainDomain', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'email'
  | 'traffic'
  | 'lander'
  | 'offer'
  | 'navigation'
  | 'campaign'
  | 'domain'
  | 'mainDomain'


type UserTrafficArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserLanderArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserOfferArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserNavigationArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCampaignArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserDomainArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  traffic: {
    type: 'Traffic'
    args: Record<UserTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: TrafficWhereInput | null, orderBy?: prisma.TrafficOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic[]> | prisma.Traffic[]
  }
  lander: {
    type: 'Lander'
    args: Record<UserLanderArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: LanderWhereInput | null, orderBy?: prisma.LanderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander[]> | prisma.Lander[]
  }
  offer: {
    type: 'Offer'
    args: Record<UserOfferArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: OfferWhereInput | null, orderBy?: prisma.OfferOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer[]> | prisma.Offer[]
  }
  navigation: {
    type: 'Navigation'
    args: Record<UserNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: NavigationWhereInput | null, orderBy?: prisma.NavigationOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation[]> | prisma.Navigation[]
  }
  campaign: {
    type: 'Campaign'
    args: Record<UserCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CampaignWhereInput | null, orderBy?: prisma.CampaignOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign[]> | prisma.Campaign[]
  }
  domain: {
    type: 'Domain'
    args: Record<UserDomainArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: DomainWhereInput | null, orderBy?: prisma.DomainOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain[]> | prisma.Domain[]
  }
  mainDomain: {
    type: 'MainDomain'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
}
  

// Types for Traffic

type TrafficObject =
  | TrafficFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: TrafficDataArgs[] | false, alias?: string  } 
  | { name: 'default_data', args?: TrafficDefault_dataArgs[] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type TrafficFields =
  | 'id'
  | 'name'
  | 'userUnique'
  | 'user'
  | 'data'
  | 'default_data'
  | 'lock'


type TrafficDataArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type TrafficDefault_dataArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TrafficFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Traffic">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  data: {
    type: 'Parameter'
    args: Record<TrafficDataArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Traffic">,
      args: { where?: ParameterWhereInput | null, orderBy?: prisma.ParameterOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter[]> | prisma.Parameter[]
  }
  default_data: {
    type: 'DefaultParam'
    args: Record<TrafficDefault_dataArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Traffic">,
      args: { where?: DefaultParamWhereInput | null, orderBy?: prisma.DefaultParamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam[]> | prisma.DefaultParam[]
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for Parameter

type ParameterObject =
  | ParameterFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tokens', args?: [] | false, alias?: string  } 
  | { name: 'track', args?: [] | false, alias?: string  } 

type ParameterFields =
  | 'id'
  | 'tokens'
  | 'track'



  

export interface ParameterFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tokens: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  track: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DefaultParam

type DefaultParamObject =
  | DefaultParamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'head', args?: [] | false, alias?: string  } 
  | { name: 'default', args?: [] | false, alias?: string  } 
  | { name: 'tokens', args?: [] | false, alias?: string  } 
  | { name: 'track', args?: [] | false, alias?: string  } 

type DefaultParamFields =
  | 'id'
  | 'head'
  | 'default'
  | 'tokens'
  | 'track'



  

export interface DefaultParamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  head: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  default: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tokens: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  track: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Lander

type LanderObject =
  | LanderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type LanderFields =
  | 'id'
  | 'name'
  | 'url'
  | 'userUnique'
  | 'user'
  | 'lock'



  

export interface LanderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Lander">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for Offer

type OfferObject =
  | OfferFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type OfferFields =
  | 'id'
  | 'name'
  | 'url'
  | 'userUnique'
  | 'user'
  | 'lock'



  

export interface OfferFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Offer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for Navigation

type NavigationObject =
  | NavigationFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type NavigationFields =
  | 'id'
  | 'name'
  | 'userUnique'
  | 'user'
  | 'data'
  | 'lock'



  

export interface NavigationFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Navigation">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for Campaign

type CampaignObject =
  | CampaignFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'refresh', args?: [] | false, alias?: string  } 
  | { name: 'totalPercent', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'traffic', args?: [] | false, alias?: string  } 
  | { name: 'landerRow', args?: CampaignLanderRowArgs[] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type CampaignFields =
  | 'id'
  | 'name'
  | 'refresh'
  | 'totalPercent'
  | 'url'
  | 'traffic'
  | 'landerRow'
  | 'userUnique'
  | 'user'


type CampaignLanderRowArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CampaignFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  refresh: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalPercent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  traffic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  landerRow: {
    type: 'CampNavRows'
    args: Record<CampaignLanderRowArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Campaign">,
      args: { where?: CampNavRowsWhereInput | null, orderBy?: prisma.CampNavRowsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows[]> | prisma.CampNavRows[]
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Campaign">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for CampNavRows

type CampNavRowsObject =
  | CampNavRowsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'percent', args?: [] | false, alias?: string  } 
  | { name: 'landerName', args?: [] | false, alias?: string  } 

type CampNavRowsFields =
  | 'id'
  | 'percent'
  | 'landerName'



  

export interface CampNavRowsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  percent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  landerName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Domain

type DomainObject =
  | DomainFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'MainDomain', args?: [] | false, alias?: string  } 

type DomainFields =
  | 'id'
  | 'url'
  | 'userUnique'
  | 'user'
  | 'MainDomain'



  

export interface DomainFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Domain">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  MainDomain: {
    type: 'MainDomain'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Domain">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
}
  

// Types for MainDomain

type MainDomainObject =
  | MainDomainFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'domain', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type MainDomainFields =
  | 'id'
  | 'userUnique'
  | 'domain'
  | 'user'



  

export interface MainDomainFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  domain: {
    type: 'Domain'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomain">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain> | prisma.Domain
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomain">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ParameterConnection

type ParameterConnectionObject =
  | ParameterConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ParameterConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ParameterConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ParameterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ParameterEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ParameterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ParameterEdge[]> | prisma.ParameterEdge[]
  }
  aggregate: {
    type: 'AggregateParameter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ParameterConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateParameter> | prisma.AggregateParameter
  }
}
  

// Types for ParameterEdge

type ParameterEdgeObject =
  | ParameterEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ParameterEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ParameterEdgeFieldDetails {
  node: {
    type: 'Parameter'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ParameterEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter> | prisma.Parameter
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateParameter

type AggregateParameterObject =
  | AggregateParameterFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateParameterFields =
  | 'count'



  

export interface AggregateParameterFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DefaultParamConnection

type DefaultParamConnectionObject =
  | DefaultParamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DefaultParamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DefaultParamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DefaultParamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DefaultParamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DefaultParamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParamEdge[]> | prisma.DefaultParamEdge[]
  }
  aggregate: {
    type: 'AggregateDefaultParam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DefaultParamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDefaultParam> | prisma.AggregateDefaultParam
  }
}
  

// Types for DefaultParamEdge

type DefaultParamEdgeObject =
  | DefaultParamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DefaultParamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DefaultParamEdgeFieldDetails {
  node: {
    type: 'DefaultParam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DefaultParamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam> | prisma.DefaultParam
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDefaultParam

type AggregateDefaultParamObject =
  | AggregateDefaultParamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDefaultParamFields =
  | 'count'



  

export interface AggregateDefaultParamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Token

type TokenObject =
  | TokenFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'parameter', args?: [] | false, alias?: string  } 
  | { name: 'placeholder', args?: [] | false, alias?: string  } 

type TokenFields =
  | 'id'
  | 'name'
  | 'parameter'
  | 'placeholder'



  

export interface TokenFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parameter: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  placeholder: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TokenConnection

type TokenConnectionObject =
  | TokenConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TokenConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TokenConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TokenEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TokenEdge[]> | prisma.TokenEdge[]
  }
  aggregate: {
    type: 'AggregateToken'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateToken> | prisma.AggregateToken
  }
}
  

// Types for TokenEdge

type TokenEdgeObject =
  | TokenEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TokenEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TokenEdgeFieldDetails {
  node: {
    type: 'Token'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TokenEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token> | prisma.Token
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateToken

type AggregateTokenObject =
  | AggregateTokenFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTokenFields =
  | 'count'



  

export interface AggregateTokenFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TrafficConnection

type TrafficConnectionObject =
  | TrafficConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TrafficConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TrafficConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrafficConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TrafficEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TrafficConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrafficEdge[]> | prisma.TrafficEdge[]
  }
  aggregate: {
    type: 'AggregateTraffic'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrafficConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTraffic> | prisma.AggregateTraffic
  }
}
  

// Types for TrafficEdge

type TrafficEdgeObject =
  | TrafficEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TrafficEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TrafficEdgeFieldDetails {
  node: {
    type: 'Traffic'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrafficEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic> | prisma.Traffic
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTraffic

type AggregateTrafficObject =
  | AggregateTrafficFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTrafficFields =
  | 'count'



  

export interface AggregateTrafficFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LanderConnection

type LanderConnectionObject =
  | LanderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LanderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LanderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LanderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LanderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LanderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LanderEdge[]> | prisma.LanderEdge[]
  }
  aggregate: {
    type: 'AggregateLander'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LanderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLander> | prisma.AggregateLander
  }
}
  

// Types for LanderEdge

type LanderEdgeObject =
  | LanderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LanderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LanderEdgeFieldDetails {
  node: {
    type: 'Lander'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LanderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander> | prisma.Lander
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLander

type AggregateLanderObject =
  | AggregateLanderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLanderFields =
  | 'count'



  

export interface AggregateLanderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OfferConnection

type OfferConnectionObject =
  | OfferConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OfferConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OfferConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OfferConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OfferEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OfferConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OfferEdge[]> | prisma.OfferEdge[]
  }
  aggregate: {
    type: 'AggregateOffer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OfferConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOffer> | prisma.AggregateOffer
  }
}
  

// Types for OfferEdge

type OfferEdgeObject =
  | OfferEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OfferEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OfferEdgeFieldDetails {
  node: {
    type: 'Offer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OfferEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer> | prisma.Offer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOffer

type AggregateOfferObject =
  | AggregateOfferFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOfferFields =
  | 'count'



  

export interface AggregateOfferFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NavigationConnection

type NavigationConnectionObject =
  | NavigationConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NavigationConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NavigationConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NavigationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NavigationEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NavigationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NavigationEdge[]> | prisma.NavigationEdge[]
  }
  aggregate: {
    type: 'AggregateNavigation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NavigationConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNavigation> | prisma.AggregateNavigation
  }
}
  

// Types for NavigationEdge

type NavigationEdgeObject =
  | NavigationEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NavigationEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NavigationEdgeFieldDetails {
  node: {
    type: 'Navigation'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NavigationEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation> | prisma.Navigation
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNavigation

type AggregateNavigationObject =
  | AggregateNavigationFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNavigationFields =
  | 'count'



  

export interface AggregateNavigationFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CampaignConnection

type CampaignConnectionObject =
  | CampaignConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CampaignConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CampaignConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampaignConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CampaignEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CampaignConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampaignEdge[]> | prisma.CampaignEdge[]
  }
  aggregate: {
    type: 'AggregateCampaign'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampaignConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCampaign> | prisma.AggregateCampaign
  }
}
  

// Types for CampaignEdge

type CampaignEdgeObject =
  | CampaignEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CampaignEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CampaignEdgeFieldDetails {
  node: {
    type: 'Campaign'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampaignEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign> | prisma.Campaign
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCampaign

type AggregateCampaignObject =
  | AggregateCampaignFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCampaignFields =
  | 'count'



  

export interface AggregateCampaignFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CampNavRowsConnection

type CampNavRowsConnectionObject =
  | CampNavRowsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CampNavRowsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CampNavRowsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampNavRowsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CampNavRowsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CampNavRowsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRowsEdge[]> | prisma.CampNavRowsEdge[]
  }
  aggregate: {
    type: 'AggregateCampNavRows'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampNavRowsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCampNavRows> | prisma.AggregateCampNavRows
  }
}
  

// Types for CampNavRowsEdge

type CampNavRowsEdgeObject =
  | CampNavRowsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CampNavRowsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CampNavRowsEdgeFieldDetails {
  node: {
    type: 'CampNavRows'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampNavRowsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows> | prisma.CampNavRows
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCampNavRows

type AggregateCampNavRowsObject =
  | AggregateCampNavRowsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCampNavRowsFields =
  | 'count'



  

export interface AggregateCampNavRowsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DomainConnection

type DomainConnectionObject =
  | DomainConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DomainConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DomainConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DomainEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DomainEdge[]> | prisma.DomainEdge[]
  }
  aggregate: {
    type: 'AggregateDomain'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDomain> | prisma.AggregateDomain
  }
}
  

// Types for DomainEdge

type DomainEdgeObject =
  | DomainEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DomainEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DomainEdgeFieldDetails {
  node: {
    type: 'Domain'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DomainEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain> | prisma.Domain
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDomain

type AggregateDomainObject =
  | AggregateDomainFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDomainFields =
  | 'count'



  

export interface AggregateDomainFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MainDomainConnection

type MainDomainConnectionObject =
  | MainDomainConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MainDomainConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MainDomainConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MainDomainEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomainEdge[]> | prisma.MainDomainEdge[]
  }
  aggregate: {
    type: 'AggregateMainDomain'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomainConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMainDomain> | prisma.AggregateMainDomain
  }
}
  

// Types for MainDomainEdge

type MainDomainEdgeObject =
  | MainDomainEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MainDomainEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MainDomainEdgeFieldDetails {
  node: {
    type: 'MainDomain'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomainEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain> | prisma.MainDomain
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMainDomain

type AggregateMainDomainObject =
  | AggregateMainDomainFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMainDomainFields =
  | 'count'



  

export interface AggregateMainDomainFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createParameter', args?: MutationCreateParameterArgs[] | false, alias?: string  } 
  | { name: 'updateParameter', args?: MutationUpdateParameterArgs[] | false, alias?: string  } 
  | { name: 'updateManyParameters', args?: MutationUpdateManyParametersArgs[] | false, alias?: string  } 
  | { name: 'upsertParameter', args?: MutationUpsertParameterArgs[] | false, alias?: string  } 
  | { name: 'deleteParameter', args?: MutationDeleteParameterArgs[] | false, alias?: string  } 
  | { name: 'deleteManyParameters', args?: MutationDeleteManyParametersArgs[] | false, alias?: string  } 
  | { name: 'createDefaultParam', args?: MutationCreateDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'updateDefaultParam', args?: MutationUpdateDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'updateManyDefaultParams', args?: MutationUpdateManyDefaultParamsArgs[] | false, alias?: string  } 
  | { name: 'upsertDefaultParam', args?: MutationUpsertDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'deleteDefaultParam', args?: MutationDeleteDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDefaultParams', args?: MutationDeleteManyDefaultParamsArgs[] | false, alias?: string  } 
  | { name: 'createToken', args?: MutationCreateTokenArgs[] | false, alias?: string  } 
  | { name: 'updateToken', args?: MutationUpdateTokenArgs[] | false, alias?: string  } 
  | { name: 'updateManyTokens', args?: MutationUpdateManyTokensArgs[] | false, alias?: string  } 
  | { name: 'upsertToken', args?: MutationUpsertTokenArgs[] | false, alias?: string  } 
  | { name: 'deleteToken', args?: MutationDeleteTokenArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTokens', args?: MutationDeleteManyTokensArgs[] | false, alias?: string  } 
  | { name: 'createTraffic', args?: MutationCreateTrafficArgs[] | false, alias?: string  } 
  | { name: 'updateTraffic', args?: MutationUpdateTrafficArgs[] | false, alias?: string  } 
  | { name: 'updateManyTraffics', args?: MutationUpdateManyTrafficsArgs[] | false, alias?: string  } 
  | { name: 'upsertTraffic', args?: MutationUpsertTrafficArgs[] | false, alias?: string  } 
  | { name: 'deleteTraffic', args?: MutationDeleteTrafficArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTraffics', args?: MutationDeleteManyTrafficsArgs[] | false, alias?: string  } 
  | { name: 'createLander', args?: MutationCreateLanderArgs[] | false, alias?: string  } 
  | { name: 'updateLander', args?: MutationUpdateLanderArgs[] | false, alias?: string  } 
  | { name: 'updateManyLanders', args?: MutationUpdateManyLandersArgs[] | false, alias?: string  } 
  | { name: 'upsertLander', args?: MutationUpsertLanderArgs[] | false, alias?: string  } 
  | { name: 'deleteLander', args?: MutationDeleteLanderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLanders', args?: MutationDeleteManyLandersArgs[] | false, alias?: string  } 
  | { name: 'createOffer', args?: MutationCreateOfferArgs[] | false, alias?: string  } 
  | { name: 'updateOffer', args?: MutationUpdateOfferArgs[] | false, alias?: string  } 
  | { name: 'updateManyOffers', args?: MutationUpdateManyOffersArgs[] | false, alias?: string  } 
  | { name: 'upsertOffer', args?: MutationUpsertOfferArgs[] | false, alias?: string  } 
  | { name: 'deleteOffer', args?: MutationDeleteOfferArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOffers', args?: MutationDeleteManyOffersArgs[] | false, alias?: string  } 
  | { name: 'createNavigation', args?: MutationCreateNavigationArgs[] | false, alias?: string  } 
  | { name: 'updateNavigation', args?: MutationUpdateNavigationArgs[] | false, alias?: string  } 
  | { name: 'updateManyNavigations', args?: MutationUpdateManyNavigationsArgs[] | false, alias?: string  } 
  | { name: 'upsertNavigation', args?: MutationUpsertNavigationArgs[] | false, alias?: string  } 
  | { name: 'deleteNavigation', args?: MutationDeleteNavigationArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNavigations', args?: MutationDeleteManyNavigationsArgs[] | false, alias?: string  } 
  | { name: 'createCampaign', args?: MutationCreateCampaignArgs[] | false, alias?: string  } 
  | { name: 'updateCampaign', args?: MutationUpdateCampaignArgs[] | false, alias?: string  } 
  | { name: 'updateManyCampaigns', args?: MutationUpdateManyCampaignsArgs[] | false, alias?: string  } 
  | { name: 'upsertCampaign', args?: MutationUpsertCampaignArgs[] | false, alias?: string  } 
  | { name: 'deleteCampaign', args?: MutationDeleteCampaignArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCampaigns', args?: MutationDeleteManyCampaignsArgs[] | false, alias?: string  } 
  | { name: 'createCampNavRows', args?: MutationCreateCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'updateCampNavRows', args?: MutationUpdateCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'updateManyCampNavRowses', args?: MutationUpdateManyCampNavRowsesArgs[] | false, alias?: string  } 
  | { name: 'upsertCampNavRows', args?: MutationUpsertCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'deleteCampNavRows', args?: MutationDeleteCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCampNavRowses', args?: MutationDeleteManyCampNavRowsesArgs[] | false, alias?: string  } 
  | { name: 'createDomain', args?: MutationCreateDomainArgs[] | false, alias?: string  } 
  | { name: 'updateDomain', args?: MutationUpdateDomainArgs[] | false, alias?: string  } 
  | { name: 'updateManyDomains', args?: MutationUpdateManyDomainsArgs[] | false, alias?: string  } 
  | { name: 'upsertDomain', args?: MutationUpsertDomainArgs[] | false, alias?: string  } 
  | { name: 'deleteDomain', args?: MutationDeleteDomainArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDomains', args?: MutationDeleteManyDomainsArgs[] | false, alias?: string  } 
  | { name: 'createMainDomain', args?: MutationCreateMainDomainArgs[] | false, alias?: string  } 
  | { name: 'updateMainDomain', args?: MutationUpdateMainDomainArgs[] | false, alias?: string  } 
  | { name: 'updateManyMainDomains', args?: MutationUpdateManyMainDomainsArgs[] | false, alias?: string  } 
  | { name: 'upsertMainDomain', args?: MutationUpsertMainDomainArgs[] | false, alias?: string  } 
  | { name: 'deleteMainDomain', args?: MutationDeleteMainDomainArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMainDomains', args?: MutationDeleteManyMainDomainsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createParameter'
  | 'updateParameter'
  | 'updateManyParameters'
  | 'upsertParameter'
  | 'deleteParameter'
  | 'deleteManyParameters'
  | 'createDefaultParam'
  | 'updateDefaultParam'
  | 'updateManyDefaultParams'
  | 'upsertDefaultParam'
  | 'deleteDefaultParam'
  | 'deleteManyDefaultParams'
  | 'createToken'
  | 'updateToken'
  | 'updateManyTokens'
  | 'upsertToken'
  | 'deleteToken'
  | 'deleteManyTokens'
  | 'createTraffic'
  | 'updateTraffic'
  | 'updateManyTraffics'
  | 'upsertTraffic'
  | 'deleteTraffic'
  | 'deleteManyTraffics'
  | 'createLander'
  | 'updateLander'
  | 'updateManyLanders'
  | 'upsertLander'
  | 'deleteLander'
  | 'deleteManyLanders'
  | 'createOffer'
  | 'updateOffer'
  | 'updateManyOffers'
  | 'upsertOffer'
  | 'deleteOffer'
  | 'deleteManyOffers'
  | 'createNavigation'
  | 'updateNavigation'
  | 'updateManyNavigations'
  | 'upsertNavigation'
  | 'deleteNavigation'
  | 'deleteManyNavigations'
  | 'createCampaign'
  | 'updateCampaign'
  | 'updateManyCampaigns'
  | 'upsertCampaign'
  | 'deleteCampaign'
  | 'deleteManyCampaigns'
  | 'createCampNavRows'
  | 'updateCampNavRows'
  | 'updateManyCampNavRowses'
  | 'upsertCampNavRows'
  | 'deleteCampNavRows'
  | 'deleteManyCampNavRowses'
  | 'createDomain'
  | 'updateDomain'
  | 'updateManyDomains'
  | 'upsertDomain'
  | 'deleteDomain'
  | 'deleteManyDomains'
  | 'createMainDomain'
  | 'updateMainDomain'
  | 'updateManyMainDomains'
  | 'upsertMainDomain'
  | 'deleteMainDomain'
  | 'deleteManyMainDomains'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateParameterArgs =
  | 'data'
type MutationUpdateParameterArgs =
  | 'data'
  | 'where'
type MutationUpdateManyParametersArgs =
  | 'data'
  | 'where'
type MutationUpsertParameterArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteParameterArgs =
  | 'where'
type MutationDeleteManyParametersArgs =
  | 'where'
type MutationCreateDefaultParamArgs =
  | 'data'
type MutationUpdateDefaultParamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDefaultParamsArgs =
  | 'data'
  | 'where'
type MutationUpsertDefaultParamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDefaultParamArgs =
  | 'where'
type MutationDeleteManyDefaultParamsArgs =
  | 'where'
type MutationCreateTokenArgs =
  | 'data'
type MutationUpdateTokenArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTokensArgs =
  | 'data'
  | 'where'
type MutationUpsertTokenArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTokenArgs =
  | 'where'
type MutationDeleteManyTokensArgs =
  | 'where'
type MutationCreateTrafficArgs =
  | 'data'
type MutationUpdateTrafficArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTrafficsArgs =
  | 'data'
  | 'where'
type MutationUpsertTrafficArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTrafficArgs =
  | 'where'
type MutationDeleteManyTrafficsArgs =
  | 'where'
type MutationCreateLanderArgs =
  | 'data'
type MutationUpdateLanderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLandersArgs =
  | 'data'
  | 'where'
type MutationUpsertLanderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLanderArgs =
  | 'where'
type MutationDeleteManyLandersArgs =
  | 'where'
type MutationCreateOfferArgs =
  | 'data'
type MutationUpdateOfferArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOffersArgs =
  | 'data'
  | 'where'
type MutationUpsertOfferArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOfferArgs =
  | 'where'
type MutationDeleteManyOffersArgs =
  | 'where'
type MutationCreateNavigationArgs =
  | 'data'
type MutationUpdateNavigationArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNavigationsArgs =
  | 'data'
  | 'where'
type MutationUpsertNavigationArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNavigationArgs =
  | 'where'
type MutationDeleteManyNavigationsArgs =
  | 'where'
type MutationCreateCampaignArgs =
  | 'data'
type MutationUpdateCampaignArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCampaignsArgs =
  | 'data'
  | 'where'
type MutationUpsertCampaignArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCampaignArgs =
  | 'where'
type MutationDeleteManyCampaignsArgs =
  | 'where'
type MutationCreateCampNavRowsArgs =
  | 'data'
type MutationUpdateCampNavRowsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCampNavRowsesArgs =
  | 'data'
  | 'where'
type MutationUpsertCampNavRowsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCampNavRowsArgs =
  | 'where'
type MutationDeleteManyCampNavRowsesArgs =
  | 'where'
type MutationCreateDomainArgs =
  | 'data'
type MutationUpdateDomainArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDomainsArgs =
  | 'data'
  | 'where'
type MutationUpsertDomainArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDomainArgs =
  | 'where'
type MutationDeleteManyDomainsArgs =
  | 'where'
type MutationCreateMainDomainArgs =
  | 'data'
type MutationUpdateMainDomainArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMainDomainsArgs =
  | 'data'
  | 'where'
type MutationUpsertMainDomainArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMainDomainArgs =
  | 'where'
type MutationDeleteManyMainDomainsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createParameter: {
    type: 'Parameter'
    args: Record<MutationCreateParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ParameterCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter> | prisma.Parameter
  }
  updateParameter: {
    type: 'Parameter'
    args: Record<MutationUpdateParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ParameterUpdateInput, where: ParameterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter | null> | prisma.Parameter | null
  }
  updateManyParameters: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyParametersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ParameterUpdateManyMutationInput, where?: ParameterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertParameter: {
    type: 'Parameter'
    args: Record<MutationUpsertParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ParameterWhereUniqueInput, create: ParameterCreateInput, update: ParameterUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter> | prisma.Parameter
  }
  deleteParameter: {
    type: 'Parameter'
    args: Record<MutationDeleteParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ParameterWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter | null> | prisma.Parameter | null
  }
  deleteManyParameters: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyParametersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ParameterWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDefaultParam: {
    type: 'DefaultParam'
    args: Record<MutationCreateDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DefaultParamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam> | prisma.DefaultParam
  }
  updateDefaultParam: {
    type: 'DefaultParam'
    args: Record<MutationUpdateDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DefaultParamUpdateInput, where: DefaultParamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam | null> | prisma.DefaultParam | null
  }
  updateManyDefaultParams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDefaultParamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DefaultParamUpdateManyMutationInput, where?: DefaultParamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDefaultParam: {
    type: 'DefaultParam'
    args: Record<MutationUpsertDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DefaultParamWhereUniqueInput, create: DefaultParamCreateInput, update: DefaultParamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam> | prisma.DefaultParam
  }
  deleteDefaultParam: {
    type: 'DefaultParam'
    args: Record<MutationDeleteDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DefaultParamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam | null> | prisma.DefaultParam | null
  }
  deleteManyDefaultParams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDefaultParamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DefaultParamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createToken: {
    type: 'Token'
    args: Record<MutationCreateTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TokenCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token> | prisma.Token
  }
  updateToken: {
    type: 'Token'
    args: Record<MutationUpdateTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TokenUpdateInput, where: TokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token | null> | prisma.Token | null
  }
  updateManyTokens: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTokensArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TokenUpdateManyMutationInput, where?: TokenWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertToken: {
    type: 'Token'
    args: Record<MutationUpsertTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TokenWhereUniqueInput, create: TokenCreateInput, update: TokenUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token> | prisma.Token
  }
  deleteToken: {
    type: 'Token'
    args: Record<MutationDeleteTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token | null> | prisma.Token | null
  }
  deleteManyTokens: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTokensArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TokenWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTraffic: {
    type: 'Traffic'
    args: Record<MutationCreateTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrafficCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic> | prisma.Traffic
  }
  updateTraffic: {
    type: 'Traffic'
    args: Record<MutationUpdateTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrafficUpdateInput, where: TrafficWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic | null> | prisma.Traffic | null
  }
  updateManyTraffics: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTrafficsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrafficUpdateManyMutationInput, where?: TrafficWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTraffic: {
    type: 'Traffic'
    args: Record<MutationUpsertTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrafficWhereUniqueInput, create: TrafficCreateInput, update: TrafficUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic> | prisma.Traffic
  }
  deleteTraffic: {
    type: 'Traffic'
    args: Record<MutationDeleteTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrafficWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic | null> | prisma.Traffic | null
  }
  deleteManyTraffics: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTrafficsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TrafficWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLander: {
    type: 'Lander'
    args: Record<MutationCreateLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LanderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander> | prisma.Lander
  }
  updateLander: {
    type: 'Lander'
    args: Record<MutationUpdateLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LanderUpdateInput, where: LanderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander | null> | prisma.Lander | null
  }
  updateManyLanders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLandersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LanderUpdateManyMutationInput, where?: LanderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLander: {
    type: 'Lander'
    args: Record<MutationUpsertLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LanderWhereUniqueInput, create: LanderCreateInput, update: LanderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander> | prisma.Lander
  }
  deleteLander: {
    type: 'Lander'
    args: Record<MutationDeleteLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LanderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander | null> | prisma.Lander | null
  }
  deleteManyLanders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLandersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LanderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOffer: {
    type: 'Offer'
    args: Record<MutationCreateOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OfferCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer> | prisma.Offer
  }
  updateOffer: {
    type: 'Offer'
    args: Record<MutationUpdateOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OfferUpdateInput, where: OfferWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer | null> | prisma.Offer | null
  }
  updateManyOffers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOffersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OfferUpdateManyMutationInput, where?: OfferWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOffer: {
    type: 'Offer'
    args: Record<MutationUpsertOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OfferWhereUniqueInput, create: OfferCreateInput, update: OfferUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer> | prisma.Offer
  }
  deleteOffer: {
    type: 'Offer'
    args: Record<MutationDeleteOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OfferWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer | null> | prisma.Offer | null
  }
  deleteManyOffers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOffersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OfferWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNavigation: {
    type: 'Navigation'
    args: Record<MutationCreateNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NavigationCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation> | prisma.Navigation
  }
  updateNavigation: {
    type: 'Navigation'
    args: Record<MutationUpdateNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NavigationUpdateInput, where: NavigationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation | null> | prisma.Navigation | null
  }
  updateManyNavigations: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNavigationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NavigationUpdateManyMutationInput, where?: NavigationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNavigation: {
    type: 'Navigation'
    args: Record<MutationUpsertNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NavigationWhereUniqueInput, create: NavigationCreateInput, update: NavigationUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation> | prisma.Navigation
  }
  deleteNavigation: {
    type: 'Navigation'
    args: Record<MutationDeleteNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NavigationWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation | null> | prisma.Navigation | null
  }
  deleteManyNavigations: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNavigationsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NavigationWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCampaign: {
    type: 'Campaign'
    args: Record<MutationCreateCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampaignCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign> | prisma.Campaign
  }
  updateCampaign: {
    type: 'Campaign'
    args: Record<MutationUpdateCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampaignUpdateInput, where: CampaignWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign | null> | prisma.Campaign | null
  }
  updateManyCampaigns: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCampaignsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampaignUpdateManyMutationInput, where?: CampaignWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCampaign: {
    type: 'Campaign'
    args: Record<MutationUpsertCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CampaignWhereUniqueInput, create: CampaignCreateInput, update: CampaignUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign> | prisma.Campaign
  }
  deleteCampaign: {
    type: 'Campaign'
    args: Record<MutationDeleteCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CampaignWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign | null> | prisma.Campaign | null
  }
  deleteManyCampaigns: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCampaignsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CampaignWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCampNavRows: {
    type: 'CampNavRows'
    args: Record<MutationCreateCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampNavRowsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows> | prisma.CampNavRows
  }
  updateCampNavRows: {
    type: 'CampNavRows'
    args: Record<MutationUpdateCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampNavRowsUpdateInput, where: CampNavRowsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows | null> | prisma.CampNavRows | null
  }
  updateManyCampNavRowses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCampNavRowsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CampNavRowsUpdateManyMutationInput, where?: CampNavRowsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCampNavRows: {
    type: 'CampNavRows'
    args: Record<MutationUpsertCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CampNavRowsWhereUniqueInput, create: CampNavRowsCreateInput, update: CampNavRowsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows> | prisma.CampNavRows
  }
  deleteCampNavRows: {
    type: 'CampNavRows'
    args: Record<MutationDeleteCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CampNavRowsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows | null> | prisma.CampNavRows | null
  }
  deleteManyCampNavRowses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCampNavRowsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CampNavRowsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDomain: {
    type: 'Domain'
    args: Record<MutationCreateDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DomainCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain> | prisma.Domain
  }
  updateDomain: {
    type: 'Domain'
    args: Record<MutationUpdateDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DomainUpdateInput, where: DomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain | null> | prisma.Domain | null
  }
  updateManyDomains: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DomainUpdateManyMutationInput, where?: DomainWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDomain: {
    type: 'Domain'
    args: Record<MutationUpsertDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DomainWhereUniqueInput, create: DomainCreateInput, update: DomainUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain> | prisma.Domain
  }
  deleteDomain: {
    type: 'Domain'
    args: Record<MutationDeleteDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain | null> | prisma.Domain | null
  }
  deleteManyDomains: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DomainWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMainDomain: {
    type: 'MainDomain'
    args: Record<MutationCreateMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainDomainCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain> | prisma.MainDomain
  }
  updateMainDomain: {
    type: 'MainDomain'
    args: Record<MutationUpdateMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainDomainUpdateInput, where: MainDomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
  updateManyMainDomains: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMainDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MainDomainUpdateManyMutationInput, where?: MainDomainWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMainDomain: {
    type: 'MainDomain'
    args: Record<MutationUpsertMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MainDomainWhereUniqueInput, create: MainDomainCreateInput, update: MainDomainUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain> | prisma.MainDomain
  }
  deleteMainDomain: {
    type: 'MainDomain'
    args: Record<MutationDeleteMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MainDomainWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
  deleteManyMainDomains: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMainDomainsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MainDomainWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'parameter', args?: SubscriptionParameterArgs[] | false, alias?: string  } 
  | { name: 'defaultParam', args?: SubscriptionDefaultParamArgs[] | false, alias?: string  } 
  | { name: 'token', args?: SubscriptionTokenArgs[] | false, alias?: string  } 
  | { name: 'traffic', args?: SubscriptionTrafficArgs[] | false, alias?: string  } 
  | { name: 'lander', args?: SubscriptionLanderArgs[] | false, alias?: string  } 
  | { name: 'offer', args?: SubscriptionOfferArgs[] | false, alias?: string  } 
  | { name: 'navigation', args?: SubscriptionNavigationArgs[] | false, alias?: string  } 
  | { name: 'campaign', args?: SubscriptionCampaignArgs[] | false, alias?: string  } 
  | { name: 'campNavRows', args?: SubscriptionCampNavRowsArgs[] | false, alias?: string  } 
  | { name: 'domain', args?: SubscriptionDomainArgs[] | false, alias?: string  } 
  | { name: 'mainDomain', args?: SubscriptionMainDomainArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'parameter'
  | 'defaultParam'
  | 'token'
  | 'traffic'
  | 'lander'
  | 'offer'
  | 'navigation'
  | 'campaign'
  | 'campNavRows'
  | 'domain'
  | 'mainDomain'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionParameterArgs =
  | 'where'
type SubscriptionDefaultParamArgs =
  | 'where'
type SubscriptionTokenArgs =
  | 'where'
type SubscriptionTrafficArgs =
  | 'where'
type SubscriptionLanderArgs =
  | 'where'
type SubscriptionOfferArgs =
  | 'where'
type SubscriptionNavigationArgs =
  | 'where'
type SubscriptionCampaignArgs =
  | 'where'
type SubscriptionCampNavRowsArgs =
  | 'where'
type SubscriptionDomainArgs =
  | 'where'
type SubscriptionMainDomainArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  parameter: {
    type: 'ParameterSubscriptionPayload'
    args: Record<SubscriptionParameterArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ParameterSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ParameterSubscriptionPayload | null> | prisma.ParameterSubscriptionPayload | null
  }
  defaultParam: {
    type: 'DefaultParamSubscriptionPayload'
    args: Record<SubscriptionDefaultParamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DefaultParamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParamSubscriptionPayload | null> | prisma.DefaultParamSubscriptionPayload | null
  }
  token: {
    type: 'TokenSubscriptionPayload'
    args: Record<SubscriptionTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TokenSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TokenSubscriptionPayload | null> | prisma.TokenSubscriptionPayload | null
  }
  traffic: {
    type: 'TrafficSubscriptionPayload'
    args: Record<SubscriptionTrafficArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TrafficSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrafficSubscriptionPayload | null> | prisma.TrafficSubscriptionPayload | null
  }
  lander: {
    type: 'LanderSubscriptionPayload'
    args: Record<SubscriptionLanderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LanderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LanderSubscriptionPayload | null> | prisma.LanderSubscriptionPayload | null
  }
  offer: {
    type: 'OfferSubscriptionPayload'
    args: Record<SubscriptionOfferArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OfferSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OfferSubscriptionPayload | null> | prisma.OfferSubscriptionPayload | null
  }
  navigation: {
    type: 'NavigationSubscriptionPayload'
    args: Record<SubscriptionNavigationArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NavigationSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NavigationSubscriptionPayload | null> | prisma.NavigationSubscriptionPayload | null
  }
  campaign: {
    type: 'CampaignSubscriptionPayload'
    args: Record<SubscriptionCampaignArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CampaignSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampaignSubscriptionPayload | null> | prisma.CampaignSubscriptionPayload | null
  }
  campNavRows: {
    type: 'CampNavRowsSubscriptionPayload'
    args: Record<SubscriptionCampNavRowsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CampNavRowsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRowsSubscriptionPayload | null> | prisma.CampNavRowsSubscriptionPayload | null
  }
  domain: {
    type: 'DomainSubscriptionPayload'
    args: Record<SubscriptionDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DomainSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DomainSubscriptionPayload | null> | prisma.DomainSubscriptionPayload | null
  }
  mainDomain: {
    type: 'MainDomainSubscriptionPayload'
    args: Record<SubscriptionMainDomainArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MainDomainSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomainSubscriptionPayload | null> | prisma.MainDomainSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'email'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ParameterSubscriptionPayload

type ParameterSubscriptionPayloadObject =
  | ParameterSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ParameterSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ParameterSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ParameterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Parameter'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ParameterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Parameter | null> | prisma.Parameter | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ParameterPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ParameterSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ParameterPreviousValues | null> | prisma.ParameterPreviousValues | null
  }
}
  

// Types for ParameterPreviousValues

type ParameterPreviousValuesObject =
  | ParameterPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tokens', args?: [] | false, alias?: string  } 
  | { name: 'track', args?: [] | false, alias?: string  } 

type ParameterPreviousValuesFields =
  | 'id'
  | 'tokens'
  | 'track'



  

export interface ParameterPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tokens: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  track: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DefaultParamSubscriptionPayload

type DefaultParamSubscriptionPayloadObject =
  | DefaultParamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DefaultParamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DefaultParamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DefaultParamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'DefaultParam'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DefaultParamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParam | null> | prisma.DefaultParam | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DefaultParamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DefaultParamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DefaultParamPreviousValues | null> | prisma.DefaultParamPreviousValues | null
  }
}
  

// Types for DefaultParamPreviousValues

type DefaultParamPreviousValuesObject =
  | DefaultParamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'head', args?: [] | false, alias?: string  } 
  | { name: 'default', args?: [] | false, alias?: string  } 
  | { name: 'tokens', args?: [] | false, alias?: string  } 
  | { name: 'track', args?: [] | false, alias?: string  } 

type DefaultParamPreviousValuesFields =
  | 'id'
  | 'head'
  | 'default'
  | 'tokens'
  | 'track'



  

export interface DefaultParamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  head: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  default: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tokens: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  track: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TokenSubscriptionPayload

type TokenSubscriptionPayloadObject =
  | TokenSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TokenSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TokenSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Token'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Token | null> | prisma.Token | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TokenPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TokenPreviousValues | null> | prisma.TokenPreviousValues | null
  }
}
  

// Types for TokenPreviousValues

type TokenPreviousValuesObject =
  | TokenPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'parameter', args?: [] | false, alias?: string  } 
  | { name: 'placeholder', args?: [] | false, alias?: string  } 

type TokenPreviousValuesFields =
  | 'id'
  | 'name'
  | 'parameter'
  | 'placeholder'



  

export interface TokenPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  parameter: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  placeholder: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TrafficSubscriptionPayload

type TrafficSubscriptionPayloadObject =
  | TrafficSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TrafficSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TrafficSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrafficSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Traffic'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrafficSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Traffic | null> | prisma.Traffic | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TrafficPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrafficSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrafficPreviousValues | null> | prisma.TrafficPreviousValues | null
  }
}
  

// Types for TrafficPreviousValues

type TrafficPreviousValuesObject =
  | TrafficPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type TrafficPreviousValuesFields =
  | 'id'
  | 'name'
  | 'userUnique'
  | 'lock'



  

export interface TrafficPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for LanderSubscriptionPayload

type LanderSubscriptionPayloadObject =
  | LanderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LanderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LanderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LanderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Lander'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LanderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Lander | null> | prisma.Lander | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LanderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LanderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LanderPreviousValues | null> | prisma.LanderPreviousValues | null
  }
}
  

// Types for LanderPreviousValues

type LanderPreviousValuesObject =
  | LanderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type LanderPreviousValuesFields =
  | 'id'
  | 'name'
  | 'url'
  | 'userUnique'
  | 'lock'



  

export interface LanderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for OfferSubscriptionPayload

type OfferSubscriptionPayloadObject =
  | OfferSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OfferSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OfferSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OfferSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Offer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OfferSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Offer | null> | prisma.Offer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OfferPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OfferSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OfferPreviousValues | null> | prisma.OfferPreviousValues | null
  }
}
  

// Types for OfferPreviousValues

type OfferPreviousValuesObject =
  | OfferPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type OfferPreviousValuesFields =
  | 'id'
  | 'name'
  | 'url'
  | 'userUnique'
  | 'lock'



  

export interface OfferPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for NavigationSubscriptionPayload

type NavigationSubscriptionPayloadObject =
  | NavigationSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NavigationSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NavigationSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NavigationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Navigation'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NavigationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Navigation | null> | prisma.Navigation | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NavigationPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NavigationSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NavigationPreviousValues | null> | prisma.NavigationPreviousValues | null
  }
}
  

// Types for NavigationPreviousValues

type NavigationPreviousValuesObject =
  | NavigationPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 
  | { name: 'data', args?: [] | false, alias?: string  } 
  | { name: 'lock', args?: [] | false, alias?: string  } 

type NavigationPreviousValuesFields =
  | 'id'
  | 'name'
  | 'userUnique'
  | 'data'
  | 'lock'



  

export interface NavigationPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  data: {
    type: 'Json'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lock: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  

// Types for CampaignSubscriptionPayload

type CampaignSubscriptionPayloadObject =
  | CampaignSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CampaignSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CampaignSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampaignSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Campaign'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CampaignSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Campaign | null> | prisma.Campaign | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CampaignPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CampaignSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampaignPreviousValues | null> | prisma.CampaignPreviousValues | null
  }
}
  

// Types for CampaignPreviousValues

type CampaignPreviousValuesObject =
  | CampaignPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'refresh', args?: [] | false, alias?: string  } 
  | { name: 'totalPercent', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'traffic', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 

type CampaignPreviousValuesFields =
  | 'id'
  | 'name'
  | 'refresh'
  | 'totalPercent'
  | 'url'
  | 'traffic'
  | 'userUnique'



  

export interface CampaignPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  refresh: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalPercent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  traffic: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CampNavRowsSubscriptionPayload

type CampNavRowsSubscriptionPayloadObject =
  | CampNavRowsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CampNavRowsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CampNavRowsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CampNavRowsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CampNavRows'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CampNavRowsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRows | null> | prisma.CampNavRows | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CampNavRowsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CampNavRowsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CampNavRowsPreviousValues | null> | prisma.CampNavRowsPreviousValues | null
  }
}
  

// Types for CampNavRowsPreviousValues

type CampNavRowsPreviousValuesObject =
  | CampNavRowsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'percent', args?: [] | false, alias?: string  } 
  | { name: 'landerName', args?: [] | false, alias?: string  } 

type CampNavRowsPreviousValuesFields =
  | 'id'
  | 'percent'
  | 'landerName'



  

export interface CampNavRowsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  percent: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  landerName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DomainSubscriptionPayload

type DomainSubscriptionPayloadObject =
  | DomainSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DomainSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DomainSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Domain'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Domain | null> | prisma.Domain | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DomainPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DomainPreviousValues | null> | prisma.DomainPreviousValues | null
  }
}
  

// Types for DomainPreviousValues

type DomainPreviousValuesObject =
  | DomainPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 

type DomainPreviousValuesFields =
  | 'id'
  | 'url'
  | 'userUnique'



  

export interface DomainPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MainDomainSubscriptionPayload

type MainDomainSubscriptionPayloadObject =
  | MainDomainSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MainDomainSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MainDomainSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MainDomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'MainDomain'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MainDomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomain | null> | prisma.MainDomain | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MainDomainPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MainDomainSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MainDomainPreviousValues | null> | prisma.MainDomainPreviousValues | null
  }
}
  

// Types for MainDomainPreviousValues

type MainDomainPreviousValuesObject =
  | MainDomainPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'userUnique', args?: [] | false, alias?: string  } 

type MainDomainPreviousValuesFields =
  | 'id'
  | 'userUnique'



  

export interface MainDomainPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userUnique: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface TrafficWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  data_some?: ParameterWhereInput | null
  default_data_some?: DefaultParamWhereInput | null
  AND?: TrafficWhereInput[]
}
export type TrafficWhereInputInputObject =
  | Extract<keyof TrafficWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'data_some', alias?: string  } 
  | { name: 'default_data_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  traffic_some?: TrafficWhereInput | null
  lander_some?: LanderWhereInput | null
  offer_some?: OfferWhereInput | null
  navigation_some?: NavigationWhereInput | null
  campaign_some?: CampaignWhereInput | null
  domain_some?: DomainWhereInput | null
  mainDomain?: MainDomainWhereInput | null
  AND?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'traffic_some', alias?: string  } 
  | { name: 'lander_some', alias?: string  } 
  | { name: 'offer_some', alias?: string  } 
  | { name: 'navigation_some', alias?: string  } 
  | { name: 'campaign_some', alias?: string  } 
  | { name: 'domain_some', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface LanderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  AND?: LanderWhereInput[]
}
export type LanderWhereInputInputObject =
  | Extract<keyof LanderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface OfferWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  AND?: OfferWhereInput[]
}
export type OfferWhereInputInputObject =
  | Extract<keyof OfferWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface NavigationWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  AND?: NavigationWhereInput[]
}
export type NavigationWhereInputInputObject =
  | Extract<keyof NavigationWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CampaignWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  refresh?: string | null
  refresh_not?: string | null
  refresh_in?: string[]
  refresh_not_in?: string[]
  refresh_lt?: string | null
  refresh_lte?: string | null
  refresh_gt?: string | null
  refresh_gte?: string | null
  refresh_contains?: string | null
  refresh_not_contains?: string | null
  refresh_starts_with?: string | null
  refresh_not_starts_with?: string | null
  refresh_ends_with?: string | null
  refresh_not_ends_with?: string | null
  totalPercent?: number | null
  totalPercent_not?: number | null
  totalPercent_in?: number[]
  totalPercent_not_in?: number[]
  totalPercent_lt?: number | null
  totalPercent_lte?: number | null
  totalPercent_gt?: number | null
  totalPercent_gte?: number | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  traffic?: string | null
  traffic_not?: string | null
  traffic_in?: string[]
  traffic_not_in?: string[]
  traffic_lt?: string | null
  traffic_lte?: string | null
  traffic_gt?: string | null
  traffic_gte?: string | null
  traffic_contains?: string | null
  traffic_not_contains?: string | null
  traffic_starts_with?: string | null
  traffic_not_starts_with?: string | null
  traffic_ends_with?: string | null
  traffic_not_ends_with?: string | null
  landerRow_some?: CampNavRowsWhereInput | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  AND?: CampaignWhereInput[]
}
export type CampaignWhereInputInputObject =
  | Extract<keyof CampaignWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'refresh_not', alias?: string  } 
  | { name: 'refresh_in', alias?: string  } 
  | { name: 'refresh_not_in', alias?: string  } 
  | { name: 'refresh_lt', alias?: string  } 
  | { name: 'refresh_lte', alias?: string  } 
  | { name: 'refresh_gt', alias?: string  } 
  | { name: 'refresh_gte', alias?: string  } 
  | { name: 'refresh_contains', alias?: string  } 
  | { name: 'refresh_not_contains', alias?: string  } 
  | { name: 'refresh_starts_with', alias?: string  } 
  | { name: 'refresh_not_starts_with', alias?: string  } 
  | { name: 'refresh_ends_with', alias?: string  } 
  | { name: 'refresh_not_ends_with', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'totalPercent_not', alias?: string  } 
  | { name: 'totalPercent_in', alias?: string  } 
  | { name: 'totalPercent_not_in', alias?: string  } 
  | { name: 'totalPercent_lt', alias?: string  } 
  | { name: 'totalPercent_lte', alias?: string  } 
  | { name: 'totalPercent_gt', alias?: string  } 
  | { name: 'totalPercent_gte', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'traffic_not', alias?: string  } 
  | { name: 'traffic_in', alias?: string  } 
  | { name: 'traffic_not_in', alias?: string  } 
  | { name: 'traffic_lt', alias?: string  } 
  | { name: 'traffic_lte', alias?: string  } 
  | { name: 'traffic_gt', alias?: string  } 
  | { name: 'traffic_gte', alias?: string  } 
  | { name: 'traffic_contains', alias?: string  } 
  | { name: 'traffic_not_contains', alias?: string  } 
  | { name: 'traffic_starts_with', alias?: string  } 
  | { name: 'traffic_not_starts_with', alias?: string  } 
  | { name: 'traffic_ends_with', alias?: string  } 
  | { name: 'traffic_not_ends_with', alias?: string  } 
  | { name: 'landerRow_some', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CampNavRowsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  percent?: number | null
  percent_not?: number | null
  percent_in?: number[]
  percent_not_in?: number[]
  percent_lt?: number | null
  percent_lte?: number | null
  percent_gt?: number | null
  percent_gte?: number | null
  landerName?: string | null
  landerName_not?: string | null
  landerName_in?: string[]
  landerName_not_in?: string[]
  landerName_lt?: string | null
  landerName_lte?: string | null
  landerName_gt?: string | null
  landerName_gte?: string | null
  landerName_contains?: string | null
  landerName_not_contains?: string | null
  landerName_starts_with?: string | null
  landerName_not_starts_with?: string | null
  landerName_ends_with?: string | null
  landerName_not_ends_with?: string | null
  AND?: CampNavRowsWhereInput[]
}
export type CampNavRowsWhereInputInputObject =
  | Extract<keyof CampNavRowsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'percent_not', alias?: string  } 
  | { name: 'percent_in', alias?: string  } 
  | { name: 'percent_not_in', alias?: string  } 
  | { name: 'percent_lt', alias?: string  } 
  | { name: 'percent_lte', alias?: string  } 
  | { name: 'percent_gt', alias?: string  } 
  | { name: 'percent_gte', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  | { name: 'landerName_not', alias?: string  } 
  | { name: 'landerName_in', alias?: string  } 
  | { name: 'landerName_not_in', alias?: string  } 
  | { name: 'landerName_lt', alias?: string  } 
  | { name: 'landerName_lte', alias?: string  } 
  | { name: 'landerName_gt', alias?: string  } 
  | { name: 'landerName_gte', alias?: string  } 
  | { name: 'landerName_contains', alias?: string  } 
  | { name: 'landerName_not_contains', alias?: string  } 
  | { name: 'landerName_starts_with', alias?: string  } 
  | { name: 'landerName_not_starts_with', alias?: string  } 
  | { name: 'landerName_ends_with', alias?: string  } 
  | { name: 'landerName_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DomainWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  user?: UserWhereInput | null
  MainDomain?: MainDomainWhereInput | null
  AND?: DomainWhereInput[]
}
export type DomainWhereInputInputObject =
  | Extract<keyof DomainWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'MainDomain', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MainDomainWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  domain?: DomainWhereInput | null
  user?: UserWhereInput | null
  AND?: MainDomainWhereInput[]
}
export type MainDomainWhereInputInputObject =
  | Extract<keyof MainDomainWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ParameterWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  track?: boolean | null
  track_not?: boolean | null
  AND?: ParameterWhereInput[]
}
export type ParameterWhereInputInputObject =
  | Extract<keyof ParameterWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'track', alias?: string  } 
  | { name: 'track_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DefaultParamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  head?: string | null
  head_not?: string | null
  head_in?: string[]
  head_not_in?: string[]
  head_lt?: string | null
  head_lte?: string | null
  head_gt?: string | null
  head_gte?: string | null
  head_contains?: string | null
  head_not_contains?: string | null
  head_starts_with?: string | null
  head_not_starts_with?: string | null
  head_ends_with?: string | null
  head_not_ends_with?: string | null
  default?: string | null
  default_not?: string | null
  default_in?: string[]
  default_not_in?: string[]
  default_lt?: string | null
  default_lte?: string | null
  default_gt?: string | null
  default_gte?: string | null
  default_contains?: string | null
  default_not_contains?: string | null
  default_starts_with?: string | null
  default_not_starts_with?: string | null
  default_ends_with?: string | null
  default_not_ends_with?: string | null
  track?: boolean | null
  track_not?: boolean | null
  AND?: DefaultParamWhereInput[]
}
export type DefaultParamWhereInputInputObject =
  | Extract<keyof DefaultParamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'head', alias?: string  } 
  | { name: 'head_not', alias?: string  } 
  | { name: 'head_in', alias?: string  } 
  | { name: 'head_not_in', alias?: string  } 
  | { name: 'head_lt', alias?: string  } 
  | { name: 'head_lte', alias?: string  } 
  | { name: 'head_gt', alias?: string  } 
  | { name: 'head_gte', alias?: string  } 
  | { name: 'head_contains', alias?: string  } 
  | { name: 'head_not_contains', alias?: string  } 
  | { name: 'head_starts_with', alias?: string  } 
  | { name: 'head_not_starts_with', alias?: string  } 
  | { name: 'head_ends_with', alias?: string  } 
  | { name: 'head_not_ends_with', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'default_not', alias?: string  } 
  | { name: 'default_in', alias?: string  } 
  | { name: 'default_not_in', alias?: string  } 
  | { name: 'default_lt', alias?: string  } 
  | { name: 'default_lte', alias?: string  } 
  | { name: 'default_gt', alias?: string  } 
  | { name: 'default_gte', alias?: string  } 
  | { name: 'default_contains', alias?: string  } 
  | { name: 'default_not_contains', alias?: string  } 
  | { name: 'default_starts_with', alias?: string  } 
  | { name: 'default_not_starts_with', alias?: string  } 
  | { name: 'default_ends_with', alias?: string  } 
  | { name: 'default_not_ends_with', alias?: string  } 
  | { name: 'track', alias?: string  } 
  | { name: 'track_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ParameterWhereUniqueInput {
  id?: string | null
}
export type ParameterWhereUniqueInputInputObject =
  | Extract<keyof ParameterWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DefaultParamWhereUniqueInput {
  id?: string | null
}
export type DefaultParamWhereUniqueInputInputObject =
  | Extract<keyof DefaultParamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TokenWhereUniqueInput {
  id?: string | null
}
export type TokenWhereUniqueInputInputObject =
  | Extract<keyof TokenWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TokenWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  parameter?: string | null
  parameter_not?: string | null
  parameter_in?: string[]
  parameter_not_in?: string[]
  parameter_lt?: string | null
  parameter_lte?: string | null
  parameter_gt?: string | null
  parameter_gte?: string | null
  parameter_contains?: string | null
  parameter_not_contains?: string | null
  parameter_starts_with?: string | null
  parameter_not_starts_with?: string | null
  parameter_ends_with?: string | null
  parameter_not_ends_with?: string | null
  placeholder?: string | null
  placeholder_not?: string | null
  placeholder_in?: string[]
  placeholder_not_in?: string[]
  placeholder_lt?: string | null
  placeholder_lte?: string | null
  placeholder_gt?: string | null
  placeholder_gte?: string | null
  placeholder_contains?: string | null
  placeholder_not_contains?: string | null
  placeholder_starts_with?: string | null
  placeholder_not_starts_with?: string | null
  placeholder_ends_with?: string | null
  placeholder_not_ends_with?: string | null
  AND?: TokenWhereInput[]
}
export type TokenWhereInputInputObject =
  | Extract<keyof TokenWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'parameter', alias?: string  } 
  | { name: 'parameter_not', alias?: string  } 
  | { name: 'parameter_in', alias?: string  } 
  | { name: 'parameter_not_in', alias?: string  } 
  | { name: 'parameter_lt', alias?: string  } 
  | { name: 'parameter_lte', alias?: string  } 
  | { name: 'parameter_gt', alias?: string  } 
  | { name: 'parameter_gte', alias?: string  } 
  | { name: 'parameter_contains', alias?: string  } 
  | { name: 'parameter_not_contains', alias?: string  } 
  | { name: 'parameter_starts_with', alias?: string  } 
  | { name: 'parameter_not_starts_with', alias?: string  } 
  | { name: 'parameter_ends_with', alias?: string  } 
  | { name: 'parameter_not_ends_with', alias?: string  } 
  | { name: 'placeholder', alias?: string  } 
  | { name: 'placeholder_not', alias?: string  } 
  | { name: 'placeholder_in', alias?: string  } 
  | { name: 'placeholder_not_in', alias?: string  } 
  | { name: 'placeholder_lt', alias?: string  } 
  | { name: 'placeholder_lte', alias?: string  } 
  | { name: 'placeholder_gt', alias?: string  } 
  | { name: 'placeholder_gte', alias?: string  } 
  | { name: 'placeholder_contains', alias?: string  } 
  | { name: 'placeholder_not_contains', alias?: string  } 
  | { name: 'placeholder_starts_with', alias?: string  } 
  | { name: 'placeholder_not_starts_with', alias?: string  } 
  | { name: 'placeholder_ends_with', alias?: string  } 
  | { name: 'placeholder_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TrafficWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type TrafficWhereUniqueInputInputObject =
  | Extract<keyof TrafficWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface LanderWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type LanderWhereUniqueInputInputObject =
  | Extract<keyof LanderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface OfferWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type OfferWhereUniqueInputInputObject =
  | Extract<keyof OfferWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface NavigationWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type NavigationWhereUniqueInputInputObject =
  | Extract<keyof NavigationWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface CampaignWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type CampaignWhereUniqueInputInputObject =
  | Extract<keyof CampaignWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface CampNavRowsWhereUniqueInput {
  id?: string | null
}
export type CampNavRowsWhereUniqueInputInputObject =
  | Extract<keyof CampNavRowsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DomainWhereUniqueInput {
  id?: string | null
  url?: string | null
  userUnique?: string | null
}
export type DomainWhereUniqueInputInputObject =
  | Extract<keyof DomainWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface MainDomainWhereUniqueInput {
  id?: string | null
  userUnique?: string | null
}
export type MainDomainWhereUniqueInputInputObject =
  | Extract<keyof MainDomainWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface TrafficCreateManyWithoutUserInput {
  create?: TrafficCreateWithoutUserInput[]
  connect?: TrafficWhereUniqueInput[]
}
export type TrafficCreateManyWithoutUserInputInputObject =
  | Extract<keyof TrafficCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TrafficCreateWithoutUserInput {
  id?: string | null
  name?: string
  userUnique?: string
  data?: ParameterCreateManyInput | null
  default_data?: DefaultParamCreateManyInput | null
  lock?: TrafficCreatelockInput | null
}
export type TrafficCreateWithoutUserInputInputObject =
  | Extract<keyof TrafficCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'default_data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface ParameterCreateManyInput {
  create?: ParameterCreateInput[]
  connect?: ParameterWhereUniqueInput[]
}
export type ParameterCreateManyInputInputObject =
  | Extract<keyof ParameterCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ParameterCreateInput {
  id?: string | null
  tokens?: ParameterCreatetokensInput | null
  track?: boolean
}
export type ParameterCreateInputInputObject =
  | Extract<keyof ParameterCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface ParameterCreatetokensInput {
  set?: string[]
}
export type ParameterCreatetokensInputInputObject =
  | Extract<keyof ParameterCreatetokensInput, string>
  | { name: 'set', alias?: string  } 
  
export interface DefaultParamCreateManyInput {
  create?: DefaultParamCreateInput[]
  connect?: DefaultParamWhereUniqueInput[]
}
export type DefaultParamCreateManyInputInputObject =
  | Extract<keyof DefaultParamCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DefaultParamCreateInput {
  id?: string | null
  head?: string | null
  default?: string | null
  tokens?: DefaultParamCreatetokensInput | null
  track?: boolean
}
export type DefaultParamCreateInputInputObject =
  | Extract<keyof DefaultParamCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'head', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface DefaultParamCreatetokensInput {
  set?: string[]
}
export type DefaultParamCreatetokensInputInputObject =
  | Extract<keyof DefaultParamCreatetokensInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TrafficCreatelockInput {
  set?: string[]
}
export type TrafficCreatelockInputInputObject =
  | Extract<keyof TrafficCreatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface LanderCreateManyWithoutUserInput {
  create?: LanderCreateWithoutUserInput[]
  connect?: LanderWhereUniqueInput[]
}
export type LanderCreateManyWithoutUserInputInputObject =
  | Extract<keyof LanderCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LanderCreateWithoutUserInput {
  id?: string | null
  name?: string
  url?: string
  userUnique?: string
  lock?: LanderCreatelockInput | null
}
export type LanderCreateWithoutUserInputInputObject =
  | Extract<keyof LanderCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface LanderCreatelockInput {
  set?: string[]
}
export type LanderCreatelockInputInputObject =
  | Extract<keyof LanderCreatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface OfferCreateManyWithoutUserInput {
  create?: OfferCreateWithoutUserInput[]
  connect?: OfferWhereUniqueInput[]
}
export type OfferCreateManyWithoutUserInputInputObject =
  | Extract<keyof OfferCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OfferCreateWithoutUserInput {
  id?: string | null
  name?: string
  url?: string
  userUnique?: string
  lock?: OfferCreatelockInput | null
}
export type OfferCreateWithoutUserInputInputObject =
  | Extract<keyof OfferCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface OfferCreatelockInput {
  set?: string[]
}
export type OfferCreatelockInputInputObject =
  | Extract<keyof OfferCreatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface NavigationCreateManyWithoutUserInput {
  create?: NavigationCreateWithoutUserInput[]
  connect?: NavigationWhereUniqueInput[]
}
export type NavigationCreateManyWithoutUserInputInputObject =
  | Extract<keyof NavigationCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NavigationCreateWithoutUserInput {
  id?: string | null
  name?: string
  userUnique?: string
  data?: undefined
  lock?: NavigationCreatelockInput | null
}
export type NavigationCreateWithoutUserInputInputObject =
  | Extract<keyof NavigationCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface NavigationCreatelockInput {
  set?: string[]
}
export type NavigationCreatelockInputInputObject =
  | Extract<keyof NavigationCreatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface CampaignCreateManyWithoutUserInput {
  create?: CampaignCreateWithoutUserInput[]
  connect?: CampaignWhereUniqueInput[]
}
export type CampaignCreateManyWithoutUserInputInputObject =
  | Extract<keyof CampaignCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CampaignCreateWithoutUserInput {
  id?: string | null
  name?: string
  refresh?: string
  totalPercent?: number
  url?: string | null
  traffic?: string
  landerRow?: CampNavRowsCreateManyInput | null
  userUnique?: string
}
export type CampaignCreateWithoutUserInputInputObject =
  | Extract<keyof CampaignCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'landerRow', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface CampNavRowsCreateManyInput {
  create?: CampNavRowsCreateInput[]
  connect?: CampNavRowsWhereUniqueInput[]
}
export type CampNavRowsCreateManyInputInputObject =
  | Extract<keyof CampNavRowsCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CampNavRowsCreateInput {
  id?: string | null
  percent?: number
  landerName?: string
}
export type CampNavRowsCreateInputInputObject =
  | Extract<keyof CampNavRowsCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  
export interface DomainCreateManyWithoutUserInput {
  create?: DomainCreateWithoutUserInput[]
  connect?: DomainWhereUniqueInput[]
}
export type DomainCreateManyWithoutUserInputInputObject =
  | Extract<keyof DomainCreateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DomainCreateWithoutUserInput {
  id?: string | null
  url?: string
  userUnique?: string
  MainDomain?: MainDomainCreateOneWithoutDomainInput | null
}
export type DomainCreateWithoutUserInputInputObject =
  | Extract<keyof DomainCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'MainDomain', alias?: string  } 
  
export interface MainDomainCreateOneWithoutDomainInput {
  create?: MainDomainCreateWithoutDomainInput | null
  connect?: MainDomainWhereUniqueInput | null
}
export type MainDomainCreateOneWithoutDomainInputInputObject =
  | Extract<keyof MainDomainCreateOneWithoutDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MainDomainCreateWithoutDomainInput {
  id?: string | null
  userUnique?: string
  user?: UserCreateOneWithoutMainDomainInput
}
export type MainDomainCreateWithoutDomainInputInputObject =
  | Extract<keyof MainDomainCreateWithoutDomainInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutMainDomainInput {
  create?: UserCreateWithoutMainDomainInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutMainDomainInputInputObject =
  | Extract<keyof UserCreateOneWithoutMainDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutMainDomainInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
}
export type UserCreateWithoutMainDomainInputInputObject =
  | Extract<keyof UserCreateWithoutMainDomainInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  
export interface MainDomainCreateOneWithoutUserInput {
  create?: MainDomainCreateWithoutUserInput | null
  connect?: MainDomainWhereUniqueInput | null
}
export type MainDomainCreateOneWithoutUserInputInputObject =
  | Extract<keyof MainDomainCreateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MainDomainCreateWithoutUserInput {
  id?: string | null
  userUnique?: string
  domain?: DomainCreateOneWithoutMainDomainInput
}
export type MainDomainCreateWithoutUserInputInputObject =
  | Extract<keyof MainDomainCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  
export interface DomainCreateOneWithoutMainDomainInput {
  create?: DomainCreateWithoutMainDomainInput | null
  connect?: DomainWhereUniqueInput | null
}
export type DomainCreateOneWithoutMainDomainInputInputObject =
  | Extract<keyof DomainCreateOneWithoutMainDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DomainCreateWithoutMainDomainInput {
  id?: string | null
  url?: string
  userUnique?: string
  user?: UserCreateOneWithoutDomainInput
}
export type DomainCreateWithoutMainDomainInputInputObject =
  | Extract<keyof DomainCreateWithoutMainDomainInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutDomainInput {
  create?: UserCreateWithoutDomainInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutDomainInputInputObject =
  | Extract<keyof UserCreateOneWithoutDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutDomainInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutDomainInputInputObject =
  | Extract<keyof UserCreateWithoutDomainInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface TrafficUpdateManyWithoutUserInput {
  create?: TrafficCreateWithoutUserInput[]
  delete?: TrafficWhereUniqueInput[]
  connect?: TrafficWhereUniqueInput[]
  set?: TrafficWhereUniqueInput[]
  disconnect?: TrafficWhereUniqueInput[]
  update?: TrafficUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: TrafficUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: TrafficScalarWhereInput[]
  updateMany?: TrafficUpdateManyWithWhereNestedInput[]
}
export type TrafficUpdateManyWithoutUserInputInputObject =
  | Extract<keyof TrafficUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TrafficUpdateWithWhereUniqueWithoutUserInput {
  where?: TrafficWhereUniqueInput
  data?: TrafficUpdateWithoutUserDataInput
}
export type TrafficUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof TrafficUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TrafficUpdateWithoutUserDataInput {
  name?: string | null
  userUnique?: string | null
  data?: ParameterUpdateManyInput | null
  default_data?: DefaultParamUpdateManyInput | null
  lock?: TrafficUpdatelockInput | null
}
export type TrafficUpdateWithoutUserDataInputInputObject =
  | Extract<keyof TrafficUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'default_data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface ParameterUpdateManyInput {
  create?: ParameterCreateInput[]
  update?: ParameterUpdateWithWhereUniqueNestedInput[]
  upsert?: ParameterUpsertWithWhereUniqueNestedInput[]
  delete?: ParameterWhereUniqueInput[]
  connect?: ParameterWhereUniqueInput[]
  set?: ParameterWhereUniqueInput[]
  disconnect?: ParameterWhereUniqueInput[]
  deleteMany?: ParameterScalarWhereInput[]
  updateMany?: ParameterUpdateManyWithWhereNestedInput[]
}
export type ParameterUpdateManyInputInputObject =
  | Extract<keyof ParameterUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ParameterUpdateWithWhereUniqueNestedInput {
  where?: ParameterWhereUniqueInput
  data?: ParameterUpdateDataInput
}
export type ParameterUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ParameterUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ParameterUpdateDataInput {
  tokens?: ParameterUpdatetokensInput | null
  track?: boolean | null
}
export type ParameterUpdateDataInputInputObject =
  | Extract<keyof ParameterUpdateDataInput, string>
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface ParameterUpdatetokensInput {
  set?: string[]
}
export type ParameterUpdatetokensInputInputObject =
  | Extract<keyof ParameterUpdatetokensInput, string>
  | { name: 'set', alias?: string  } 
  
export interface ParameterUpsertWithWhereUniqueNestedInput {
  where?: ParameterWhereUniqueInput
  update?: ParameterUpdateDataInput
  create?: ParameterCreateInput
}
export type ParameterUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof ParameterUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ParameterScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  track?: boolean | null
  track_not?: boolean | null
  AND?: ParameterScalarWhereInput[]
  OR?: ParameterScalarWhereInput[]
  NOT?: ParameterScalarWhereInput[]
}
export type ParameterScalarWhereInputInputObject =
  | Extract<keyof ParameterScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'track', alias?: string  } 
  | { name: 'track_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ParameterUpdateManyWithWhereNestedInput {
  where?: ParameterScalarWhereInput
  data?: ParameterUpdateManyDataInput
}
export type ParameterUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ParameterUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ParameterUpdateManyDataInput {
  tokens?: ParameterUpdatetokensInput | null
  track?: boolean | null
}
export type ParameterUpdateManyDataInputInputObject =
  | Extract<keyof ParameterUpdateManyDataInput, string>
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface DefaultParamUpdateManyInput {
  create?: DefaultParamCreateInput[]
  update?: DefaultParamUpdateWithWhereUniqueNestedInput[]
  upsert?: DefaultParamUpsertWithWhereUniqueNestedInput[]
  delete?: DefaultParamWhereUniqueInput[]
  connect?: DefaultParamWhereUniqueInput[]
  set?: DefaultParamWhereUniqueInput[]
  disconnect?: DefaultParamWhereUniqueInput[]
  deleteMany?: DefaultParamScalarWhereInput[]
  updateMany?: DefaultParamUpdateManyWithWhereNestedInput[]
}
export type DefaultParamUpdateManyInputInputObject =
  | Extract<keyof DefaultParamUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DefaultParamUpdateWithWhereUniqueNestedInput {
  where?: DefaultParamWhereUniqueInput
  data?: DefaultParamUpdateDataInput
}
export type DefaultParamUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof DefaultParamUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DefaultParamUpdateDataInput {
  head?: string | null
  default?: string | null
  tokens?: DefaultParamUpdatetokensInput | null
  track?: boolean | null
}
export type DefaultParamUpdateDataInputInputObject =
  | Extract<keyof DefaultParamUpdateDataInput, string>
  | { name: 'head', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface DefaultParamUpdatetokensInput {
  set?: string[]
}
export type DefaultParamUpdatetokensInputInputObject =
  | Extract<keyof DefaultParamUpdatetokensInput, string>
  | { name: 'set', alias?: string  } 
  
export interface DefaultParamUpsertWithWhereUniqueNestedInput {
  where?: DefaultParamWhereUniqueInput
  update?: DefaultParamUpdateDataInput
  create?: DefaultParamCreateInput
}
export type DefaultParamUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof DefaultParamUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DefaultParamScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  head?: string | null
  head_not?: string | null
  head_in?: string[]
  head_not_in?: string[]
  head_lt?: string | null
  head_lte?: string | null
  head_gt?: string | null
  head_gte?: string | null
  head_contains?: string | null
  head_not_contains?: string | null
  head_starts_with?: string | null
  head_not_starts_with?: string | null
  head_ends_with?: string | null
  head_not_ends_with?: string | null
  default?: string | null
  default_not?: string | null
  default_in?: string[]
  default_not_in?: string[]
  default_lt?: string | null
  default_lte?: string | null
  default_gt?: string | null
  default_gte?: string | null
  default_contains?: string | null
  default_not_contains?: string | null
  default_starts_with?: string | null
  default_not_starts_with?: string | null
  default_ends_with?: string | null
  default_not_ends_with?: string | null
  track?: boolean | null
  track_not?: boolean | null
  AND?: DefaultParamScalarWhereInput[]
  OR?: DefaultParamScalarWhereInput[]
  NOT?: DefaultParamScalarWhereInput[]
}
export type DefaultParamScalarWhereInputInputObject =
  | Extract<keyof DefaultParamScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'head', alias?: string  } 
  | { name: 'head_not', alias?: string  } 
  | { name: 'head_in', alias?: string  } 
  | { name: 'head_not_in', alias?: string  } 
  | { name: 'head_lt', alias?: string  } 
  | { name: 'head_lte', alias?: string  } 
  | { name: 'head_gt', alias?: string  } 
  | { name: 'head_gte', alias?: string  } 
  | { name: 'head_contains', alias?: string  } 
  | { name: 'head_not_contains', alias?: string  } 
  | { name: 'head_starts_with', alias?: string  } 
  | { name: 'head_not_starts_with', alias?: string  } 
  | { name: 'head_ends_with', alias?: string  } 
  | { name: 'head_not_ends_with', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'default_not', alias?: string  } 
  | { name: 'default_in', alias?: string  } 
  | { name: 'default_not_in', alias?: string  } 
  | { name: 'default_lt', alias?: string  } 
  | { name: 'default_lte', alias?: string  } 
  | { name: 'default_gt', alias?: string  } 
  | { name: 'default_gte', alias?: string  } 
  | { name: 'default_contains', alias?: string  } 
  | { name: 'default_not_contains', alias?: string  } 
  | { name: 'default_starts_with', alias?: string  } 
  | { name: 'default_not_starts_with', alias?: string  } 
  | { name: 'default_ends_with', alias?: string  } 
  | { name: 'default_not_ends_with', alias?: string  } 
  | { name: 'track', alias?: string  } 
  | { name: 'track_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DefaultParamUpdateManyWithWhereNestedInput {
  where?: DefaultParamScalarWhereInput
  data?: DefaultParamUpdateManyDataInput
}
export type DefaultParamUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DefaultParamUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DefaultParamUpdateManyDataInput {
  head?: string | null
  default?: string | null
  tokens?: DefaultParamUpdatetokensInput | null
  track?: boolean | null
}
export type DefaultParamUpdateManyDataInputInputObject =
  | Extract<keyof DefaultParamUpdateManyDataInput, string>
  | { name: 'head', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface TrafficUpdatelockInput {
  set?: string[]
}
export type TrafficUpdatelockInputInputObject =
  | Extract<keyof TrafficUpdatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface TrafficUpsertWithWhereUniqueWithoutUserInput {
  where?: TrafficWhereUniqueInput
  update?: TrafficUpdateWithoutUserDataInput
  create?: TrafficCreateWithoutUserInput
}
export type TrafficUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof TrafficUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TrafficScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: TrafficScalarWhereInput[]
  OR?: TrafficScalarWhereInput[]
  NOT?: TrafficScalarWhereInput[]
}
export type TrafficScalarWhereInputInputObject =
  | Extract<keyof TrafficScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TrafficUpdateManyWithWhereNestedInput {
  where?: TrafficScalarWhereInput
  data?: TrafficUpdateManyDataInput
}
export type TrafficUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TrafficUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TrafficUpdateManyDataInput {
  name?: string | null
  userUnique?: string | null
  lock?: TrafficUpdatelockInput | null
}
export type TrafficUpdateManyDataInputInputObject =
  | Extract<keyof TrafficUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface LanderUpdateManyWithoutUserInput {
  create?: LanderCreateWithoutUserInput[]
  delete?: LanderWhereUniqueInput[]
  connect?: LanderWhereUniqueInput[]
  set?: LanderWhereUniqueInput[]
  disconnect?: LanderWhereUniqueInput[]
  update?: LanderUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: LanderUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: LanderScalarWhereInput[]
  updateMany?: LanderUpdateManyWithWhereNestedInput[]
}
export type LanderUpdateManyWithoutUserInputInputObject =
  | Extract<keyof LanderUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface LanderUpdateWithWhereUniqueWithoutUserInput {
  where?: LanderWhereUniqueInput
  data?: LanderUpdateWithoutUserDataInput
}
export type LanderUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof LanderUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LanderUpdateWithoutUserDataInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: LanderUpdatelockInput | null
}
export type LanderUpdateWithoutUserDataInputInputObject =
  | Extract<keyof LanderUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface LanderUpdatelockInput {
  set?: string[]
}
export type LanderUpdatelockInputInputObject =
  | Extract<keyof LanderUpdatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface LanderUpsertWithWhereUniqueWithoutUserInput {
  where?: LanderWhereUniqueInput
  update?: LanderUpdateWithoutUserDataInput
  create?: LanderCreateWithoutUserInput
}
export type LanderUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof LanderUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LanderScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: LanderScalarWhereInput[]
  OR?: LanderScalarWhereInput[]
  NOT?: LanderScalarWhereInput[]
}
export type LanderScalarWhereInputInputObject =
  | Extract<keyof LanderScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LanderUpdateManyWithWhereNestedInput {
  where?: LanderScalarWhereInput
  data?: LanderUpdateManyDataInput
}
export type LanderUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof LanderUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LanderUpdateManyDataInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: LanderUpdatelockInput | null
}
export type LanderUpdateManyDataInputInputObject =
  | Extract<keyof LanderUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface OfferUpdateManyWithoutUserInput {
  create?: OfferCreateWithoutUserInput[]
  delete?: OfferWhereUniqueInput[]
  connect?: OfferWhereUniqueInput[]
  set?: OfferWhereUniqueInput[]
  disconnect?: OfferWhereUniqueInput[]
  update?: OfferUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: OfferUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: OfferScalarWhereInput[]
  updateMany?: OfferUpdateManyWithWhereNestedInput[]
}
export type OfferUpdateManyWithoutUserInputInputObject =
  | Extract<keyof OfferUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OfferUpdateWithWhereUniqueWithoutUserInput {
  where?: OfferWhereUniqueInput
  data?: OfferUpdateWithoutUserDataInput
}
export type OfferUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof OfferUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OfferUpdateWithoutUserDataInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: OfferUpdatelockInput | null
}
export type OfferUpdateWithoutUserDataInputInputObject =
  | Extract<keyof OfferUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface OfferUpdatelockInput {
  set?: string[]
}
export type OfferUpdatelockInputInputObject =
  | Extract<keyof OfferUpdatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface OfferUpsertWithWhereUniqueWithoutUserInput {
  where?: OfferWhereUniqueInput
  update?: OfferUpdateWithoutUserDataInput
  create?: OfferCreateWithoutUserInput
}
export type OfferUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof OfferUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OfferScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: OfferScalarWhereInput[]
  OR?: OfferScalarWhereInput[]
  NOT?: OfferScalarWhereInput[]
}
export type OfferScalarWhereInputInputObject =
  | Extract<keyof OfferScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OfferUpdateManyWithWhereNestedInput {
  where?: OfferScalarWhereInput
  data?: OfferUpdateManyDataInput
}
export type OfferUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OfferUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OfferUpdateManyDataInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: OfferUpdatelockInput | null
}
export type OfferUpdateManyDataInputInputObject =
  | Extract<keyof OfferUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface NavigationUpdateManyWithoutUserInput {
  create?: NavigationCreateWithoutUserInput[]
  delete?: NavigationWhereUniqueInput[]
  connect?: NavigationWhereUniqueInput[]
  set?: NavigationWhereUniqueInput[]
  disconnect?: NavigationWhereUniqueInput[]
  update?: NavigationUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: NavigationUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: NavigationScalarWhereInput[]
  updateMany?: NavigationUpdateManyWithWhereNestedInput[]
}
export type NavigationUpdateManyWithoutUserInputInputObject =
  | Extract<keyof NavigationUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface NavigationUpdateWithWhereUniqueWithoutUserInput {
  where?: NavigationWhereUniqueInput
  data?: NavigationUpdateWithoutUserDataInput
}
export type NavigationUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof NavigationUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NavigationUpdateWithoutUserDataInput {
  name?: string | null
  userUnique?: string | null
  data?: undefined | null
  lock?: NavigationUpdatelockInput | null
}
export type NavigationUpdateWithoutUserDataInputInputObject =
  | Extract<keyof NavigationUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface NavigationUpdatelockInput {
  set?: string[]
}
export type NavigationUpdatelockInputInputObject =
  | Extract<keyof NavigationUpdatelockInput, string>
  | { name: 'set', alias?: string  } 
  
export interface NavigationUpsertWithWhereUniqueWithoutUserInput {
  where?: NavigationWhereUniqueInput
  update?: NavigationUpdateWithoutUserDataInput
  create?: NavigationCreateWithoutUserInput
}
export type NavigationUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof NavigationUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NavigationScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: NavigationScalarWhereInput[]
  OR?: NavigationScalarWhereInput[]
  NOT?: NavigationScalarWhereInput[]
}
export type NavigationScalarWhereInputInputObject =
  | Extract<keyof NavigationScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NavigationUpdateManyWithWhereNestedInput {
  where?: NavigationScalarWhereInput
  data?: NavigationUpdateManyDataInput
}
export type NavigationUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof NavigationUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface NavigationUpdateManyDataInput {
  name?: string | null
  userUnique?: string | null
  data?: undefined | null
  lock?: NavigationUpdatelockInput | null
}
export type NavigationUpdateManyDataInputInputObject =
  | Extract<keyof NavigationUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface CampaignUpdateManyWithoutUserInput {
  create?: CampaignCreateWithoutUserInput[]
  delete?: CampaignWhereUniqueInput[]
  connect?: CampaignWhereUniqueInput[]
  set?: CampaignWhereUniqueInput[]
  disconnect?: CampaignWhereUniqueInput[]
  update?: CampaignUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: CampaignUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: CampaignScalarWhereInput[]
  updateMany?: CampaignUpdateManyWithWhereNestedInput[]
}
export type CampaignUpdateManyWithoutUserInputInputObject =
  | Extract<keyof CampaignUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CampaignUpdateWithWhereUniqueWithoutUserInput {
  where?: CampaignWhereUniqueInput
  data?: CampaignUpdateWithoutUserDataInput
}
export type CampaignUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof CampaignUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CampaignUpdateWithoutUserDataInput {
  name?: string | null
  refresh?: string | null
  totalPercent?: number | null
  url?: string | null
  traffic?: string | null
  landerRow?: CampNavRowsUpdateManyInput | null
  userUnique?: string | null
}
export type CampaignUpdateWithoutUserDataInputInputObject =
  | Extract<keyof CampaignUpdateWithoutUserDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'landerRow', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface CampNavRowsUpdateManyInput {
  create?: CampNavRowsCreateInput[]
  update?: CampNavRowsUpdateWithWhereUniqueNestedInput[]
  upsert?: CampNavRowsUpsertWithWhereUniqueNestedInput[]
  delete?: CampNavRowsWhereUniqueInput[]
  connect?: CampNavRowsWhereUniqueInput[]
  set?: CampNavRowsWhereUniqueInput[]
  disconnect?: CampNavRowsWhereUniqueInput[]
  deleteMany?: CampNavRowsScalarWhereInput[]
  updateMany?: CampNavRowsUpdateManyWithWhereNestedInput[]
}
export type CampNavRowsUpdateManyInputInputObject =
  | Extract<keyof CampNavRowsUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CampNavRowsUpdateWithWhereUniqueNestedInput {
  where?: CampNavRowsWhereUniqueInput
  data?: CampNavRowsUpdateDataInput
}
export type CampNavRowsUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof CampNavRowsUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CampNavRowsUpdateDataInput {
  percent?: number | null
  landerName?: string | null
}
export type CampNavRowsUpdateDataInputInputObject =
  | Extract<keyof CampNavRowsUpdateDataInput, string>
  | { name: 'percent', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  
export interface CampNavRowsUpsertWithWhereUniqueNestedInput {
  where?: CampNavRowsWhereUniqueInput
  update?: CampNavRowsUpdateDataInput
  create?: CampNavRowsCreateInput
}
export type CampNavRowsUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof CampNavRowsUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CampNavRowsScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  percent?: number | null
  percent_not?: number | null
  percent_in?: number[]
  percent_not_in?: number[]
  percent_lt?: number | null
  percent_lte?: number | null
  percent_gt?: number | null
  percent_gte?: number | null
  landerName?: string | null
  landerName_not?: string | null
  landerName_in?: string[]
  landerName_not_in?: string[]
  landerName_lt?: string | null
  landerName_lte?: string | null
  landerName_gt?: string | null
  landerName_gte?: string | null
  landerName_contains?: string | null
  landerName_not_contains?: string | null
  landerName_starts_with?: string | null
  landerName_not_starts_with?: string | null
  landerName_ends_with?: string | null
  landerName_not_ends_with?: string | null
  AND?: CampNavRowsScalarWhereInput[]
  OR?: CampNavRowsScalarWhereInput[]
  NOT?: CampNavRowsScalarWhereInput[]
}
export type CampNavRowsScalarWhereInputInputObject =
  | Extract<keyof CampNavRowsScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'percent', alias?: string  } 
  | { name: 'percent_not', alias?: string  } 
  | { name: 'percent_in', alias?: string  } 
  | { name: 'percent_not_in', alias?: string  } 
  | { name: 'percent_lt', alias?: string  } 
  | { name: 'percent_lte', alias?: string  } 
  | { name: 'percent_gt', alias?: string  } 
  | { name: 'percent_gte', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  | { name: 'landerName_not', alias?: string  } 
  | { name: 'landerName_in', alias?: string  } 
  | { name: 'landerName_not_in', alias?: string  } 
  | { name: 'landerName_lt', alias?: string  } 
  | { name: 'landerName_lte', alias?: string  } 
  | { name: 'landerName_gt', alias?: string  } 
  | { name: 'landerName_gte', alias?: string  } 
  | { name: 'landerName_contains', alias?: string  } 
  | { name: 'landerName_not_contains', alias?: string  } 
  | { name: 'landerName_starts_with', alias?: string  } 
  | { name: 'landerName_not_starts_with', alias?: string  } 
  | { name: 'landerName_ends_with', alias?: string  } 
  | { name: 'landerName_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CampNavRowsUpdateManyWithWhereNestedInput {
  where?: CampNavRowsScalarWhereInput
  data?: CampNavRowsUpdateManyDataInput
}
export type CampNavRowsUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CampNavRowsUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CampNavRowsUpdateManyDataInput {
  percent?: number | null
  landerName?: string | null
}
export type CampNavRowsUpdateManyDataInputInputObject =
  | Extract<keyof CampNavRowsUpdateManyDataInput, string>
  | { name: 'percent', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  
export interface CampaignUpsertWithWhereUniqueWithoutUserInput {
  where?: CampaignWhereUniqueInput
  update?: CampaignUpdateWithoutUserDataInput
  create?: CampaignCreateWithoutUserInput
}
export type CampaignUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof CampaignUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CampaignScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  refresh?: string | null
  refresh_not?: string | null
  refresh_in?: string[]
  refresh_not_in?: string[]
  refresh_lt?: string | null
  refresh_lte?: string | null
  refresh_gt?: string | null
  refresh_gte?: string | null
  refresh_contains?: string | null
  refresh_not_contains?: string | null
  refresh_starts_with?: string | null
  refresh_not_starts_with?: string | null
  refresh_ends_with?: string | null
  refresh_not_ends_with?: string | null
  totalPercent?: number | null
  totalPercent_not?: number | null
  totalPercent_in?: number[]
  totalPercent_not_in?: number[]
  totalPercent_lt?: number | null
  totalPercent_lte?: number | null
  totalPercent_gt?: number | null
  totalPercent_gte?: number | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  traffic?: string | null
  traffic_not?: string | null
  traffic_in?: string[]
  traffic_not_in?: string[]
  traffic_lt?: string | null
  traffic_lte?: string | null
  traffic_gt?: string | null
  traffic_gte?: string | null
  traffic_contains?: string | null
  traffic_not_contains?: string | null
  traffic_starts_with?: string | null
  traffic_not_starts_with?: string | null
  traffic_ends_with?: string | null
  traffic_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: CampaignScalarWhereInput[]
  OR?: CampaignScalarWhereInput[]
  NOT?: CampaignScalarWhereInput[]
}
export type CampaignScalarWhereInputInputObject =
  | Extract<keyof CampaignScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'refresh_not', alias?: string  } 
  | { name: 'refresh_in', alias?: string  } 
  | { name: 'refresh_not_in', alias?: string  } 
  | { name: 'refresh_lt', alias?: string  } 
  | { name: 'refresh_lte', alias?: string  } 
  | { name: 'refresh_gt', alias?: string  } 
  | { name: 'refresh_gte', alias?: string  } 
  | { name: 'refresh_contains', alias?: string  } 
  | { name: 'refresh_not_contains', alias?: string  } 
  | { name: 'refresh_starts_with', alias?: string  } 
  | { name: 'refresh_not_starts_with', alias?: string  } 
  | { name: 'refresh_ends_with', alias?: string  } 
  | { name: 'refresh_not_ends_with', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'totalPercent_not', alias?: string  } 
  | { name: 'totalPercent_in', alias?: string  } 
  | { name: 'totalPercent_not_in', alias?: string  } 
  | { name: 'totalPercent_lt', alias?: string  } 
  | { name: 'totalPercent_lte', alias?: string  } 
  | { name: 'totalPercent_gt', alias?: string  } 
  | { name: 'totalPercent_gte', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'traffic_not', alias?: string  } 
  | { name: 'traffic_in', alias?: string  } 
  | { name: 'traffic_not_in', alias?: string  } 
  | { name: 'traffic_lt', alias?: string  } 
  | { name: 'traffic_lte', alias?: string  } 
  | { name: 'traffic_gt', alias?: string  } 
  | { name: 'traffic_gte', alias?: string  } 
  | { name: 'traffic_contains', alias?: string  } 
  | { name: 'traffic_not_contains', alias?: string  } 
  | { name: 'traffic_starts_with', alias?: string  } 
  | { name: 'traffic_not_starts_with', alias?: string  } 
  | { name: 'traffic_ends_with', alias?: string  } 
  | { name: 'traffic_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CampaignUpdateManyWithWhereNestedInput {
  where?: CampaignScalarWhereInput
  data?: CampaignUpdateManyDataInput
}
export type CampaignUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CampaignUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CampaignUpdateManyDataInput {
  name?: string | null
  refresh?: string | null
  totalPercent?: number | null
  url?: string | null
  traffic?: string | null
  userUnique?: string | null
}
export type CampaignUpdateManyDataInputInputObject =
  | Extract<keyof CampaignUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface DomainUpdateManyWithoutUserInput {
  create?: DomainCreateWithoutUserInput[]
  delete?: DomainWhereUniqueInput[]
  connect?: DomainWhereUniqueInput[]
  set?: DomainWhereUniqueInput[]
  disconnect?: DomainWhereUniqueInput[]
  update?: DomainUpdateWithWhereUniqueWithoutUserInput[]
  upsert?: DomainUpsertWithWhereUniqueWithoutUserInput[]
  deleteMany?: DomainScalarWhereInput[]
  updateMany?: DomainUpdateManyWithWhereNestedInput[]
}
export type DomainUpdateManyWithoutUserInputInputObject =
  | Extract<keyof DomainUpdateManyWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DomainUpdateWithWhereUniqueWithoutUserInput {
  where?: DomainWhereUniqueInput
  data?: DomainUpdateWithoutUserDataInput
}
export type DomainUpdateWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof DomainUpdateWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DomainUpdateWithoutUserDataInput {
  url?: string | null
  userUnique?: string | null
  MainDomain?: MainDomainUpdateOneWithoutDomainInput | null
}
export type DomainUpdateWithoutUserDataInputInputObject =
  | Extract<keyof DomainUpdateWithoutUserDataInput, string>
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'MainDomain', alias?: string  } 
  
export interface MainDomainUpdateOneWithoutDomainInput {
  create?: MainDomainCreateWithoutDomainInput | null
  update?: MainDomainUpdateWithoutDomainDataInput | null
  upsert?: MainDomainUpsertWithoutDomainInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MainDomainWhereUniqueInput | null
}
export type MainDomainUpdateOneWithoutDomainInputInputObject =
  | Extract<keyof MainDomainUpdateOneWithoutDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MainDomainUpdateWithoutDomainDataInput {
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutMainDomainInput | null
}
export type MainDomainUpdateWithoutDomainDataInputInputObject =
  | Extract<keyof MainDomainUpdateWithoutDomainDataInput, string>
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutMainDomainInput {
  create?: UserCreateWithoutMainDomainInput | null
  update?: UserUpdateWithoutMainDomainDataInput | null
  upsert?: UserUpsertWithoutMainDomainInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutMainDomainInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutMainDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutMainDomainDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
}
export type UserUpdateWithoutMainDomainDataInputInputObject =
  | Extract<keyof UserUpdateWithoutMainDomainDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  
export interface UserUpsertWithoutMainDomainInput {
  update?: UserUpdateWithoutMainDomainDataInput
  create?: UserCreateWithoutMainDomainInput
}
export type UserUpsertWithoutMainDomainInputInputObject =
  | Extract<keyof UserUpsertWithoutMainDomainInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MainDomainUpsertWithoutDomainInput {
  update?: MainDomainUpdateWithoutDomainDataInput
  create?: MainDomainCreateWithoutDomainInput
}
export type MainDomainUpsertWithoutDomainInputInputObject =
  | Extract<keyof MainDomainUpsertWithoutDomainInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DomainUpsertWithWhereUniqueWithoutUserInput {
  where?: DomainWhereUniqueInput
  update?: DomainUpdateWithoutUserDataInput
  create?: DomainCreateWithoutUserInput
}
export type DomainUpsertWithWhereUniqueWithoutUserInputInputObject =
  | Extract<keyof DomainUpsertWithWhereUniqueWithoutUserInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DomainScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  userUnique?: string | null
  userUnique_not?: string | null
  userUnique_in?: string[]
  userUnique_not_in?: string[]
  userUnique_lt?: string | null
  userUnique_lte?: string | null
  userUnique_gt?: string | null
  userUnique_gte?: string | null
  userUnique_contains?: string | null
  userUnique_not_contains?: string | null
  userUnique_starts_with?: string | null
  userUnique_not_starts_with?: string | null
  userUnique_ends_with?: string | null
  userUnique_not_ends_with?: string | null
  AND?: DomainScalarWhereInput[]
  OR?: DomainScalarWhereInput[]
  NOT?: DomainScalarWhereInput[]
}
export type DomainScalarWhereInputInputObject =
  | Extract<keyof DomainScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'userUnique_not', alias?: string  } 
  | { name: 'userUnique_in', alias?: string  } 
  | { name: 'userUnique_not_in', alias?: string  } 
  | { name: 'userUnique_lt', alias?: string  } 
  | { name: 'userUnique_lte', alias?: string  } 
  | { name: 'userUnique_gt', alias?: string  } 
  | { name: 'userUnique_gte', alias?: string  } 
  | { name: 'userUnique_contains', alias?: string  } 
  | { name: 'userUnique_not_contains', alias?: string  } 
  | { name: 'userUnique_starts_with', alias?: string  } 
  | { name: 'userUnique_not_starts_with', alias?: string  } 
  | { name: 'userUnique_ends_with', alias?: string  } 
  | { name: 'userUnique_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DomainUpdateManyWithWhereNestedInput {
  where?: DomainScalarWhereInput
  data?: DomainUpdateManyDataInput
}
export type DomainUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DomainUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DomainUpdateManyDataInput {
  url?: string | null
  userUnique?: string | null
}
export type DomainUpdateManyDataInputInputObject =
  | Extract<keyof DomainUpdateManyDataInput, string>
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface MainDomainUpdateOneWithoutUserInput {
  create?: MainDomainCreateWithoutUserInput | null
  update?: MainDomainUpdateWithoutUserDataInput | null
  upsert?: MainDomainUpsertWithoutUserInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: MainDomainWhereUniqueInput | null
}
export type MainDomainUpdateOneWithoutUserInputInputObject =
  | Extract<keyof MainDomainUpdateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MainDomainUpdateWithoutUserDataInput {
  userUnique?: string | null
  domain?: DomainUpdateOneRequiredWithoutMainDomainInput | null
}
export type MainDomainUpdateWithoutUserDataInputInputObject =
  | Extract<keyof MainDomainUpdateWithoutUserDataInput, string>
  | { name: 'userUnique', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  
export interface DomainUpdateOneRequiredWithoutMainDomainInput {
  create?: DomainCreateWithoutMainDomainInput | null
  update?: DomainUpdateWithoutMainDomainDataInput | null
  upsert?: DomainUpsertWithoutMainDomainInput | null
  connect?: DomainWhereUniqueInput | null
}
export type DomainUpdateOneRequiredWithoutMainDomainInputInputObject =
  | Extract<keyof DomainUpdateOneRequiredWithoutMainDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DomainUpdateWithoutMainDomainDataInput {
  url?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutDomainInput | null
}
export type DomainUpdateWithoutMainDomainDataInputInputObject =
  | Extract<keyof DomainUpdateWithoutMainDomainDataInput, string>
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutDomainInput {
  create?: UserCreateWithoutDomainInput | null
  update?: UserUpdateWithoutDomainDataInput | null
  upsert?: UserUpsertWithoutDomainInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutDomainInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutDomainInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutDomainDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutDomainDataInputInputObject =
  | Extract<keyof UserUpdateWithoutDomainDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutDomainInput {
  update?: UserUpdateWithoutDomainDataInput
  create?: UserCreateWithoutDomainInput
}
export type UserUpsertWithoutDomainInputInputObject =
  | Extract<keyof UserUpsertWithoutDomainInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DomainUpsertWithoutMainDomainInput {
  update?: DomainUpdateWithoutMainDomainDataInput
  create?: DomainCreateWithoutMainDomainInput
}
export type DomainUpsertWithoutMainDomainInputInputObject =
  | Extract<keyof DomainUpsertWithoutMainDomainInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MainDomainUpsertWithoutUserInput {
  update?: MainDomainUpdateWithoutUserDataInput
  create?: MainDomainCreateWithoutUserInput
}
export type MainDomainUpsertWithoutUserInputInputObject =
  | Extract<keyof MainDomainUpsertWithoutUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  email?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface ParameterUpdateInput {
  tokens?: ParameterUpdatetokensInput | null
  track?: boolean | null
}
export type ParameterUpdateInputInputObject =
  | Extract<keyof ParameterUpdateInput, string>
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface ParameterUpdateManyMutationInput {
  tokens?: ParameterUpdatetokensInput | null
  track?: boolean | null
}
export type ParameterUpdateManyMutationInputInputObject =
  | Extract<keyof ParameterUpdateManyMutationInput, string>
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface DefaultParamUpdateInput {
  head?: string | null
  default?: string | null
  tokens?: DefaultParamUpdatetokensInput | null
  track?: boolean | null
}
export type DefaultParamUpdateInputInputObject =
  | Extract<keyof DefaultParamUpdateInput, string>
  | { name: 'head', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface DefaultParamUpdateManyMutationInput {
  head?: string | null
  default?: string | null
  tokens?: DefaultParamUpdatetokensInput | null
  track?: boolean | null
}
export type DefaultParamUpdateManyMutationInputInputObject =
  | Extract<keyof DefaultParamUpdateManyMutationInput, string>
  | { name: 'head', alias?: string  } 
  | { name: 'default', alias?: string  } 
  | { name: 'tokens', alias?: string  } 
  | { name: 'track', alias?: string  } 
  
export interface TokenCreateInput {
  id?: string | null
  name?: string
  parameter?: string
  placeholder?: string
}
export type TokenCreateInputInputObject =
  | Extract<keyof TokenCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'parameter', alias?: string  } 
  | { name: 'placeholder', alias?: string  } 
  
export interface TokenUpdateInput {
  name?: string | null
  parameter?: string | null
  placeholder?: string | null
}
export type TokenUpdateInputInputObject =
  | Extract<keyof TokenUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parameter', alias?: string  } 
  | { name: 'placeholder', alias?: string  } 
  
export interface TokenUpdateManyMutationInput {
  name?: string | null
  parameter?: string | null
  placeholder?: string | null
}
export type TokenUpdateManyMutationInputInputObject =
  | Extract<keyof TokenUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'parameter', alias?: string  } 
  | { name: 'placeholder', alias?: string  } 
  
export interface TrafficCreateInput {
  id?: string | null
  name?: string
  userUnique?: string
  user?: UserCreateOneWithoutTrafficInput
  data?: ParameterCreateManyInput | null
  default_data?: DefaultParamCreateManyInput | null
  lock?: TrafficCreatelockInput | null
}
export type TrafficCreateInputInputObject =
  | Extract<keyof TrafficCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'default_data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserCreateOneWithoutTrafficInput {
  create?: UserCreateWithoutTrafficInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutTrafficInputInputObject =
  | Extract<keyof UserCreateOneWithoutTrafficInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutTrafficInput {
  id?: string | null
  name?: string
  email?: string
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutTrafficInputInputObject =
  | Extract<keyof UserCreateWithoutTrafficInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface TrafficUpdateInput {
  name?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutTrafficInput | null
  data?: ParameterUpdateManyInput | null
  default_data?: DefaultParamUpdateManyInput | null
  lock?: TrafficUpdatelockInput | null
}
export type TrafficUpdateInputInputObject =
  | Extract<keyof TrafficUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'default_data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutTrafficInput {
  create?: UserCreateWithoutTrafficInput | null
  update?: UserUpdateWithoutTrafficDataInput | null
  upsert?: UserUpsertWithoutTrafficInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutTrafficInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutTrafficInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutTrafficDataInput {
  name?: string | null
  email?: string | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutTrafficDataInputInputObject =
  | Extract<keyof UserUpdateWithoutTrafficDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutTrafficInput {
  update?: UserUpdateWithoutTrafficDataInput
  create?: UserCreateWithoutTrafficInput
}
export type UserUpsertWithoutTrafficInputInputObject =
  | Extract<keyof UserUpsertWithoutTrafficInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TrafficUpdateManyMutationInput {
  name?: string | null
  userUnique?: string | null
  lock?: TrafficUpdatelockInput | null
}
export type TrafficUpdateManyMutationInputInputObject =
  | Extract<keyof TrafficUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface LanderCreateInput {
  id?: string | null
  name?: string
  url?: string
  userUnique?: string
  user?: UserCreateOneWithoutLanderInput
  lock?: LanderCreatelockInput | null
}
export type LanderCreateInputInputObject =
  | Extract<keyof LanderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserCreateOneWithoutLanderInput {
  create?: UserCreateWithoutLanderInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutLanderInputInputObject =
  | Extract<keyof UserCreateOneWithoutLanderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutLanderInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutLanderInputInputObject =
  | Extract<keyof UserCreateWithoutLanderInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface LanderUpdateInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutLanderInput | null
  lock?: LanderUpdatelockInput | null
}
export type LanderUpdateInputInputObject =
  | Extract<keyof LanderUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutLanderInput {
  create?: UserCreateWithoutLanderInput | null
  update?: UserUpdateWithoutLanderDataInput | null
  upsert?: UserUpsertWithoutLanderInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutLanderInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutLanderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutLanderDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutLanderDataInputInputObject =
  | Extract<keyof UserUpdateWithoutLanderDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutLanderInput {
  update?: UserUpdateWithoutLanderDataInput
  create?: UserCreateWithoutLanderInput
}
export type UserUpsertWithoutLanderInputInputObject =
  | Extract<keyof UserUpsertWithoutLanderInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LanderUpdateManyMutationInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: LanderUpdatelockInput | null
}
export type LanderUpdateManyMutationInputInputObject =
  | Extract<keyof LanderUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface OfferCreateInput {
  id?: string | null
  name?: string
  url?: string
  userUnique?: string
  user?: UserCreateOneWithoutOfferInput
  lock?: OfferCreatelockInput | null
}
export type OfferCreateInputInputObject =
  | Extract<keyof OfferCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserCreateOneWithoutOfferInput {
  create?: UserCreateWithoutOfferInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutOfferInputInputObject =
  | Extract<keyof UserCreateOneWithoutOfferInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutOfferInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutOfferInputInputObject =
  | Extract<keyof UserCreateWithoutOfferInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface OfferUpdateInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutOfferInput | null
  lock?: OfferUpdatelockInput | null
}
export type OfferUpdateInputInputObject =
  | Extract<keyof OfferUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutOfferInput {
  create?: UserCreateWithoutOfferInput | null
  update?: UserUpdateWithoutOfferDataInput | null
  upsert?: UserUpsertWithoutOfferInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutOfferInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutOfferInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutOfferDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutOfferDataInputInputObject =
  | Extract<keyof UserUpdateWithoutOfferDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutOfferInput {
  update?: UserUpdateWithoutOfferDataInput
  create?: UserCreateWithoutOfferInput
}
export type UserUpsertWithoutOfferInputInputObject =
  | Extract<keyof UserUpsertWithoutOfferInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OfferUpdateManyMutationInput {
  name?: string | null
  url?: string | null
  userUnique?: string | null
  lock?: OfferUpdatelockInput | null
}
export type OfferUpdateManyMutationInputInputObject =
  | Extract<keyof OfferUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface NavigationCreateInput {
  id?: string | null
  name?: string
  userUnique?: string
  user?: UserCreateOneWithoutNavigationInput
  data?: undefined
  lock?: NavigationCreatelockInput | null
}
export type NavigationCreateInputInputObject =
  | Extract<keyof NavigationCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserCreateOneWithoutNavigationInput {
  create?: UserCreateWithoutNavigationInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutNavigationInputInputObject =
  | Extract<keyof UserCreateOneWithoutNavigationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutNavigationInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  campaign?: CampaignCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutNavigationInputInputObject =
  | Extract<keyof UserCreateWithoutNavigationInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface NavigationUpdateInput {
  name?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutNavigationInput | null
  data?: undefined | null
  lock?: NavigationUpdatelockInput | null
}
export type NavigationUpdateInputInputObject =
  | Extract<keyof NavigationUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutNavigationInput {
  create?: UserCreateWithoutNavigationInput | null
  update?: UserUpdateWithoutNavigationDataInput | null
  upsert?: UserUpsertWithoutNavigationInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutNavigationInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutNavigationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutNavigationDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  campaign?: CampaignUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutNavigationDataInputInputObject =
  | Extract<keyof UserUpdateWithoutNavigationDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'campaign', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutNavigationInput {
  update?: UserUpdateWithoutNavigationDataInput
  create?: UserCreateWithoutNavigationInput
}
export type UserUpsertWithoutNavigationInputInputObject =
  | Extract<keyof UserUpsertWithoutNavigationInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NavigationUpdateManyMutationInput {
  name?: string | null
  userUnique?: string | null
  data?: undefined | null
  lock?: NavigationUpdatelockInput | null
}
export type NavigationUpdateManyMutationInputInputObject =
  | Extract<keyof NavigationUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'data', alias?: string  } 
  | { name: 'lock', alias?: string  } 
  
export interface CampaignCreateInput {
  id?: string | null
  name?: string
  refresh?: string
  totalPercent?: number
  url?: string | null
  traffic?: string
  landerRow?: CampNavRowsCreateManyInput | null
  userUnique?: string
  user?: UserCreateOneWithoutCampaignInput
}
export type CampaignCreateInputInputObject =
  | Extract<keyof CampaignCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'landerRow', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutCampaignInput {
  create?: UserCreateWithoutCampaignInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCampaignInputInputObject =
  | Extract<keyof UserCreateOneWithoutCampaignInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCampaignInput {
  id?: string | null
  name?: string
  email?: string
  traffic?: TrafficCreateManyWithoutUserInput | null
  lander?: LanderCreateManyWithoutUserInput | null
  offer?: OfferCreateManyWithoutUserInput | null
  navigation?: NavigationCreateManyWithoutUserInput | null
  domain?: DomainCreateManyWithoutUserInput | null
  mainDomain?: MainDomainCreateOneWithoutUserInput | null
}
export type UserCreateWithoutCampaignInputInputObject =
  | Extract<keyof UserCreateWithoutCampaignInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface CampaignUpdateInput {
  name?: string | null
  refresh?: string | null
  totalPercent?: number | null
  url?: string | null
  traffic?: string | null
  landerRow?: CampNavRowsUpdateManyInput | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutCampaignInput | null
}
export type CampaignUpdateInputInputObject =
  | Extract<keyof CampaignUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'landerRow', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutCampaignInput {
  create?: UserCreateWithoutCampaignInput | null
  update?: UserUpdateWithoutCampaignDataInput | null
  upsert?: UserUpsertWithoutCampaignInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutCampaignInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutCampaignInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCampaignDataInput {
  name?: string | null
  email?: string | null
  traffic?: TrafficUpdateManyWithoutUserInput | null
  lander?: LanderUpdateManyWithoutUserInput | null
  offer?: OfferUpdateManyWithoutUserInput | null
  navigation?: NavigationUpdateManyWithoutUserInput | null
  domain?: DomainUpdateManyWithoutUserInput | null
  mainDomain?: MainDomainUpdateOneWithoutUserInput | null
}
export type UserUpdateWithoutCampaignDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCampaignDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'lander', alias?: string  } 
  | { name: 'offer', alias?: string  } 
  | { name: 'navigation', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'mainDomain', alias?: string  } 
  
export interface UserUpsertWithoutCampaignInput {
  update?: UserUpdateWithoutCampaignDataInput
  create?: UserCreateWithoutCampaignInput
}
export type UserUpsertWithoutCampaignInputInputObject =
  | Extract<keyof UserUpsertWithoutCampaignInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CampaignUpdateManyMutationInput {
  name?: string | null
  refresh?: string | null
  totalPercent?: number | null
  url?: string | null
  traffic?: string | null
  userUnique?: string | null
}
export type CampaignUpdateManyMutationInputInputObject =
  | Extract<keyof CampaignUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'refresh', alias?: string  } 
  | { name: 'totalPercent', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'traffic', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface CampNavRowsUpdateInput {
  percent?: number | null
  landerName?: string | null
}
export type CampNavRowsUpdateInputInputObject =
  | Extract<keyof CampNavRowsUpdateInput, string>
  | { name: 'percent', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  
export interface CampNavRowsUpdateManyMutationInput {
  percent?: number | null
  landerName?: string | null
}
export type CampNavRowsUpdateManyMutationInputInputObject =
  | Extract<keyof CampNavRowsUpdateManyMutationInput, string>
  | { name: 'percent', alias?: string  } 
  | { name: 'landerName', alias?: string  } 
  
export interface DomainCreateInput {
  id?: string | null
  url?: string
  userUnique?: string
  user?: UserCreateOneWithoutDomainInput
  MainDomain?: MainDomainCreateOneWithoutDomainInput | null
}
export type DomainCreateInputInputObject =
  | Extract<keyof DomainCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'MainDomain', alias?: string  } 
  
export interface DomainUpdateInput {
  url?: string | null
  userUnique?: string | null
  user?: UserUpdateOneRequiredWithoutDomainInput | null
  MainDomain?: MainDomainUpdateOneWithoutDomainInput | null
}
export type DomainUpdateInputInputObject =
  | Extract<keyof DomainUpdateInput, string>
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'MainDomain', alias?: string  } 
  
export interface DomainUpdateManyMutationInput {
  url?: string | null
  userUnique?: string | null
}
export type DomainUpdateManyMutationInputInputObject =
  | Extract<keyof DomainUpdateManyMutationInput, string>
  | { name: 'url', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  
export interface MainDomainCreateInput {
  id?: string | null
  userUnique?: string
  domain?: DomainCreateOneWithoutMainDomainInput
  user?: UserCreateOneWithoutMainDomainInput
}
export type MainDomainCreateInputInputObject =
  | Extract<keyof MainDomainCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'userUnique', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface MainDomainUpdateInput {
  userUnique?: string | null
  domain?: DomainUpdateOneRequiredWithoutMainDomainInput | null
  user?: UserUpdateOneRequiredWithoutMainDomainInput | null
}
export type MainDomainUpdateInputInputObject =
  | Extract<keyof MainDomainUpdateInput, string>
  | { name: 'userUnique', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface MainDomainUpdateManyMutationInput {
  userUnique?: string | null
}
export type MainDomainUpdateManyMutationInputInputObject =
  | Extract<keyof MainDomainUpdateManyMutationInput, string>
  | { name: 'userUnique', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface ParameterSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ParameterWhereInput | null
  AND?: ParameterSubscriptionWhereInput[]
}
export type ParameterSubscriptionWhereInputInputObject =
  | Extract<keyof ParameterSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DefaultParamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DefaultParamWhereInput | null
  AND?: DefaultParamSubscriptionWhereInput[]
}
export type DefaultParamSubscriptionWhereInputInputObject =
  | Extract<keyof DefaultParamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TokenSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TokenWhereInput | null
  AND?: TokenSubscriptionWhereInput[]
}
export type TokenSubscriptionWhereInputInputObject =
  | Extract<keyof TokenSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface TrafficSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TrafficWhereInput | null
  AND?: TrafficSubscriptionWhereInput[]
}
export type TrafficSubscriptionWhereInputInputObject =
  | Extract<keyof TrafficSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface LanderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LanderWhereInput | null
  AND?: LanderSubscriptionWhereInput[]
}
export type LanderSubscriptionWhereInputInputObject =
  | Extract<keyof LanderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface OfferSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OfferWhereInput | null
  AND?: OfferSubscriptionWhereInput[]
}
export type OfferSubscriptionWhereInputInputObject =
  | Extract<keyof OfferSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface NavigationSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NavigationWhereInput | null
  AND?: NavigationSubscriptionWhereInput[]
}
export type NavigationSubscriptionWhereInputInputObject =
  | Extract<keyof NavigationSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CampaignSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CampaignWhereInput | null
  AND?: CampaignSubscriptionWhereInput[]
}
export type CampaignSubscriptionWhereInputInputObject =
  | Extract<keyof CampaignSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface CampNavRowsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CampNavRowsWhereInput | null
  AND?: CampNavRowsSubscriptionWhereInput[]
}
export type CampNavRowsSubscriptionWhereInputInputObject =
  | Extract<keyof CampNavRowsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface DomainSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DomainWhereInput | null
  AND?: DomainSubscriptionWhereInput[]
}
export type DomainSubscriptionWhereInputInputObject =
  | Extract<keyof DomainSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface MainDomainSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MainDomainWhereInput | null
  AND?: MainDomainSubscriptionWhereInput[]
}
export type MainDomainSubscriptionWhereInputInputObject =
  | Extract<keyof MainDomainSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type TrafficOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type ParameterOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'track_ASC'
  | 'track_DESC'
  
export type DefaultParamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'head_ASC'
  | 'head_DESC'
  | 'default_ASC'
  | 'default_DESC'
  | 'track_ASC'
  | 'track_DESC'
  
export type LanderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type OfferOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type NavigationOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  | 'data_ASC'
  | 'data_DESC'
  
export type CampaignOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'refresh_ASC'
  | 'refresh_DESC'
  | 'totalPercent_ASC'
  | 'totalPercent_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'traffic_ASC'
  | 'traffic_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type CampNavRowsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'percent_ASC'
  | 'percent_DESC'
  | 'landerName_ASC'
  | 'landerName_DESC'
  
export type DomainOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  
export type TokenOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'parameter_ASC'
  | 'parameter_DESC'
  | 'placeholder_ASC'
  | 'placeholder_DESC'
  
export type MainDomainOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'userUnique_ASC'
  | 'userUnique_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  